openapi: 3.0.3
info:
  title: Open Delivery
  version: "1.0.0-rc1 'Beta'"
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  contact:
    name: Suporte Open Delivery
    email: suporte@opendelivery.org.br
    url: https://www.opendelivery.org.br
  x-logo:
    url: https://gui-camargo.github.io/OD/logo-open-delivery_small.png
    altText:  Open Delivery logo

  description: |-

    # Github repository
    
    In case of doubts, suggestions, improvements, problems or any information regarding the documentation presented here, access the project's github and open a new issue.
    
    Git: https://github.com/Abrasel-Nacional/Open-Delivery-Beta-Test
    
    # Introduction

    **Open Delivery** proposes to solve the challenge of organizing the flow of information between merchants and ordering applications, establishing a single communication standard for all, through a set of REST APIs.
    Thus, menus and orders are standardized and customer requests are received in a single place, in an organized and efficient way, allowing the merchant to work with more partners in the delivery environment.

    ## How Open Delivery integrations work

    **Open Delivery** API integrations have two main components: **Merchants** information and **Orders** events.

    <div align="center">
      <img src="https://abrasel-nacional.github.io/docs/images/od_intro.png" />
    </div>

    ## Merchant API

    This API defines all the necessary merchant information for the **Ordering Application** to display correctly for the costumer.
    The Merchant endpoint is hosted by the merchant chosen **Software Service** Company (eg. POS applications) and periodically fetched by an **Ordering Application** (eg. Marketplaces), ensuring up-to-date ordering information is shown to costumers.

    The API contains these top-level entities:

    - **Basic Merchant Info** properties
    - **Service** properties
    - **Menu** properties (Menus, Categories, Items, Offers, OptionGroups and Availability)

    See: **[Merchant Guide](#tag/merchantOverview)**

    ## Order API
    
    ### Order Events

    **Open Delivery** provides two ways for the merchant **Software Service** to receive the order events generated by the **Ordering Application**:

    - Polling (required)
    - Webhook (optional)

    ### Order updates

    After a new order event has been submitted, merchant **Software Service** leverage asynchronous order updates to send update notifications to users within the **Ordering Application** user interface.

    For example, you can notify the user that their order "status has moved from "Accepted" to "In Progress".

    ### Order Cancellation

    Requests to cancel an order can be made at any time, subject to acceptance or rejection depending on the cancellation rules of the companies.

     See: **[Orders Guide](#tag/ordersOverview)**

    ## Sales Report API
    
    **Open Delivery** also provides a way for the merchant **Software Service** to check informantion about sales and transfers done by the **Ordering Application**.

    See: **[Sales Report Guide](#tag/SalesReport)**

    # Open Delivery Repository

    The goal of the repository is to centrally host the information of **Open Delivery** participants and generate statistic data for the project.
    Through an opt in form in the project landing page, is expected that the **Software Services** and **Ordering Application** perform a registration that will be available in a database of participants.
    Once registered, the repository will run an indexing system wich will call an **[endpoint](#operation/getRepository)** based on the Base URL previously registered at the moment of the adhesion, listing the registered companies under that **Participant**.
    
    <div align="center">
      <img src="https://abrasel-nacional.github.io/docs/images/repo-image.png" />
    </div>

    ## How Access

    To be able to make the necessary information available, the Merchant Software Service must join the Open Delivery directory via the landing page [www.opendelivery.org.br](https://www.opendelivery.org.br).
      
    <div align="center">
      <img src="https://abrasel-nacional.github.io/docs/images/repo-chart.png" />
    </div>

    See: **[Repository Guide](#tag/repositoryOverview)**

    # Open Delivery API Evolution

    The **Open Delivery** API seeks to respect [SemVer](https://semver.org/). In this sense, compatible changes should not generate a new major version.

    The API version is composed of 4 elements: major, minor, patch and release candidate. The version v[x] in the URL path is the major element of the API version. The evolution of the version is as follows:

    - **Major**: incompatible, contract-breaking changes (v1.0.0 → v2.0.0)
    - **Minor**: compatible, non-breaking changes (v1.1.0 → v1.2.0)
    - **Patch**: bugfixes, clarifications to specifications, no functional changes (v1.1.1 → v1.1.2)
    - **Release candidate**: pre-release versions of any future patch, minor or major (v1.0.0-rc.1 → v1.0.0-rc.22)
    Non-breaking changes and clarifications to specifications may occur at any time. Customers should be prepared to handle these changes without breaking.

    The following changes are expected and considered backward compatible:

    - Addition of new features to the **Open Delivery** API;
    - Addition of new optional parameters;
    - Addition of new fields in **Open Delivery** API responses;
    - Change of order of fields;
    - Addition of new elements in enumerations.

    # General guidelines

    **DateTime and Time values**: For properties that require a DateTime or Time value, use the formats specified in DateTime and Time formats. For example, 2017-05-01T06:30:00+05:30 for DateTime and T08:08:00+05:30 for Time.

    **IDs**: Use an @id property to identify all unique entities within an entity type. An @id is a unique identifier of the entity of that type, but across entities, IDs can overlap.

    **Null** values: Do not use the value null in place of objects. If an object is optional, you must omit it from your feed.


    # Error Handling

    The API returns HTTP status codes to indicate success or failure of requests.

    `2xx` codes indicate success.  
    `4xx` codes indicate failure caused by the information sent by the client or the current state of the entities.  
    `5xx` codes codes indicate service problems on the API side.

    ## General

    This section gathers errors that could be returned by any endpoints listed in the API.

    ### `BadRequest`

      * __Meaning__: Invalid request.
      * __HTTP Status Code__: [400 Bad Request](https://tools.ietf.org/html/rfc7231#section-6.5.1).

    ### `Forbidden`

      * __Meaning__: Authenticated client request that violates some authorization rule.
      * __HTTP Status Code__: [403 Forbidden](https://tools.ietf.org/html/rfc7231#section-6.5.3).

    ### `NotFound`

      * __Meaning__: Entity not found.
      * __HTTP Status Code__: [404 Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4).

    ### `Gone`

      * __Meaning__: Indicates that the entity existed, but has been permanently removed.
      * __HTTP Status Code__: [410 Gone](https://tools.ietf.org/html/rfc7231#section-6.5.9).

    ### `InternalServerError`

      * __Meaning__: Unexpected condition when processing requisition.
      * __HTTP Status Code__: [500 Internal Server Error](https://tools.ietf.org/html/rfc7231#section-6.6.1).

    ### `ServiceUnavailable`

      * __Meaning__: Service is not currently available. Requested service may be under maintenance or outside the operating window.
      * __HTTP Status Code__: [503 Service Unavailable](https://tools.ietf.org/html/rfc7231#section-6.6.4).

    ### `GatewayTimeout`

      * __Meaning__: Indicates that the service took longer than expected to return.
      * __HTTP Status Code__: [504 Gateway Timeout](https://tools.ietf.org/html/rfc7231#section-6.6.5).

tags:
  - name: authentication
    x-displayName: "Authentication"
    description: |    
        **Open Delivery** suports **OAuth 2**.
        <!-- ReDoc-Inject: <security-definitions> -->

        ### Generating a Client Credentials Token

        To generate a client credentials token, the merchant **Software Service** must retrieve the **clientId** and **clientSecret** from a **Ordering Application** Company and see the [endpoint](#operation/getToken) below.

        ### Usage

        The **accessToken** field will contain the token used to authenticate against the **Open Delivery** APIs. Once you’ve obtained this token, you can provide it in the “Authorization” header of requests you make to endpoints that require client credentials scopes.

        The **expiresIn** field indicates the lifetime of the access token, provided in seconds. This should be cached and re-used across requests until (or shortly before) expiration, not re-generated per request.
        
        ```
        curl \
          -H 'authorization: Bearer <TOKEN>' \
          https://{baseURL}/v1/events:polling
        ```   
        
        Refresh Token is not available at this version.

  - name: merchantOverview
    x-displayName: Merchant Overview
    description: |-

      The Merchant entity will be the entity used by the **Ordering Application** to fetch all the data from a merchant and display it to the user.
      It is the responsibility of the merchant **Software Service** to provide the endpoint and the responsibility of the **Ordering Application** to fetch the information.

      ## Usage

      The merchant must 'choose' a **Software Service**, which will be responsible for exposing its data on the **[/merchant](#operation/getMerchant)** endpoint. This endpoint will be used by the ordering system to get the updated merchant infos (BasicInfos, Services and Menus).

      <div align="center">
        <img src="https://abrasel-nacional.github.io/docs/images/menu_flow.png" />
      </div>

      The **Ordering Application** can check for merchant updates in the following ways:
      1.	Make a new request on the **[/merchant](#operation/getMerchant)** endpoint whenever the TTL expires;

      2.	The **Ordering Application** can optionally provide a **[webhook](#operation/menuUpdated)** , where the merchant **Software Service** can send a merchant update notification;
      
      3.	If the **Software Service** **[refuses](#operation/cancelDenied)** an order for any reason, upon receiving the refusal, it is recommended that the **Ordering Application** make a new request on the **[/merchant](#operation/getMerchant)** endpoint.

      ### Merchant Update Notification

      **[Webhook](#operation/menuUpdated)** is sent to notify the **Ordering Application** that an new update has happened on the merchant information.

      The **Ordering Application** that implements this webhook, should return an HTTP 200 response code with an empty response body to acknowledge receipt of the webhook event. 
      If the merchant **Software Service** does not receive a 200 acknowledgement response, than the webhook event will be resent based on the **Software Service** policies.

      ## Health Check

      The **Ordering Application** must provide an **[endpoint](#operation/getMerchantStatus)** to let the merchant **Software Service** knows if its merchant information is being correctly read by the **Ordering Application**.

  - name: merchantStructure
    x-displayName: Merchant Structure
    description: |-

      The structure of the Merchant model consists of the following top-level properties:

      - **BasicInfo**: Information about the merchant.
      - **Services entities**: Timing, location, and conditions of the merchant service.
      - **Menu entities**: Details of the merchnat menus.

      The following diagram shows how Basic Info, Service, and Menu properties represent a single merchant:

      <div align="center">
        <img src="https://abrasel-nacional.github.io/docs/images/merchant_structure.png" />
      </div>

      The following schema lists the properties for the `Merchant` model:

      <SchemaDefinition schemaRef="#/components/schemas/MerchantDescription" />     

      # BasicInfo

      A merchant `BasicInfo` defines properties such as the merchant name, location address, website, description, telephone number, for a merchant that the merchant **Software Service** serves. 
      Typically, this data is static.

      The following schema lists the properties for the `BasicInfo` type: 

      <SchemaDefinition schemaRef="#/components/schemas/BasicInfo" />

      # Service

      The `Service` defines the capabilities of a delivery organization in a geographic region.
      A `Service` defines properties such as the service type (`DELIVERY` or `TAKEOUT`), hours available, and area served.  
      Each Service must be linked to a `Menu`, through the `menuId` property.   
      `Service` is expected to change.

      <div align="center">
        <img src="https://abrasel-nacional.github.io/docs/images/merchant_services.png" />
      </div>
   
      The following schema lists the properties for the `Service` type: 

      <SchemaDefinition schemaRef="#/components/schemas/Service" />

      # Menu

      A `Menu` is a set of linked properties such as categories, items, offers and availability.  
      In order to be displayed by the **Ordering Application**, a `Menu` needs to be linked to a `Service` through the `menuId` property.
      
      <div align="center">
        <img src="https://abrasel-nacional.github.io/docs/images/merchant_menus.png" />
      </div>
      
      Data in a `Menu` entity is expected to change.

      The following schema lists the properties for the `Menu` type: 

      <SchemaDefinition schemaRef="#/components/schemas/Menu" />

      ## Category

      A `Category` is the propertie in which the merchant has to organize its `ItemsOffers` in order 
      to make it easier for the user to find what he wants to buy. Categories have statuses and accepts `Availability` entities.
      
      The following schema lists the properties for the `Category` type: 

      <SchemaDefinition schemaRef="#/components/schemas/Category" />

      ## Item

      A `Item` propertie is the menu entity that carries all the general item information, like:
      name, description, external code, image, nutricional information, and EAN (European Article Number).
      The `Item` can be offered in a `Menu` as a main item or an option. And, for the same store, it can even be reused in different `Menus`.

      The following schema lists the properties for the `Item` type: 

      <SchemaDefinition schemaRef="#/components/schemas/Item" />

      ## ItemOffer

      The `ItemOffer` can be considered the offering of a item, and it is used to set the item price and `Availability`.
      The `ItemOffer` is a `Item` related to the `Category`.

      The following schema lists the properties for the `ItemOffer` type: 

      <SchemaDefinition schemaRef="#/components/schemas/ItemOffer" />

      ## OptionGroup and Option

      The `OptionGroup` is the entity used to group customizations of a product, for example: "Choose your beverage:"
      An `OptionGroup` can be shared by several items.
      The `OptionGroup` has its own statuses, and can be activated or desactivated when needed. 

      `Options` are the complements of a OptionGroup. It can be defined as: "A `Item` related to a `OptionGroup`". 
      It is possible to set the `Option` price to 0.00 regardless of whether it is mandatory or optional.

      The following schema lists the properties for the `OptionGroup` type: 

      <SchemaDefinition schemaRef="#/components/schemas/OptionGroup" />


      ## Availability

      The `Availability` entity defines specific times and days to control the availability of `Categories` and `Item offerings` within the `Menu`.
      It is also possible to set special times for holidays.

      The following schema lists the properties for the `Availability` type: 

      <SchemaDefinition schemaRef="#/components/schemas/Availability" />
 
  - name: merchantEndpoints
    x-displayName: Merchant API
    description: |-


  - name: ordersOverview
    x-displayName: Order Overview
    description: |-

      This overview summarizes the **Open Delivery** Ordering flow and how it interacts with merchant **Software Services** and **Ordering Applications**.

      ### Order Events

      <div align="center">
        <img src="https://abrasel-nacional.github.io/docs/images/order_life_cicle.png" />
      </div>

      ### Understanding the Order Flow

      <div align="center">
        <img src="https://abrasel-nacional.github.io/docs/images/order_integrations2.png" />
      </div>

      The order flow has the following Macro steps:

      ### Order Event Reception

      Through Order Events, the '**Ordering Application**' communicates to the 'Software Service' the existence of a new order, as well as the other events of the order lifecycle.

      **Open Delivery** provides two ways for merchant **Software Service** to be aware of new events:

      - **[Polling](#tag/ordersPolling)**: 
      Receiving events through polling provided by the '**Ordering Application**' is the standard way **Open Delivery** works, and its implementation is mandatory.

      - **[Webhook](#tag/ordersWebhook)**:
        Optionally it is recommended the implementation of a **webhook** by the merchant **Software Service** for the **Ordering Applications** to send new events directly, ensuring a much faster communication.
      
        > As this implementation is not mandatory, it is recommended that the merchant **Software Service** contacts the **Ordering Application** to find out if it is possible to work with this possibility.

      ### Order Details

      Once the new order event is received, it is necessary to get the **[order details](#tag/ordersDetails)**, such as items purchased, delivery addresses, and payment methods.

      ### Status Updates

      After getting the order details, the merchant needs to notify the '**Ordering Application**' of the order progress.

      Through the **Open Delivery** API it is possible to:

      - **[Confirm](#operation/confirmOrder)** receipt of order;
      - Notify that an order is **[ready for pickup](#operation/orderReady)**;
      - Notify that an order has been **[dispatched](#operation/dispatchOrder)**.

      Whenever a merchant triggers one of these actions, the '**Ordering Application**' will send a new event to the mechart **Software Service**, acknowledging the new order status within the '**Ordering Application**'.

      > For `TAKEOUT` orders, it is possible to optionally assign a **pickup area** that will be informed through an event to the merchant.
      > This must be provided by the **Ordering Application** interface.
      
      ### Order Cancellation

      **Open Delivery** provides API's to send **[cancellation](#tag/ordersCancellation)** requests from either system.
      These requests can be accepted or denied depending on the rules that the company has.

  - name: ordersPolling
    x-displayName: Polling (Required)
    description: |-

      Receiving events via Polling works as follows:

      <div align="center">
        <img src="https://abrasel-nacional.github.io/docs/images/polling.png" />
      </div>

      ### Query new order events

      In order to receive new order events, the merchant **Software Service** must make requests on the polling endpoint regularly at a certain time interval, determined by the '**Ordering Application**'. 
      Whenever there is a new event the response will send the response code 200 with the list of events. If there are no new events, the response will send the response code 204.

      > It is important that the **Software Service** performs the requests within the timeframe determined by the **Ordering Application**, as blocking and penalties may occur depending on the application's rules.
      
      **Availability of new events in polling:** 

      The **Ordering Application** may have specific rules about the maximum time new events are available in polling before they are removed.
          
      > Always check with the **Ordering Application** what the rules are for using the polling service. 

      **Duplicate Events and Order Date:**
      
      Eventually the API may return the same event more than once, for example the PLACED event including old orders. For this reason it is important that your application handles the uniqueness of requests and events through "id" and the date through "createdAt".

      Therefore, when receiving an event, you must check the event id and validate that this event (id) has not been processed before. If this event has already been received previously, it must be discarded.

      > **Please note**: merchant **Software Services** should only accept a new order or update the status of an order after validating that the event has not been processed before.

      ### Acknowledgment Events

      When receiving new events, the **Software Service** should always send acknowledgement so that the **Ordering Application** does not send that same event again;

      >**Important recommendations**:
      >
      > Merchants **Software Service** should make an acknowledgment request for each polling request with results.  
      > If it receives events that are not used by the itself, it needs to send the acknowledgment of these events anyway so that it is not receiving them every polling again.   
      > **Open Delivery** recommends that this be the default treatment for all events not yet mapped in the **Software Service** application.  
      > **Software Services** only needs to send acknowledgment of the event once.
        
  - name: ordersWebhook
    x-displayName: Webhook (Optional)
    description: |-
    
      Receiving events via Webhook works as follows:

      <div align="center">
        <img src="https://abrasel-nacional.github.io/docs/images/webhook.png" />
      </div>

      ### Order Event Notification
      Webhook is sent to notify the merchant **Software Service** that an new order event has happened on the **Ordering Application**.

      The merchant **Software Service** that implements this webhook, should return an HTTP `200` response code with an empty response body to acknowledge receipt of the webhook event. 
      If the **Ordering Application** does not receive a `200` acknowledgement response, than the webhook event will be resent based on the **Ordering Application** policies.

      ### Webhook Headers
      **Open Delivery** will include security headers for all requests made to the merchant **Software Service** webhook URL.

      **Header Description**

      | Header            | Description |
      | ----------------- | ----------- |
      | X-App-Id          | An Unique Identificator of the **Ordering Application** |
      | X-App-Signature   | SHA256 hash of the request body, using the client secret as the key |

        
      **Webhook Security** 

      Webhook messages are signed so that the merchant **Software Service** can verify that the sender is a valid **Ordering Application**. 
      Webhooks requests contain an X-App-Signature header. 
      The value of this field is a lowercased hexadecimal HMAC signature of the webhook HTTP request body, using the client secret as a key and SHA256 as the hash function.  
      
  - name: ordersDetails
    x-displayName: Order Details
    description: |-

      Before confirming or canceling an order, it is necessary to get the order details so that the merchant **Software Service** user can check if he will be able to prepare and deliver this order, such as checking if he has all the necessary items and if he is available to make the delivery to the informed address.

      Through the GET /orders/{id} endpoint the merchant **Software Service** can get all the details of an order.

      This endpoint returns the code 200 and the content of the request. If an invalid request id or the id of an expired order is entered (depending on the **Ordering Application** policy) the endpoint returns 404.

      In this section you will find all the details of the payload of an order:

      <SchemaDefinition schemaRef="#/components/schemas/Order" />

  - name: ordersStatus
    x-displayName: Status Update
    description: |-

      Following the order lifecycle, the merchant **Software Service** needs to notify the **Ordering Application** of the upcoming order status.
       
      After acknowledging receipt of a new order event (either via polling or webhook) is expected that the **Software Service** explicitly 
      **POST [/orders/{orderId}/confirm](#operation/confirmOrder)** or **POST [/orders/{orderId}/requestCancellation](#operation/requestCancellation)** within a time window set by the **Ordering Application**.
      Otherwise the order can time out and auto-cancel and the merchant can suffer a penalty based on the **Ordering Application** policy.   
      Order acceptances should be posted as quickly as possible to minimize consumer cancellations.

      When the order is ready, it is expected that a request will be sent to **[/orders/{orderId}/readyForPickup](#operation/orderReady)**

      When the order goes out for Delivery, it is expected that a request will be sent to **[/orders/{orderId}/dispatch](#operation/dispatchOrder)**.

      > When sending requests to these endpoints, is expected that the **Ordering Application** notifies the consumer of the progress of the order.

  - name: ordersCancellation
    x-displayName: Cancellation
    description: |-

        An order can be canceled for several reasons and the initiative to cancel an order can come from the merchant, the customer, or the ordering application.   
        It may also happen that the delivery person requests the cancellation in some scenarios, such as when the customer is not found at the delivery address.

        > **Cancellation Rules**
        >  
        > It is expected that both the **Ordering Application** and merchant **Software Service** have their own order cancellation policies and inform their users.

        A cancellation request will always be an asynchronous processing, where one party makes a cancellation request and the other accepts or refuses it."

        A cancellation request must always contain:

        - **reason**: Open text field indicating the reason for the cancellation.
        - **code**: An enumerator containing a cancellation reason.  
        - **mode**: Field indicating whether the cancellation occurred Automatically or Manually.

        The cancellation can be requested by:

        ### Software Service (Merchant):

        <div align="center">
          <img src="https://abrasel-nacional.github.io/docs/images/software_cancel_request.png" />
        </div>

        If the merchant wants to cancel an order, it must make a **POST [/orders/{orderId}/requestCancellation](#operation/requestCancellation)** request.

        > **Penalties**
        >
        > Avoid order cancellations! Excessive cancellations can result in some penalties (depending on the **Ordering Application's** policy) such as having the merchant temporarily closed on the platform.

        **Cancellation Validation**

        The Cancellation request does not guarantee that the order is cancelled. When sending a request [/orders/{orderId}/requestCancellation](#operation/requestCancellation), the **Ordering Application** will send the code 202 (accepted) in response.
        This does not yet mean that the request has been cancelled. It means that the request has been accepted and will be processed by the **Ordering Application** cancellation service. As a result of this request, the merchant **Software Service** may receive at the next polling (or via webhook) one of the following events:

        - CANCELLATION_REQUEST_DENIED
        - CANCELLED

        The order should only be Canceled when the CANCELLED event is generated.

        > Cancellation rules may vary depending on the timing of the order (before or after confirmation). In some situations it is possible that the **Ordering Application** cancellation service will consult with the consumer on whether or not the consumer accepts the cancellation of the order.
        
        ``` 
        Cancellation codes:
        
        - SYSTEMIC_ISSUES
        - DUPLICATE_APPLICATION
        - UNAVAILABLE_ITEM
        - RESTAURANT_WITHOUT_DELIVERY_MAN
        - OUTDATED_MENU
        - ORDER_OUTSIDE_THE_DELIVERY_AREA
        - BLOCKED_CUSTOMER
        - OUTSIDE_DELIVERY_HOURS
        - INTERNAL_DIFFICULTIES_OF THE RESTAURANT
        - RISK_AREA
        ``` 

        > **Important**: It is recommended that the **Ordering Application** makes a new request on the [/merchant](#operation/getMerchant) endpoint whenever a merchant makes a Cancellation request.

        ### Ordering Application

        <div align="center">
          <img src="https://abrasel-nacional.github.io/docs/images/orderingApp_cancel_request.png" />
        </div>

        Cancellation by **Ordering Application** can happen by:
        ```
        code: CONSUMER_CANCELLATION_REQUESTED
        ```  

        The consumer can request the cancellation of an order. 
        Depending on the cancellation rules applied, this option may not be enabled for all merchants. 
        It may also only be allowed at certain times, such as before the order is confirmed.
        ```
        code: OTHER_CANCELLATION_REASON
        ```

        Ordering Aplications may cancel the order for reasons other than via costumer.

        **Cancellation Handshake**
        
        When the request occurs the merchant **Software Service** will receive an ORDER_CANCELLATION_REQUESTED event in polling (or via webhook) and must manifest itself through the following endpoints:

        **[/orders/{orderId}/acceptCancellation](#operation/cancellationAccepted)**  
        **[/orders/{orderId}/denyCancellation](#operation/cancellationDenied)**

        This request will be processed by the **Ordering Application's** cancellation service (asynchronously) and the merchant **Software Service** will receive in the next polling (or webhook) the following event(s):

        CANCELLATION_DENIED or CANCELLED


  - name: salesReport
    x-displayName: Sales Report Endpoint
    description: |-

        **Ordering Application** must provide an endpoint where merchants can view information about sales for orders placed and information about the transfer of funds to the merchant.

#  - name: menuEntitiesModel
#    x-displayName: Menu Entities Model
#    description: |
#      <SchemaDefinition schemaRef="#/components/schemas/Merchant" />
#
#  - name: merchantModel
#    x-displayName: Merchant Model
#    description: |
#      <SchemaDefinition schemaRef="#/components/schemas/BasicInfo" />
#
#  - name: serviceModel
#    x-displayName: Service Model
#    description: |
#      <SchemaDefinition schemaRef="#/components/schemas/Service" />
#
#  - name: menuModel
#    x-displayName: Menu Model
#    description: |
#      <SchemaDefinition schemaRef="#/components/schemas/Menu" />
#
#  - name: itemModel
#    x-displayName: Items Model
#    description: |
#     
#
#  - name: categoryModel
#    x-displayName: Categories Model
#    description: |
#      <SchemaDefinition schemaRef="#/components/schemas/Category" />  
#
#  - name: itemOfferModel
#    x-displayName: Items Offers Model
#    description: |
#      <SchemaDefinition schemaRef="#/components/schemas/ItemOffer" />
#
#  - name: optionGroupModel
#    x-displayName: Option Groups Model
#    description: |
#      <SchemaDefinition schemaRef="#/components/schemas/OptionGroup" />
#
#  - name: availabilityModel
#    x-displayName: Availability Model
#    description: |
#      <SchemaDefinition schemaRef="#/components/schemas/Availability" />
#
#  - name: orderModel
#    x-displayName: Order Model
#    description: |
#      <SchemaDefinition schemaRef="#/components/schemas/Order" />       
#
#  - name: eventModel
#    x-displayName: Event Model
#    description: |
#      <SchemaDefinition schemaRef="#/components/schemas/Event" /> 

  - name: repositoryOverview
    x-displayName: Repository endpoint
    description: |-
      This endpoint is responsible for the respository.

x-tagGroups:
  - name: ""
    tags:
      - authentication
  - name: Merchant
    tags:
      - merchantOverview
      - merchantStructure
      - merchantEndpoints
  - name: Orders
    tags:
      - ordersOverview
      - ordersPolling
      - ordersWebhook
      - ordersDetails
      - ordersStatus
      - ordersCancellation
  - name: Sales Report
    tags:
      - salesReport
  - name: Repository
    tags:
      - repositoryOverview
#  - name: Models
#    tags:
#      - menuEntitiesModel
#      - merchantModel
#      - serviceModel
#      - menuModel
#      - itemModel
#      - categoryModel
#      - itemOfferModel
#      - optionGroupModel
#      - availabilityModel
#      - orderModel
#      - eventModel

paths:
  /oauth/token:
    get:
      operationId: "getToken"
      tags:
      - "authentication"
      summary: "Get Access Token"
      description: |-
          Requests new access token for accessing **Ordering Application** API resources.          
      requestBody:
          $ref: "#/components/requestBodies/Token"  
      responses:
        "200":
          description: "Successful token request."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "401":
          description: "Bad credentials"
        "500":
          description: "Unexpected error"

  /merchant:
    get:
      tags:
      - "merchantEndpoints"
      operationId: "getMerchant"
      summary: "Get information of a Merchant"
      security:
        - OAuth2: [od.all]  
      description: |-
          Endpoint to get all data of a specific merchant, such as basic info, menus, and services.
      responses:
        "200":
          description: "Successful merchant return."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Merchant"
              examples:
                menuExample:
                  $ref: "#/components/examples/merchantExample"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"  
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  

  /merchantStatus:
    get:
      parameters:
        - in: "query"
          name: "merchantId"
          required: true
          schema:
            $ref:  "#/components/schemas/Merchant/properties/@id"
      tags:
      - "merchantEndpoints"
      operationId: "getMerchantStatus"
      summary: "Health Check on a Merchant"
      security:
        - OAuth2: [od.all]  
      description: |-
          Get specific merchant info reading status provided by the **Ordering Application**.
      responses:
        "200":
          description: "Merchant Status"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/MerchantStatus"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"  
        "503":
          $ref: "#/components/responses/ServiceUnavailable"          
  
  "/events:polling":
    get:
      operationId: pollingEvents
      parameters:
      - name: "x-polling-merchants"
        in: "header"
        required: true
        schema:
          type: array
          description: Subset of merchants to fetch events from. Must either be omitted or non-empty.
          items:
            $ref: "#/components/schemas/Merchant/properties/@id"
      - name: "eventType"
        in: "query"
        required: true
        schema:
          type: array
          description: |-
            Desired event types. All other events not selected by group will be automatically acknowledged and omitted from the response. 
            Must either be omitted or non-empty.

            **Event Types definitions:**
            > `CREATED` : Order created.\
            > `CONFIRMED` : Order confirmed.\
            > `DISPATCHED` : Order went out for delivery.\
            > `READY_FOR_PICKUP`: Order ready for pickup.\
            > `PICKUP_AREA_ASSIGNED` : Designated area to pick up the order.\
            > `CONCLUDED` : Order completed.\
            > `CANCELLATION_REQUESTED` : Sent by the Software Service to the Ordering Application.\
            > `CANCELLATION_REQUEST_DENIED` : It must be sent from the Ordering Application to the Software Service.\
            > `CANCELLED` : When the order is actually cancelled.\
            > `ORDER_CANCELLATION_REQUEST`: It must be sent from the Ordering Application to the Software Service.
          items:
            $ref: "#/components/schemas/Event/properties/eventType"      
      tags:
      - "ordersPolling"
      summary: "Get New Events"
      security:
        - OAuth2: [od.all] 
      description: 
        "Polls events for any orders from merchants associated with the authenticated user.
        Each event received from this endpoint must be properly acknowledged, otherwise it will continue to be returned on further requests.
        In the body of the request, send an array containing only the event ids. Each request accepts a list of at most 2000 event ids."
      responses:
        "200":
          description: "List of events."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Event"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /events/acknowledgment:
    post:
      requestBody:
          $ref: "#/components/requestBodies/AckEvents"
      tags:
      - "ordersPolling"
      summary: "Acknowledge Events"
      security:
        - OAuth2: [od.all]  
      description: 
        Acknowledge a set of events, dismissing them from future polling calls.
      responses:
        "202":
          description: "Accepted. The request may be processed asynchronously"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /orders/{orderId}:
    get:
      parameters: 
        - name: "orderId"
          required: true
          in: "path"
          schema:
            type: "string"
            format: "UUID"
      tags:
      - "ordersDetails"
      summary: "Get Order Details"
      security:
        - OAuth2: [od.all]
      description: "Endpoint to consult the details of an order."
      responses:
        "200":
          description: "Order returning success."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Order"
              examples:
                orderExample:
                  $ref: "#/components/examples/orderExample"
        "400":
          description: "Invalid Order Supplied."
        "404":
          description: "Order Not Found."
        "500":
          description: "Internal Server Error."
        
  /orders/{orderId}/confirm:
    post:
      parameters: 
        - name: "@id"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "UUID"
      requestBody:
          $ref: "#/components/requestBodies/ConfirmedOrder"
      tags:
      - "ordersStatus"
      operationId: confirmOrder
      summary: "Confirm"
      security:
        - OAuth2: [od.all]  
      description: "Confirms receipt of order."
      responses:
        "200":
          description: "Order confirmed."
        "403":
          $ref: "#/components/responses/AccessDenied"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /orders/{orderId}/requestCancellation:
    post:
      parameters: 
        - name: "@id"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "UUID"
      requestBody:
          $ref: "#/components/requestBodies/CancelRequest"
      tags:
      - "ordersCancellation"
      operationId: "requestCancellation"
      summary: "Request order cancellation"
      security:
        - OAuth2: [od.all]  
      description: "Request order cancellation."
      responses:
        "200":
          description: "Order cancellation requested."
        "500":
          description: "Internal Server Error."

  /orders/{orderId}/acceptCancellation:
    post:
      parameters: 
        - name: "@id"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "UUID"
      tags:
      - "ordersCancellation"
      operationId: "cancellationAccepted"
      summary: "Accept order cancellation"
      security:
        - OAuth2: [od.all]  
      description: "Accept order cancellation"
      responses:
        "200":
          description: "Order cancellation confirmed."
        "500":
          description: "Internal Server Error."

  /orders/{orderId}/denyCancellation:
    post:
      parameters: 
        - name: "@id"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "UUID"
      requestBody:
          $ref: "#/components/requestBodies/CancelDenied"
      tags:
      - "ordersCancellation"
      operationId: "cancellationDenied"
      summary: "Deny order cancellation"
      security:
        - OAuth2: [od.all]  
      description: "Order Cancellation denied."
      responses:
        "200":
          description: "Denied cancellation order confirmed."
        "500":
          description: "Internal Server Error." 

  

  /orders/{orderId}/readyForPickup:
    post:
      parameters: 
        - name: "@id"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "UUID"
      tags:
      - "ordersStatus"
      summary: "Ready For Pickup"
      operationId: "orderReady"
      security:
        - OAuth2: [od.all]  
      description: "Informs you that the order is ready for pickup"
      responses:
        "200":
          description: "Accepted"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /orders/{orderId}/dispatch:
    post:
      parameters: 
        - name: "@id"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "UUID"
      tags:
      - "ordersStatus"
      operationId: "dispatchOrder"
      summary: "Dispatch"
      security:
        - OAuth2: [od.all]  
      responses:
        "200":
          description: "Accepted"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /salesReport:
    get:
      operationId: "salesReport"
      tags:
        - "salesReport"
      summary: "Sales Report endpoint"
      description: |-
        This endpoint is responsible for the sales report.
      parameters:
        - name: "@id"
          in: "query"
          required: true
          schema:
            type: "string"
            format: "UUID"
        - name: "startDate"
          required: true
          in: "query"
          schema:
            type: "string"
            format: "date-time"
        - name: "endDate"
          required: true
          in: "query"
          schema:
            type: "string"
            format: "date-time"    
      responses:
        "200":
          description: "Successfully returns the report."
          content:
            "application/json":
              schema:
                $ref:  "#/components/schemas/SalesByMerchant"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
  /repository:
    get:
        operationId: "getRepository"
        tags:
        - "repositoryOverview"
        summary: "List companies under a Open Delivery participant"
        description: |-
            > This endpoint MUST be provided by the merchant **Software Service**.

            Endpoint used by the repository indexing system to list companies under a **Software Service**.
        responses:
          "200":
            description: "Companies Info"
            content:
              "application/json":
                schema:
                  type: array
                  items:
                    $ref: "#/components/schemas/Repository"
          "403":
            $ref: "#/components/responses/AccessDenied"
          "404":
            $ref: "#/components/responses/NotFound"
          "503":
            $ref: "#/components/responses/ServiceUnavailable"

  /merchantList:
    get:
      tags:
        - "repositoryOverview"
      summary: "Returns the name and URL of the merchant."
      security:
        - OAuth2: [od.all]
      description: |-
        Endpoint responsible for returning merchants and their URLs, if registered.
      responses:
        "200":
          description: "Successfully returns the merchant list."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ListMerchant"
        "400":
          description: "Bad request."
        "404":
          description: "Merchant list not found."
        "500":
          description: "Internal Server Error."            

x-webhooks:
  menuUpdated:
    post:
      summary: New Merchant Update Notification
      description: 
          Information about a update in the systems.  
          This webhook notification has no request body.  

          > It is expected that once the notification is received, the **Ordering System** will make a new request to the **[/merchant](#operation/getMerchant)** endpoint to update the merchant information.

      operationId: menuUpdated
      tags: 
        - merchantEndpoints
      security:
        - OAuth2: [od.all]
      responses:
        "200":
          description: Return a 200 status to indicate that the data was received successfully
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"     

  newEvent:
    post:
      parameters:
      - in: "header"
        name: "X-App-Id"
        required: true
        schema:
          type: "string"
          format: "UUID"
          description: "An unique Identificator of the Ordering Application"
      - in: "header"
        name: "X-App-Signature"
        required: true
        schema:
          type: "string"
          format: "SHA256"
          description: "SHA256 hash of the request body, using the client secret as the key"
      summary: New Order Event Notification
      description: Information about a new event in the systems
      operationId: newEvent
      tags: 
        - ordersWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        "200":
          description: Return a 200 status to indicate that the data was received successfully                     
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"   

components:

  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: oauth/token
          scopes:
            od.all: "Access to all **Open Delivery** APIs"      
  
  requestBodies:
    Token:
      required: true
      content:
        "application/x-www-form-urlencoded":
          schema:
            $ref: "#/components/schemas/TokenRequest"

    AckEvents:
      required: true
      content:
        "application/json":
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/AckEvents"        

    ConfirmedOrder:
      description: "Order confirmation."
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/OrderConfirmed"
    CancelRequest:
      description: "Request to order cancelled."
      required: true
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/RequestCancelled"
    CancelDenied:
      description: "Request to cancel order denied."
      required: true
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/RequestDenied"  
  responses:
    RequisicaoInvalida:
      description: "Problemas na requisição."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: "The requested resource was not found."
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
    AccessDenied:
      description: "Authenticated participant request that violates some authorization rule."
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
    ServiceUnavailable:
      description: "Service is not currently available. Requested service may be under maintenance or outside the operating window."
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    TokenRequest:
      type: "object"
      title: "TokenRequest"
      required: ["clientId", "clientSecret", "grantType"]
      properties:
        clientId:
          type: "string"
          description:  "Client identifier provided by the **Ordering Application**."
        clientSecret:
          type: "integer"
          description:  "Client Secret provided by the **Ordering Application**."
        grantType:
          type: "string"
          description:  "The OAuth grant type. Currently, the only supported grant type is `client_credentials`." 
          enum:
            - "clientCredentials"

    TokenResponse:
      type: "object"
      title: "TokenResponse"
      required: [""]
      properties:
        accessToken:
          type: "string"
          format: "date-time"
          description:  "A JWT representing the access token."
        tokenType:
          type: "string"
          description:  "The token type. Currently, the only supported type is `bearer`"
          enum:
            - "bearer"
        expiresIn:
          type: "number"
          description:  "The token expiration time in seconds"   

    Merchant:
      type: "object"
      title: "MenuEntity"
      required: ["lastUpdate", "TTL", "@id", "@type", "status", "basicInfo", "services", "items", "menus", "categories", "itemOffers"]
      properties:
        lastUpdate:
          type: "string"
          format: "date-time"
          description:  "The last modified date and time in ISO timestamp format but with type String. \n\nThis should be used in conjuction of the TTL field to update the information on the ordering aplication."
          example: "2021-05-27T20:45:10.332Z"
        TTL:
          type: "integer"
          description:  "Time to Live (in seconds). 
          \nMin: 500
          Max: 86400. 
          \nA new request must be done when the TTL expires."
          example: 500
        "@id":
          type: "string"
          format: "UUID"
          description:  "Unique Identifier. Must be formatted with `Merchant Document + UUID`
          \n\n This @id must be generated by the company responsible for the merchant's menu and have to be informed in the Order object by the *ordering application*."
          example: "22815773000169-dbc7e35a-c936-4665-9e13-eb55eb8b6824"
        "@type":
          type: "string"
          enum:
          - MERCHANT
          example: "MERCHANT"
        status:
          type: "string"
          description:  "Indicates if the entity is Avaliable or Unavaliable. Only use this type when you must disable the entity due to an unexpected event and you don't know when the service will be re-established (e.g. do not use for holidays)."    
          enum:
            - AVAILABLE
            - UNAVAILABLE
          example: "AVAILABLE" 
        basicInfo:
          type: "object"
          description:  "A required entity to implement. Describes basic info of a merchant."
          allOf:
            - $ref: "#/components/schemas/BasicInfo"
        services:
          type: "array"
          description:  "A required entity to implement. Describes food ordering services details for a merchant."
          items:           
            $ref: "#/components/schemas/Service"
        menus:
          type: "array"
          description:  "A required entity to implement. Describes an array of menus."
          items:
            $ref: "#/components/schemas/Menu"
        categories:
          type: "array"
          description:  "A required entity to implement. Describes an array of sections in the menu where `ItemOffers` will be showed."
          items:
            type: "object"            
            $ref: "#/components/schemas/Category" 
        itemOffers:
          type: "array"
          description:  "A required entity to implement. Describes an array of offers for the `Items`."
          items:
            type: "object"            
            $ref: "#/components/schemas/ItemOffer"
        items:
          type: "array"
          description:  "A required entity to implement. Describes an array of items. To be used with an `ItemOffer` or an `Option`."
          items:
            $ref: "#/components/schemas/Item"
        optionGroups:
          type: "array"
          description:  "An optional entity to implement. Describes additional options of an `ItemOffer`."
          items:
            $ref: "#/components/schemas/OptionGroup"
        availability:
          type: "array"
          description:  "An optional entity to implement. Describes the time period during which a `Category` or an `ItemOffer` entity is served."
          items:
            type: "object"            
            allOf:
              - $ref: "#/components/schemas/Availability"

    MerchantDescription:
      type: "object"
      title: "MenuEntity"
      required: ["lastUpdate", "TTL", "@id", "@type", "status", "basicInfo", "services", "items", "menus", "categories", "itemOffers"]
      properties:
        lastUpdate:
          type: "string"
          format: "date-time"
          description:  "The last modified date and time in ISO timestamp format but with type String. \n\nThis should be used in conjuction of the TTL field to update the information on the ordering aplication."
        TTL:
          type: "integer"
          description:  "Time to Live (in seconds). 
          \nMin: 500
          Max: 86400. 
          \nA new request must be done when the TTL expires."
        "@id":
          type: "string"
          format: "UUID"
          description:  "Unique Identifier. Must be formatted with `Merchant Document + UUID`
          \n\n This @id must be generated by the company responsible for the merchant's menu and have to be informed in the Order object by the *ordering application*."
        "@type":
          type: "string"
          enum:
          - MERCHANT
        status:
          type: "string"
          description:  "Indicates if the entity is Avaliable or Unavaliable. Only use this type when you must disable the entity due to an unexpected event and you don't know when the service will be re-established (e.g. do not use for holidays)."    
          enum:
            - AVAILABLE
            - UNAVAILABLE 
        basicInfo:
          type: "object"
          description:
            "See: **[BasicInfo](#section/BasicInfo)** 
            \n\n A required entity to implement. Describes basic info of a merchant."
            
        services:
          type: "array"
          description:
            "See: **[Service](#section/Service)**  
            \n\n A required entity to implement. Describes food ordering services details for a merchant."
          items:           
            type: "object"
        menus:
          type: "array"
          description:
            "See: **[Menu](#section/Menu)**  
            \n\n A required entity to implement. Describes an array of menus."
          items:
            type: "object"
        items:
          type: "array"
          description:
            "See: **[Item](#section/Menu/Item)**  
            \n\n A required entity to implement. Describes an array of items. To be used with an `ItemOffer` or an `OptionGroups`."
          items:
            type: "object"
        categories:
          type: "array"
          description:
            "See: **[Category](#section/Menu/Category)**  
            \n\n A required entity to implement. Describes an array of sections in the menu where `ItemOffers` will be showed."
          items:
            type: "object"            
        itemOffers:
          type: "array"
          description:
            "See: **[ItemOffers](#section/Menu/ItemOffer)**
            \n\n A required entity to implement. Describes an array of offers for the `Items`."
          items:
            type: "object"            
        optionGroups:
          type: "array"
          description:
            "See: **[Options](#section/Menu/OptionGroup-and-Option)** 
            \n\n An optional entity to implement. Describes additional options of an `ItemOffer`."
          items:
            type: "object"
        availability:
          type: "array"
          description:
            "See: **[Availability](#section/Menu/Availability)**  
            \n\n An optional entity to implement. Describes the time period during which a `Category` or an `ItemOffer` entity is served."
          items:
            type: "object"            

    BasicInfo:
      type: "object"
      title: "Merchant"
      required: ["name", "document", "corporateName", "description", "averagePreparationTime", 
      "minOrderValue","merchantType", "merchantCategories", "address", "contactEmails", "contactPhones", "logoURL"]
      properties:   
        name:
          type: "string"
          description:  "Merchant Public Name"
          maxLength: 500
          example: "Pizza Plaza"
        document:
          type: "string"
          description:  "Merchant Document"
          pattern: "/^\\d{14}$/"
          example: "22815773000169"
        corporateName:
          type: "string"
          description:  "Merchant Corporate Name"
          maxLength: 500
          example: "Food Company"
        description:
          type: "string"
          description:  "Merchant Description"
          example: "Food company specializing in pizzas."          
        averageTicket:
          type: "number"
          description:  "Average Ticket. Can be used to show the price range of items available at the merchant. It is not mandatory, but recommended to be used."
          example: 90          
        averagePreparationTime:
          type: "number"
          description:  "Average amount of time preparing an order takes, in minutes."
          example: 20 
        minOrderValue:
          type: "object"
          description:  "Minimum order value that the merchant accepts." 
          allOf:
            - $ref: "#/components/schemas/Price"
        merchantType:
          type: "string"
          description:  "Merchant Type. 
          
           Currently, only `RESTAURANT` is accepted."
          enum:
            - "RESTAURANT"
          example: "RESTAURANT"
        merchantCategories:
          type: "array"
          description:  "Merchant Categories"
          items:
            type: "string"
            enum:
              - "BURGUERS"
              - "PIZZA"
              - "FAST_FOOD"
              - "HOT_DOG"
              - "JAPANESE"
              - "DESSERTS"
              - "AMERICAN"
              - "ICE_CREAM"
              - "BBQ"
              - "SANDWICH"
              - "MEXICAN"
              - "BRAZILIAN"
              - "PASTRY"
              - "ARABIAN"
              - "COMFORT_FOOD"
              - "VEGETARIAN"
              - "VEGAN"
              - "BAKERY"
              - "HEALTHY"
              - "ITALIAN"
              - "CHINESE"
              - "JUICE_SMOOTHIES"
              - "SEAFOOD"
              - "CAFE"
              - "SALADS"
              - "COFFEE_TEA"
              - "PASTA"
              - "BREAKFAST_BRUNCH"
              - "LATIN_AMERICAN"
              - "CONVENIENCE"
              - "PUB"
              - "HAWAIIAN"
              - "EUROPEAN"
              - "FAMILY_MEALS"
              - "FRENCH"
              - "INDIAN"
              - "PORTUGUESE"
              - "SPANISH"
              - "GOURMET"
              - "KIDS_FRIENDLY"
              - "SOUTH_AMERICAN"
              - "SPECIALTY_FOODS"
              - "ARGENTINIAN"
              - "PREMIUM"
              - "AFFORDABLE_MEALS"
          example: ["PIZZA", "FAMILY_MEALS", "PREMIUM"]
        address:
          type: "object"
          description:  "Merchant Address"
          allOf:
            - $ref: "#/components/schemas/Address" 
        contactEmails:
          type: "array"
          description: "Merchant Contact Emails"
          items:
            type: "string"
          example: ["food@company.com"]
        contactPhones:
          type: "object"
          description:  "Merchant Contact Phones"
          allOf:
            - $ref: "#/components/schemas/ContactPhones"
        logoURL:
          type: "string"
          format: "uri"
          description:  "URL pointing to an image of the merchant logo.\n\n Image requirements:
                          \n - Hosted on a secure connection (SSL).
                          \n - File size must be less than 10MB.
                          \n - Image must be in JPEG, PNG or GIF format.
                          \n - Both width and height must be between 320px and 1144px."
          example: "https://logo-image.food-company.com"
        bannerURL:
          type: "string"
          format: "uri"
          description:  "URL pointing to an image of the merchant banner.\n\n Image requirements:
                          \n - Hosted on a secure connection (SSL).
                          \n - File size must be less than 10MB.
                          \n - Image must be in JPEG, PNG or GIF format.
                          \n - Both width and height must be between 320px and 1144px."
          example: "https://banner-image.food-company.com"
        createdAt:
          type: "string"
          format: date-time
          description:  "Merchant creation date in ISO timestamp format but with type String."
          example: "2021-05-10T20:45:10.332Z"

    ListMerchant:
      type: "array"
      title: "MerchantList"     
      required: ["merchantId", "name"]
      items:
        type: "object"
        properties:
          "merchantId":
            type: "string"
            format: "UUID"
          "name":
            type: "string"
            description: "Restaurant Name"
          "merchantUrl":
            type: "string"
            description: "Optional merchant URL."
    Address:
      type: "object"
      title: "Address"
      required: ["country", "state", "city", "district", "street", "number", "postalCode", "complement", "latitude", "longitude"]
      properties:
        "country":
          type: "string"
          pattern: "^[A-Z]{2}$"
          description:  "Two-letter ISO 3166-1 alpha-2 country code."
          example: "Brazil"
        "state":
          type: "string"
          description:  "State"
          example: "SP"
        "city":
          type: "string"
          description:  "City"
          example: "São Paulo"
        "district":
          type: "string"
          description:  "District"
          example: "Moema"
        "street":
          type: "string"
          description:  "Street" 
          example: "Plaza Avenue"                     
        "number":
          type: "string"
          description:  "Number"
          example: "100" 
        "postalCode":
          type: "string"
          description:  "Postal Code"
          example: "20111-000" 
        "complement":
          type: "string"
          description:  "Complement"
          example: "2001" 
        "latitude":
          type: "number"
          description:  "Latitude in degrees. Values are restricted to the range [[-90, 90]].\n\n\n\nThe precision should be at least 5 decimal places."
          example: -23.548 
        "longitude":
          type: "number"
          description:  "Longitude in degrees. Values are restricted to the range [[-180, 180]].\n\n\n\nThe precision should be at least 5 decimal places."
          example: -46.6363

    ContactPhones:
      type: "object"
      title: "Contact Phones"
      required: ["@id","@type", "commercialNumber"]
      properties:
        "commercialNumber":
          type: "string"
          description:  "Telephone number of the merchant"
          example: "11999999999"
        "whatsappNumber":
          type: "string"
          description:  "Whatsapp number of the merchant"
          example: "11998888888"         
         
    Service:
      type: "object"
      title: "Service"
      required: ["@id","@type", "status", "serviceType", "menuId", "serviceHours"]
      properties:
        "@id":
          type: "string"
          format: "UUID"
          description:  "Unique Identifier"
          example: "22815773000169-f078e8e2-3044-4eec-b4a8-8359810de123"
        "@type":
          type: "string"
          enum:
          - "SERVICE"
          example: "SERVICE"
        status:
          type: "string"
          description:  "Indicates if the entity is Avaliable or Unavaliable. Only use this type when you must disable the entity due to an unexpected event and you don't know when the service will be re-established (e.g. do not use for holidays)."    
          enum:
            - AVAILABLE
            - UNAVAILABLE
          example: "AVAILABLE"  
        serviceType:
          type: "string"
          description:  "The type of service being offered."
          enum:
            - DELIVERY
            - TAKEOUT
          example: "DELIVERY"
        menuId:
          description:  "The @id value of the `Menu` entity correlated to this `Service` entity."
          type: string
          format: UUID
          example: "22815773000169-f627ccdc-6789-456f-a782-148538d5035b" 
        serviceArea:
          type: "object"
          description:  "A conditional entity to implement (required if the Service entity associated has serviceType set to `DELIVERY`). Describes the geographical region in which food can be delivered."
          allOf:
            - $ref: "#/components/schemas/ServiceArea"  
        serviceAreaFee:
          type: "object"
          description:  "A conditional entity to implement (required if the Service entity associated has serviceType set to `DELIVERY`). Describes a fee per Radius."
          allOf:
            - $ref: "#/components/schemas/ServiceAreaFee"       
        serviceHours:
          type: "object"
          description:  "A required entity to implement. Describes the time window which users can place orders."
          allOf:
            - $ref: "#/components/schemas/ServiceHours"  

    ServiceArea:
      type: "object"
      title: "Service Area"
      required: ["@id","@type", "geoMidpointLatitude", "geoMidpointLongitude"]
      properties:
        "@id":
          type: "string"
          format: "UUID"
          description:  "A unique identifier of the service area."
          example: "22815773000169-01339e6d-520b-429e-bc7c-dcfd2df42278"
        "@type":
          type: "string"
          enum:
          - "SERVICE_AREA"
          example: "SERVICE_AREA"
        polygon:
          type: "array"
          description: "If the `polygon` is chosen to be used, `geoRadius` is not required.\n\n\n\nA polygon or multipolygon expressed as a series of three or more space delimited points. It is recommended that the first and last points be the same, but it is not required.\n\n\n\nEach point in a polygon or multipolygon is defined by a latitude point followed by a longitude point. You also must specify the points in a counter-clockwise direction."
          items:
            type: "string"
            pattern: "^([+-]?([0-9]*[.])?[0-9]+[ ]+){2}([+-]?([0-9]*[.])?[0-9]+[ ]*)*$"
        geoRadius:    
          type: "integer"
          description:  "If the `geoRadius` is chosen to be used, `polygon` is not required. Indicates the approximate radius (in meters) of the CIRCLE area."
          example: 1000
        geoMidpointLatitude:    
          type: "number"
          description:  "Indicates the latitude coordinate at the center of the CIRCLE area."
          example: -20.2333
        geoMidpointLongitude:    
          type: "number"
          description:  "Indicates the longitude coordinate at the center of the CIRCLE area."
          example: -20.8383              

          
    ServiceAreaFee:
      type: "object"
      title: "Service Area Fee"
      required: ["@id","@type", "value", "geoMidpointLatitude", "geoMidpointLongitude"]
      properties:
        "@id":
          type: "string"
          format: "UUID"
          description:  "A unique identifier of the entity describing the fee"
          example: "22815773000169-e74643e5-53e3-41ef-a2c3-1e2db96eb1ee"
        "@type":
          type: "string"
          enum:
          - "SERVICE_AREA_FEE"
          example: "SERVICE_AREA_FEE"
        geoMidpointLatitude:    
          type: "number"
          description:  "Indicates the latitude coordinate at the center of the CIRCLE area."
          example: -20.2333
        geoMidpointLongitude:    
          type: "number"
          description:  "Indicates the longitude coordinate at the center of the CIRCLE area."
          example: -20.8383
        value:
          type: "array"
          description:  "Price of the fee per Radius."
          items:
            type: "object"
            allOf:
              - $ref: "#/components/schemas/ServiceAreaFeeValue"  

    ServiceAreaFeeValue:
      type: "object"
      title: "Service Area Fee Value"
      required: ["@id","@type", "price", "geoRadius"]
      properties:
        geoRadius:    
          type: "integer"
          description:  "Indicates the approximate radius (in meters) of the CIRCLE area."
          example: 2000    
        price:
          type: "object"
          description:  "Price of the fee"
          allOf:
            - $ref: "#/components/schemas/Price"
          example: { value: 5, currency: "R$"}

    Price:
      type: "object"
      title: "Price"
      required: ["@id","@type", "value", "currency"]
      properties:
        value:    
          type: "number"
          description:  "Price value. 4 decimals places are accepted"
          example: 40
        currency:
          type: "string"
          pattern: "^[A-Z]{3}$"
          description:  "The 3-letter ISO 4217 currency code."
          example: "R$"

    ItemPrice:
      type: "object"
      title: "Item Price"
      required: ["@id","@type", "value", "originalValue", "currency"]
      properties:
        value:    
          type: "number"
          description:  "The actual price value. 4 decimals places are accepted"
          example: 50
        originalValue:    
          type: "number"
          description:  "The orginal price value. 4 decimals places are accepted"
          example: 50  
        currency:
          type: "string"
          pattern: "^[A-Z]{3}$"
          description:  "The 3-letter ISO 4217 currency code."
          example: "R$"
     

    ServiceHours:
      type: "object"
      title: "Service Hours"
      required: ["@id","@type", "weekHours"]
      properties:
        "@id":
          type: "string"
          format: "UUID"
          description:  "A unique identifier of the service hours."
          example: "22815773000169-fb093d8c-2ca5-40fb-afcf-472fbdae81cc"
        "@type":
          type: "string"
          enum:
          - "SERVICE_HOURS"
          example: "SERVICE_HOURS"
        weekHours:
          type: array
          description:  "A list of the day(s) of the week and time periods for which the service is valid."
          items: 
            type: "object"
            allOf:
              - $ref: "#/components/schemas/Hours"
        holidayHours:
          type: array
          description: "Map of holiday dates, each with optional `timePeriods`. If a date does not have a time period specified, the restaurant will be closed for that date."
          items: 
            type: "object"  
            allOf:
              - $ref: "#/components/schemas/HolidayHours"    
    
    Hours:
      type: "object"
      title: "Hours"
      required: ["dayOfWeek", "timePeriods"]
      properties:
        dayOfWeek: 
          type: array
          description: "Day of the week for which these service hours are valid"
          items:
            type: "string"
            enum:
            - "MONDAY"
            - "TUESDAY"
            - "WEDNESDAY"
            - "THURSDAY"
            - "FRIDAY"
            - "SATURDAY"
            - "SUNDAY"
          example: ["MONDAY",
            "TUESDAY",
            "WEDNESDAY",
            "THURSDAY",
            "FRIDAY",
            "SATURDAY",
            "SUNDAY"]   
        timePeriods:
          type: "object"
          description:  "Time window from which users' orders can be placed."
          allOf:
            - $ref: "#/components/schemas/TimePeriods"
 

    TimePeriods:
      type: "object"
      title: "Time Periods"
      required: ["startTime", "endTime"]
      properties:
        startTime: 
          type: string
          format: time
          description: "Indicates the specific time of day in ISO format starting from which users' orders can be placed."
          example: "10:00:00.000Z"
        endTime:
          type: string
          format: time
          description: "Indicates the specific time of day in ISO format beyond which users' orders cannot be placed."
          example: "18:00:00.000Z"            


    HolidayHours:
      type: "object"
      title: "Holiday Hours"
      required: ["date", "timePeriods"]
      properties:
        date:
          type: string
          format: date
          description: "date"
          example: "7/4/2021"
        timePeriods:
          type: "object"
          description:  "hours"
          allOf:
            - $ref: "#/components/schemas/TimePeriods"     

    Item:
      type: "object"
      title: "Item"
      required: ["@id","@type", "name", "description", "externalCode", "imageUrl", "unit"]
      properties:
        "@id":
          type: "string"
          format: "UUID"
          description:  "A unique identifier of the item."
          example: "22815773000169-732bd31e-77fc-47ee-88ee-a0437f97b198"
        "@type":
          type: "string"
          enum:
          - "ITEM"
          example: "ITEM"
        name:
          type: "string"
          description:  "Item name"
          maxLength: 150
          example: "1/2 Pepperoni"
        description:
          type: "string"
          description:  "Item Description"
          example: "Pepperoni flavored pizza with LOTS of pepperoni."
        externalCode:
          type: "string"
          description:  "Item External Code. (Tipically the merchant **Software Service** item code)"
          example: "23"
        imageUrl:
          type: "string"
          format: "uri"
          description:  "URL pointing to an image of the item.\n\n Image requirements:
                          \n - Hosted on a secure connection (SSL).
                          \n - File size must be less than 10MB.
                          \n - Image must be in JPEG, PNG or GIF format.
                          \n - Both width and height must be between 320px and 1144px."
          example: "https://www.food-place.com/images/peperroni.png"
        nutritionalInfo:
          type: "object"
          description:  "Nutrition information for the dish."
          allOf:
            - $ref: "#/components/schemas/NutritionalInfo"
        serving:
          type: "integer"
          description:  "Field to show the number of people the portion serves."   
        unit:
          type: "string"
          description:  "Measure Unit of the Item" 
          example: "0" 
        ean:
          type: "string"
          description:  "EAN (European Article Number)"
                 

    NutritionalInfo:
      type: "object"
      title: "Contact Phones"
      required: ["description", "calories"]
      properties:
        description:
          type: "string"
          format: "UUID"
          description:  "Nutrition information in free text. For example \"Contains preservatives\"."
          example: "Contains preservatives"
        calories:
          type: "string"
          description:  "The number of calories in Cal, kcal, or kJ, using the following format: value Cal or min-max Cal"
          pattern: "^[0-9]+(\\.[0-9]+)? ?(- ?[0-9]+(\\.[0-9]+)?)? [a-zA-Z]+$"
          example: "2000 Cal"
        allergen:
          type: "array"
          description:  "Allergens of this Item"
          items:
              type: "string"
              enum: 
              - "ALMONDS"
              - "ALPHA_ISOMETHYL_IONONE"
              - "ALCOHOL"
              - "AMYL_CINNAMAL"
              - "ANISE_ALCOHOL"
              - "BARLEY"
              - "BENZYL_ALCOHOL"
              - "BENZYL_BENZOATE"
              - "BENZYL_CINNAMATE"
              - "BENZYL_SALICYLATE"
              - "BRAZIL_NUTS"
              - "BUTYLPHENYL_METHYLPROPIONATE"
              - "CARROTS"
              - "CASHEW_NUTS"
              - "CELERY"
              - "CEREALS_CONTAINING_GLUTEN"
              - "CINNAMAL"
              - "CINNAMYL_ALCOHOL"
              - "CITRAL"
              - "CITRONELLOL"
              - "COCOA"
              - "CORIANDER"
              - "CORN"
              - "COUMARIN"
              - "CRUSTACEANS"
              - "EGGS"
              - "EUGENOL"
              - "EVERNIA_FURFURACEA"
              - "EVERNIA_PRUNASTRI"
              - "FARNESOL"
              - "FISH"
              - "GERANIOL"
              - "GLUTEN"
              - "HAZELNUTS"
              - "HEXYL_CINNAMAL"
              - "HYDROXYCITRONELLAL"
              - "KAMUT"
              - "LACTOSE"
              - "LUPINE"
              - "MACADAMIA_NUTS"
              - "METHYL_2_OCTYNOATE"
              - "MILK"
              - "MOLLUSCS"
              - "MUSTARD"
              - "NO_DECLARED_ALLERGENS"
              - "OAT"
              - "PEANUTS"
              - "PEAS"
              - "PECAN_NUTS"
              - "PISTACHIOS"
              - "POD_FRUITS"
              - "QUEENSLAND_NUTS"
              - "RYE"
              - "SESAME_SEEDS"
              - "SOYBEANS"
              - "SPELT"
              - "SULPHUR_DIOXIDE"
              - "TREE_NUTS"
              - "TREE_NUT_TRACES"
              - "WALNUTS"
              - "WHEAT"
              example: ["GLUTEN"]
        additives:
          type: "array"
          description:  "Additives of this Item"
          items:
            type: "string"

        suitableDiet:
          type: "array"
          description:  "The dish complies with the described dietary restriction"
          items:
            type: "string"
            enum:
              - "DIABETIC"
              - "GLUTEN_FREE"
              - "HALAL"
              - "HINDU"
              - "KOSHER"
              - "LOW_CALORIE"
              - "LOW_FAT"
              - "LOW_LACTOSE"
              - "LOW_SALT"
              - "VEGAN"
              - "VEGETARIAN"
        isAlcoholic:
          type: "string"
          description:  "Indicates if an item is alcoholic"           
      
    Menu:
      type: "object"
      title: "Menu"
      required: ["@id","@type", "name", "description", "externalCode", "disclaimer", "categoryId"]
      properties:
        "@id":
          type: "string"
          format: "UUID"
          description:  "A unique identifier of the menu."
          example: "22815773000169-f627ccdc-6789-456f-a782-148538d5035b"
        "@type":
          type: "string"
          enum:
          - "MENU"
          example: "MENU"
        name:
          type: "string"
          description:  "Menu name"
          maxLength: 500
          example: "Pizzas"
        description:
          type: "string"
          description:  "Menu Description"
          example: "Pizza menu"
        externalCode:
          type: "string"
          description:  "Menu External Code. (Tipically the merchant **Software Service** menu code)"
          example: "123"          
        disclaimer:
          type: "string"
          description:  "Disclaimer"
          example: "Lorem Ipsum is simply dummy text of the printing and typesetting industry."    
        disclaimerURL:
          type: "string"
          format: "uri"
          description:  "Disclaimer URL"
        categoryId:
          type: "array"
          description:  "A list of the @id values of the child `Category` entities that correspond to this `Menu` entity. Default assumes all `Category` entities are available in this menu."
          items:
            type: "string"
            format: "UUID"
          example: ["22815773000169-92fad022-2c28-4239-a026-989f5b555cb7", "22815773000169-6bb71850-1d40-49f9-8046-b13e068c0cca"]


    Category:
      type: "object"
      title: "Category"
      required: ["@id","@type", "index", "name", "description", "imageUrl", "externalCode", "status", "availabilityId"]
      properties:
        "@id":
          type: "string"
          format: "UUID"
          description:  "A unique identifier of the category."
          example: "22815773000169-92fad022-2c28-4239-a026-989f5b555cb7"
        "@type":
          type: "string"
          enum:
          - "CATEGORY"
          example: "CATEGORY"
        index:
          type: "string"
          description:  "Category display index."
          example: 0
        name:
          type: "string"
          description:  "Category name."
          maxLength: 150
          example: "Salted Pizza"
        description:
          type: "string"
          description:  "Category description."
          example: "Salted pizza flavors."
        imageUrl:
          type: "string"
          format: "uri"
          description:  "URL pointing to an image of the category.\n\n Image requirements:
                          \n - Hosted on a secure connection (SSL).
                          \n - File size must be less than 10MB.
                          \n - Image must be in JPEG, PNG or GIF format.
                          \n - Both width and height must be between 320px and 1144px."
          example: "https://www.food-company.com/images/salted_pizza.png"
        externalCode:
          type: "string"
          description:  "Category External Code. (Tipically the merchant **Software Service** category code)"
          example: "13"  
        status:
          type: "string"
          description:  "Indicates if the entity is Avaliable or Unavaliable. Only use this type when you must disable the entity due to an unexpected event and you don't know when the service will be re-established (e.g. do not use for holidays)."    
          enum:
            - AVAILABLE
            - UNAVAILABLE
          example: "AVAILABLE"
        availabilityId:
          type: "array"
          description:  "The @id values of `Availability` entities which provide details on when the category is available. Default assumes a `Category` is available at all times."
          items:
            type: string
            format: "UUID"
          example: ["22815773000169-11d063c4-73a7-4f87-a0eb-71636cc02029"] 
        itemOfferId:
          type: array
          description:  "A list of the @id values of the child `ItemOffer` entities that correspond to this `Category` entity. Default assumes all `ItemOffer` entities are available in this category."
          items:
            anyOf:
            - $ref: "#/components/schemas/ItemOffer/properties/@id"
          example: ["22815773000169-f080cfb3-5c4a-4eb7-907d-2de3bbb5dfb9"]            
                  
    ItemOffer:
      type: "object"
      title: "ItemOffer"
      required: ["@id","@type", "itemId", "index", "price", "availabilityIds"]
      properties:
        "@id":
          type: "string"
          format: "UUID"
          description:  "A unique identifier of the item offer."
          example: "22815773000169-f080cfb3-5c4a-4eb7-907d-2de3bbb5dfb9"
        "@type":
          type: "string"
          enum:
          - "ITEM_OFFER"
          example: "ITEM_OFFER"
        itemId:
          type: "string"
          description:  "The @id value of the `Item` entity correlated to this `ItemOffer` entity."
          example: "22815773000169-732bd31e-77fc-47ee-88ee-a0437f97b198"
        index:
          type: integer
          description:  "ItemOffer display index."
          example: 0  
        price:
          type: "object"
          description:  "Price of the menu item offer. Original and actual values can be informed, for showing discounts."
          allOf:
            - $ref: "#/components/schemas/ItemPrice"
          example: {value: 43, originalValue: 43, currency: "R$"}
        availabilityIds:
          type: "array"
          description:  "The @id values of `Availability` entities which provide details on when the menu item offer is available. Default assumes an `ItemOffer` is available at all times."
          items:
            type: string
            format: "UUID"
          example: [ "22815773000169-11d063c4-73a7-4f87-a0eb-71636cc02029"]   
        optionGroupsIds:
          type: "array"
          description:  "A list of the @id values of the child `OptionGroup` entities that correspond to this `ItemOffer` entity."
          items:
            allOf:
            - $ref: "#/components/schemas/OptionGroup/properties/@id"
          example: ["22815773000169-fe67e551-f42f-499a-8afb-0ed893c71fa3"]                      
       
    OptionGroup:
      type: "object"
      title: "Option Group"
      required: ["@id","@type", "index", "name", "description", "externalCode", "status", "minPermitted", "maxPermitted"]
      properties:
        "@id":
          type: "string"
          format: "UUID"
          description:  "A unique identifier of the option group."
          example: "22815773000169-fe67e551-f42f-499a-8afb-0ed893c71fa3"
        "@type":
          type: "string"
          enum:
          - "OPTION_GROUP"
          example: "OPTION_GROUP"
        index:
          type: integer
          description:  "Option Group display index."
          example: 0              
        name:
          type: "string"
          description:  "Option Group Name"
          maxLength: 150
          example: "Choose your salted pizza flavor"
        description:
          type: "string"
          description:  "Option Group Description"
          example: "Choose your salted pizza flavor."
        externalCode:
          type: "string"
          description:  "Option External Code. (Tipically the merchant **Software Service** option group code)"
          example: "12"
        status:
          type: "string"
          description:  "Indicates if the entity is Avaliable or Unavaliable. Only use this type when you must disable the entity due to an unexpected event and you don't know when the service will be re-established (e.g. do not use for holidays)."    
          enum:
            - AVAILABLE
            - UNAVAILABLE
          example: "AVAILABLE"
        minPermitted:
          type: integer
          description:  "The minimum number of options which should be selected in the option group."
          example: 2
        maxPermitted:
          type: integer
          description:  "The maximum number of options which should be selected in the option group."
          example: 2
        options:
          type: array
          description: "A list of `Option` entities that correspond to this option group"
          items: 
            type: "object"
            description:  "options"
            allOf:
              - $ref: "#/components/schemas/Option"      

    Option:
      type: "object"
      title: "Option"
      required: ["@id","@type"]
      properties:
        "@id":
          type: "string"
          format: "UUID"
          description:  "A unique identifier of the option."
          example: "22815773000169-e5232f14-430c-4a94-8ff6-289d5a16a87a"
        "@type":
          type: "string"
          enum:
          - "OPTION"
          example: "OPTION"
        itemId:
          type: "string"
          description:  "The @id value of the `Item` entity correlated to this `Option` entity."
          example: "22815773000169-502ecf11-0509-48ed-b63c-6211c48fd9b9"
        index:
          type: integer
          description:  "Option display index"
          example: 0  
        price:
          type: "object"
          description:  "Price of the option. Original and actual values can be informed, for showing discounts."
          allOf:
            - $ref: "#/components/schemas/ItemPrice"
        maxPermitted:
          type: integer
          description:  "The maximum quantity of this option which can be selected in the option group."
          example: 1      
          
    Availability:
      type: "object"
      title: "Availability"
      required: ["@id","@type", "startDate", "endDate", "hours"]
      properties:
        "@id":
          type: "string"
          format: "UUID"
          description:  "A unique identifier of the availability."
          example: "22815773000169-11d063c4-73a7-4f87-a0eb-71636cc02029"
        "@type":
          type: "string"
          enum:
          - "AVAILABILITY"
          example: "AVAILABILITY"       
        startDate:
          type: "string"
          description:  "Availability start date. If not informed, the availabilty is already avaliable."
          example: "05/01/2021"
        endDate:
          type: "string"
          description:  "Availability end date. If not informed, the availabilty is always avaliable."
          example: "05/30/2021"
        hours:
            type: "array"
            description:  "Hours"
            items:
              allOf:
                - $ref: "#/components/schemas/Hours"   

    AckEvents:
      type: "object"
      title: "Ack Events"
      required: ["@id", "orderId", "eventType"]
      properties:
        "@id":
          type: "string"
          format: "UUID"
          description:  "A unique identifier of the event."
        orderId:
            $ref: "#/components/schemas/Order/properties/@id"  
        eventType:
            $ref: "#/components/schemas/Event/properties/eventType"              

    Order:
      type: "object"
      title: "Order"
      required: ["@id","@type", "displayId", "createdAt", "orderTiming", 
      "preparationStartDateTime", "merchant", "items", "total", "payments", "customer"]
      properties:
        "@id":
          type: "string"
          format: "UUID"
          description:  "A unique identifier of the order."
        "@type":
            type: "string"
            enum:
              - "DELIVERY"
              - "TAKEOUT"
        displayId:
          type: "string"
          description: "Order Id shown in the **Ordering Application** for the costumer."
        createdAt:
          type: "string"
          format: date-time
          description: "Order creation date in ISO timestamp format."
        orderTiming:
            type: "string"
            description: "Order Timing. Currently, only `INSTANT` is accepted."
            enum:
              - "INSTANT"
        preparationStartDateTime:
            type: "string"
            description: "Order preparation start time."
        merchant:
            type: "object"
            required: ["@id", "name"]
            description: "Merchant information."
            properties:
              "@id":
                allOf:
                  - $ref: "#/components/schemas/Merchant/properties/@id"
                example: "22815773000169-32f6467d-d7a6-4725-9a8c-69a3d5d6aa20"
              name:
                allOf:
                  - $ref: "#/components/schemas/BasicInfo/properties/name"
        items:
          type: "array"
          description: "Order items."
          items:
            type: "object"
            required: ["@id", "name", "unit", "quantity", "unitPrice", "totalPrice", "externalCode"]
            properties:
              "@id":
                type: "string"
                format: "UUID"
                description: "A unique identifier of the order."
              index:
                type: "number"
                description: "Item's position."
              name:
                type: "string"
                description: "Product name"
              externalCode:
                type: "string"
                description: "External product code."
              unit:
                type: "string"
                description: "Measure unit of the item."
                enum:
                  - "UNIT"
              ean:
                type: "string"
                description: "EAN is the barcode standard used on items."
              quantity:
                type: "number"
                description: "Amount of items."
              specialInstructions:
                type: "string"
                description: "Special instructions about the items."
              unitPrice:
                type: "object"
                allOf:
                  - $ref: "#/components/schemas/Price"
                description: "Price per unit."
              optionsPrice:
                type: "object"
                allOf:
                  - $ref: "#/components/schemas/Price"
                description: "Pricing options."
              totalPrice:
                type: "object"
                allOf:
                  - $ref: "#/components/schemas/Price"
              options:
                type: "array"
                description: "Options related to the item."
                items:
                  type: "object"
                  required: ["@id", "name", "externalCode", "unit", "quantity", "unitPrice", "price"]
                  properties:
                    index:
                      type: "number"
                      description: "Option's position."
                    "@id":
                      type: "string"
                      format: "UUID"
                    name:
                      type: "string"
                      description: "Options name"
                    externalCode:
                      type: "string"
                      description: "External product code."
                    unit:
                      type: "string"
                      description: "Measure unit of the item."
                    ean:
                      type: "string"
                      description: "EAN is the barcode standard used on items."
                    quantity:
                      type: "number"
                    unitPrice:
                      type: "object"
                      allOf:
                        - $ref: "#/components/schemas/Price"
                      description: "Price per unit."
                    price:
                      type: "object"
                      allOf:
                        - $ref: "#/components/schemas/Price"
                    specialInstructions:
                      type: "string"
                      description: "More instructions, if needed."
        otherFees:
          type: "array"
          description: "Other fees that may apply."
          items:
            type: "object"
            required: ["name", "type", "receivedBy", "receiverDocument", "price"]
            properties:
              name:
                type: "string"
                description: "Name related to the other fees."
              type:
                type: "string"
                enum:
                  - "DELIVERY_FEE"
                  - "SERVICE_FEE"
                  - "TIP"
              receivedBy:
                type: "string"
                enum:
                  - "MARKETPLACE"
                  - "MERCHANT"
              receiverDocument:
                type: "string"
                description: "Mandatory for marketplace."
              price:
                type: "object"
                allOf:
                  - $ref: "#/components/schemas/Price"
              observation:
                type: "string"
                description: "Any extra comments."
        discounts:
          type: "array"
          description: "Any discounts that may apply."
          items:
            type: "object"
            required: ["value", "target", "sponsorshipValues"]
            properties:
              value:
                type: "number"
              target:
                type: "string"
                enum:
                  - "CART"
                  - "DELIVERY_FEE"
                  - "ITEM"
              targetId:
                type: "string"
                description: "Only mandatory if target field is equal `ITEM`."
              sponsorshipValues:
                description: "Values sponsored by either party."
                type: "array"
                items:
                  type: "object"
                  required: ["name", "value"]
                  properties:
                    name:
                      type: "string"
                      enum:
                        - "MARKETPLACE"
                        - "MERCHANT"
                    value:
                      type: "number"
                      format: "decimal"
        total:
          type: "object"
          required: ["items", "otherFees", "orderAmount", "discount"]
          description: "Set of attributes to total the order."
          properties:
            items:
              type: "number"
              description: "Total items purchased in the order."
            otherFees:
              type: "number"
              description: "Other fees that may apply to the order."
            discount:
              type: "number"
              description: "Any discounts that may apply. If there isn't one, you can put 0, for example."
            orderAmount:
              type: "number"
              description: "Order total."
        payments:
          type: "object"
          required: ["prepaid", "pending", "methods"]
          description: "All the description of the payment, such as methods, pre-payments, change, etc."
          properties:
            prepaid:
              type: "number"
              description: "Amount paid in advance."
            pending:
              type: "number"
              description: "Amount that is still to be paid."
            methods:
              type: "array"
              description: "The payment method used. Whether it was online, on delivery, credit card, voucher, cash, etc."
              items:
                type: "object"
                required: ["value", "currency", "type", "method"]
                properties:
                  value:
                    type: "number"
                  currency:
                    allOf:
                      - $ref: "#/components/schemas/Price/properties/currency"
                  type:
                    type: "string"
                    description: "Online if the payment was made through some platform, or offline if it was paid on delivery or in cash, for example."
                    enum:
                      - "ONLINE"
                      - "OFFLINE"
                  method:
                    type: "string"
                    enum:
                      - "CREDIT"
                      - "DEBIT"
                      - "MEAL_VOUCHER"
                      - "FOOD_VOUCHER"
                      - "DIGITAL_WALLET"
                      - "PIX"
                      - "CASH"
                      - "CREDIT_DEBIT"
                      - "COUPON"
                      - "REDEEM"
                      - "PREPAID_REDEEM"
                      - "OTHER"
                  methodInfo:
                    type: "string"
                    description: "Additional information regarding the payment method. 
                    Additional information regarding the payment method. Recommended if `method` is `OTHER`."
                  changeFor:
                    type: "number"
                    format: "decimal"
                    description: "Only mandatory for `CASH` method."
        customer:
          type: "object"
          required: ["@id", "phone", "documentNumber", "name", "ordersCountOnMerchant"]
          description: "Customer related information."
          properties:
            "@id":
              type: "string"
              format: "UUID"
              description: "A unique identifier related to the consumer."
            phone:
              type: "object"
              required: ["number"]
              properties:
                number:
                  type: "string"
                extension:
                  type: "string"
            documentNumber:
              description: "Consumer document."
              type: "string"
            name:
              type: "string"
              description: "Consumer's name."
            ordersCountOnMerchant:
              description: "Number of orders that are with the merchant."
              type: "number"
        delivery:
          type: "object"
          description: "If the chosen `@type` is `delivery`, `takeout` is not required."
          required: ["deliveredBy", "deliveryAddress", "estimatedDeliveryDateTime"]
          properties:
            deliveredBy:
              type: "string"
              enum:
                - "MERCHANT"
                - "MARKETPLACE"
            deliveryAddress:
              type: "object"
              required: ["country", "streetName", "formattedAddress", "streetNumber", "city", 
              "postalCode", "coordinates", "neighborhood", "state"]
              properties:
                country:
                  type: "string"
                streetName:
                  type: "string"
                formattedAddress:
                  type: "string"
                streetNumber:
                  type: "string"
                city:
                  type: "string"
                postalCode:
                  type: "string"
                coordinates:
                  type: "object"
                  required: ["latitude", "longitude"]
                  properties:
                    latitude:
                      type: "number"
                    longitude:
                      type: number
                neighborhood:
                  type: "string"
                state:
                  type: "string"
                complement:
                  type: "string"
            estimatedDeliveryDateTime:
              type: "string"
              format: date-time
              description: "Estimated delivery date in ISO timestamp format."
            deliveryDateTime:
              type: "string"
              format: date-time
              description: "Delivery date in ISO timestamp format." 
        takeout:
          type: "object"
          description: "If the chosen `@type` is `takeout`, `delivery` is not required."
          required: ["mode", "takeoutDateTime"]
          properties:
            mode:
              type: "string"
              enum:
                - "DEFAULT"
                - "PICKUP_AREA"
            takeoutDateTime:
              type: "string"
              format: date-time
              description: "Takeout date in ISO timestamp format."
        extraInfo:
          type: "string"
          description: "Extra information, if necessary."
    OrderConfirmed:
      type: "object"
      title: "Order Confirmed"
      required: ["createdAt", "orderExternalCode"]
      properties:
        reason:
          type: "string"
          description: "Free field for more information about the order confirmation, such as which employee accepted the order, for example."
        createdAt: 
          type: "string"
          format: date-time
          description: "Order creation date in ISO timestamp format."
        orderExternalCode:
          type: "string"
          description: "External order code, which can be used by merchant or marketplace."
    RequestCancelled:
      type: "object"
      title: "Request Cancelled"
      required: ["reason", "code", "mode"]
      properties:
        reason:
          type: "string"
          description: "Open text field indicating the reason for the cancellation."
        code:
          type: "string"
          enum:
            - SYSTEMIC_ISSUES
            - DUPLICATE_APPLICATION
            - UNAVAILABLE_ITEM
            - RESTAURANT_WITHOUT_DELIVERY_MAN
            - OUTDATED_MENU
            - ORDER_OUTSIDE_THE_DELIVERY_AREA
            - BLOCKED_CUSTOMER
            - OUTSIDE_DELIVERY_HOURS
            - INTERNAL_DIFFICULTIES_OF THE RESTAURANT
            - RISK_AREA
        mode:
          type: "string"
          enum:
            - "AUTO"
            - "MANUAL"
        out_of_stock_items:
          type: "array"
          description: "Items that are not in the merchant's inventory."
          items:
            type: string
        invalid_items:
          type: "array"
          description: "Items that do not exist in the merchant's inventory."
          items:
            type: string
    RequestDenied:
      type: "object"
      title: "Request Cancelled"
      required: ["reason", "code"]
      properties:
        reason:
          type: "string"
          description: "Open text field indicating the reason for the cancellation."
        code:
          type: "string"
          enum:
            - "DISH_ALREADY_DONE"
            - "OUT_FOR_DELIVERY"
    SalesByMerchant:
          type: "array"
          description: "Sales made by merchant."
          items:
            type: "object"
            required: ["@id", "orderDate", "lastProcessingDate", 
            "orderStatus", "companyName", "documentNumber", "payment", "businessModelOrder"]
            properties:
              "@orderId":
                type: "string"
                format: "UUID"
              orderDate:
                type: "string"
                format: "date-time"
                description: "Date the order was placed."
              lastProcessingDate:
                type: "string"
                format: "date-time"
                description: "Last date that the request was processed."
              orderStatus:
                type: "string"
                description: "The event type. **[Click here](#operation/pollingEvents)** for definitions of each type."
                enum:
                  - "CREATED"
                  - "CONFIRMED"
                  - "DISPATCHED"
                  - "READY_FOR_PICKUP"
                  - "PICKUP_AREA_ASSIGNED"
                  - "CONCLUDED"
                  - "CANCELLATION_REQUESTED"
                  - "CANCELLATION_REQUEST_DENIED"
                  - "CANCELLED"
                  - "ORDER_CANCELLATION_REQUEST"
              companyName:
                type: "string"
              documentNumber:
                type: "string"
                description: "Company registration document."
              businessModelOrder:
                type: "string"
                enum:
                  - "MARKETPLACE"
              payment:
                type: "object"
                required: ["type", "method", "liability", "billing", "transfer"]
                description: "All payment information related to the orders."
                properties:
                  type:
                    type: "string"
                    description: "How the payment was made. Payment online, via apps, or in cash (offline)."
                    enum:
                      - "ONLINE"
                      - "OFFLINE"
                  method:
                    type: "string"
                    description: "Method used to pay the order."
                    enum:
                      - "CREDIT"
                      - "DEBIT"
                      - "MEAL_VOUCHER"
                      - "FOOD_VOUCHER"
                      - "DIGITAL_WALLET"
                      - "PIX"
                      - "CASH"
                      - "CREDIT_DEBIT"
                      - "COUPON"
                      - "REDEEM"
                      - "PREPAID_REDEEM"
                      - "OTHER"
                  brand:
                    type: "string"
                    description: "Brand name of the credit card or other means of payment that has a brand."
                  liability:
                    type: "string"
                    enum:
                      - "MERCHANT"
                  cardNumber:
                    type: "string"
                  billing:
                    type: "object"
                    description: "Information related to order collections."
                    required: ["gmv", "totalBag", "deliveryFee", "benefitMarkeplace", 
                    "benefitMerchant", "commission", "acquirerFee", "deliveryCommission", "commissionRate", "acquirerFeeRate",
                    "anticipationFee", "anticipationFeeRate", "totalDebit", "totalCredit"]
                    properties:
                      gmv:
                        type: "number"
                        description: "Gross Merchandise Value"
                      totalBag:
                        type: "number"
                        description: "Total order in cart."
                      deliveryFee:
                        type: "number"
                        description: "Delivery fee."
                      benefitMarkeplace:
                        type: "number"
                        description: "Marketplace-related benefits."
                      benefitMerchant:
                        type: "number"
                        description: "Merchant-related benefits."
                      commission:
                        type: "number"
                        description: "Sales-related commission."
                      acquirerFee:
                        type: "number"
                        description: "Acquirer-related fee."
                      deliveryCommission:
                        type: "number"
                        description: "Commission related to the delivery of the order."
                      commissionRate:
                        type: "number"
                        format: "double"
                        description: "Commission Fee."
                      acquirerFeeRate:
                        type: "number"
                        format: "double"
                        description: "Acquirer-related fee rate."
                      anticipationFee:
                        type: "number"
                        description: "Possible fee received in advance."
                      anticipationFeeRate:
                        type: "number"
                        format: "double"
                        description: "Anticipation fee rate."
                      totalDebit:
                        type: "number"
                        description: "Total debit of the order."
                      totalCredit:
                        type: "number"
                        description: "Total credit of the order."
                  transfer:
                    type: "object"
                    required: ["expectedTransferDate", "expectedBankAccount"]
                    description: "Related to transferring the order values."
                    properties:
                      expectedTransferDate:
                        type: "string"
                        format: "date-time"
                      expectedBankAccount:
                        type: "object"
                        required: ["bankNumber", "bankName", "branchCode", "accountNumber", "accountNumberDigit"]
                        properties:
                          bankNumber:
                            type: "string"
                            description: "Bank registration number."
                          bankName:
                            type: "string"
                            description: "Bank name."
                          branchCode:
                            type: "string"
                            description: "Branch number."
                          branchCodeDigit:
                            type: "string"
                            description: "Branch code, if required."
                          accountNumber:
                            type: "string"
                            description: "Account number."
                          accountNumberDigit:
                            type: "string"
                            description: "Digit of the account number."

    Event:
      type: "object"
      title: "Event"
      required: ["eventId", "eventType", "orderId", "orderUrl", "createdAt"]
      discriminator:
        propertyName: eventType
        mapping:
          CREATED: '#/components/schemas/EventMetadata'
          CONFIRMED: '#/components/schemas/EventMetadataConfirm'
          READY_FOR_PICKUP: '#/components/schemas/EventMetadata'
          DISPATCHED: '#/components/schemas/EventMetadata'
          PICKUP_AREA_ASSIGNED: '#/components/schemas/EventMetadata'
          CONCLUDED: '#/components/schemas/EventMetadata'
          ORDER_CANCELLATION_REQUESTED: '#/components/schemas/EventMetadataCancel'
          CANCELLATION_REQUESTED: '#/components/schemas/EventMetadataCancel'
          CANCELLATION_REQUEST_DENIED: '#/components/schemas/EventMetadataCancel'
          CANCELLED: '#/components/schemas/EventMetadataCancel'
      properties:
        eventId:
          type: "string"
          format: "UUID"
          description:  "A unique identifier of the event."  
        eventType:
            type: "string"
            description: "The event type. **[Click here](#operation/pollingEvents)** for definitions of each type."
            enum:
              - "CREATED"
              - "CONFIRMED"
              - "DISPATCHED"
              - "READY_FOR_PICKUP"
              - "PICKUP_AREA_ASSIGNED"
              - "CONCLUDED"
              - "CANCELLATION_REQUESTED"
              - "CANCELLATION_REQUEST_DENIED"
              - "CANCELLED"
              - "ORDER_CANCELLATION_REQUEST"
        orderId:
          allOf:
            - $ref: "#/components/schemas/Order/properties/@id"
        orderUrl:
          type: "string"
          format: "uri"
          description: "The URL to get the order details"
        createdAt:
          type: "string"
          format: date-time
          description:  "Order creation date in ISO timestamp format." 

    EventMetadataCancel:
      description: Metadata
      required: ["metadata"]
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
        - properties:
            metadata: 
              required: ["reason", "code", "clientId"]
              type: object
              description: "Information related to the Event Type"
              properties:
                reason:
                  type: "string"
                  description: "Reason for the cancellation"
                code:
                  type: "string"
                  description: "Cancelation reason code"
                  enum:
                    - ORDER_CANCELLATION_REQUESTED
                    - OTHER_CANCELLATION_REASON
                clientId:
                  type: "string"
                  description: "The URL to get the order details"
     
    EventMetadata:
      description: Metadata
      allOf:
        - $ref: '#/components/schemas/Event'

    EventMetadataConfirm:
      description: Metadata
      required: ["metadata"]
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
        - properties:
            metadata: 
              type: object
              description: "Information related to the Event Type"
              required: ["expectedPreparationStartTime", "clientId"]
              properties:
                expectedPreparationStartTime:
                  type: "string"
                  format: "date-time"
                  description: "Expected preparation start time after Order Confirmation"
                clientId:
                  type: "string"
                  description: "The URL to get the order details"  

    Repository:
      type: "object"
      title: "Repository"
      required: ["document", "corporateName", "postalCode", "email", "website", "baseApiUrl", "TTL", "hostCompanyDocument"]
      properties:
        document:
          type: "string"
          description:  "Company registration document"
          pattern: "/^\\d{14}$/"
        corporateName:
          type: "string"
          description:  "Corporate Name"
          maxLength: 500
        postalCode:
          type: "string"
          description:  "Postal Code" 
        email:
          type: "string"
          description:  "Contact Email. It is recommended that a contact be made available to deal with specific **Open Delivery** issues."
        website:    
          type: "string"
          format: "URL"
          description:  "Company Website. It is recommended to have a website (or landing page) with information about how the company works with Open Delivery."
        baseApiUrl:
          type: "string"
          format: "URL"
          description:  "Base URL of the endpoints with the company's data. It will be used by the indexing system to search the establishments under the responsibility of the menu software (see endpoint) and to search public menus (see endpoint)."
        hostCompanyDocument:    
          type: "string"
          description:  "Software Service registration document that provides the merchant information."
          pattern: "/^\\d{14}$/"
        TTL:
          type: "integer"
          description:  "Time to Live (in seconds). 
          \nA new request must be done when the TTL expires."

    Error:
      type: object
      required: ["title","status"]
      properties:
        title:
          type: string
          description: "Short description of the problem."
          example: "Unexpected error"
        status:
          type: integer
          description: "HTTP code of the returned status."
          example: 500

    MerchantStatus:
      type: "object"
      title: "Merchant Status"
      required: ["lastRead","status"]
      properties:
        lastRead:
          type: "string"
          format: "date-time"
          description:  "Date of last attempt to read merchant information"
        status:
          type: "string"
          description:  "Reading attempt status"
          enum:
            - SUCCESS
            - FAIL                 

  examples:
    orderExample:
      summary: "Sample Order"
      value:
        id: "22815773000169-4818e72f-2304-466f-9fe7-af08f34ac4ed"
        type: "DELIVERY"
        displayId: "12345"
        createdAt: "2021-05-27T19:38:10.332Z"
        orderTiming: "INSTANT"
        preparationStartDateTime: "2021-05-27T19:45:10.332Z"
        merchant:
          id: "22815773000169-7fb59cb8-5808-40c8-b967-1b3f20ee39cd"
          name: "Plaza Pizza"
        items: [
          {
            id: "22815773000169-732bd31e-77fc-47ee-88ee-a0437f97b198",
            index: 0,
            name: "Medium - 2 flavors",
            externalCode: "22",
            unit: "UNIT",
            quantity: 1,
            specialInstructions: "Do not put onions.",
            unitPrice: {
              value: 43.00,
              currency: "R$"
            },
            optionsPrice: {
              value: 50.00,
              currency: "R$"
            },
            totalPrice: {
              value: 50.00,
              currency: "R$"
            },  
          options: [
            {
              id: "22815773000169-e5232f14-430c-4a94-8ff6-289d5a16a87a",
              name: "1/2 Pepperoni",
              externalCode: "23",
              unit: "UNIT",
              quantity: 1,
              unitPrice: {
                value: 50.00,
                currency: "R$"
              },
              price: {
                value: 50.00,
                currency: "R$"
            },
              specialInstructions: "None"
            },
            {
              id: "22815773000169-7e507cab-7235-4f75-a0c2-e955fb2f2048",
              name: "1/2 Mozzarella",
              externalCode: "24",
              unit: "UNIT",
              quantity: 1,
              unitPrice: {
                value: 30.00,
                currency: "R$"
              },
              price: {
                value: 30.00,
                currency: "R$"
            },
              specialInstructions: "None"
            }
          ]
          }
        ] 
        otherFees: [
          {
            name: "Delivery",
            type: "DELIVERY_FEE",
            receivedBy: "MARKETPLACE",
            receiverDocument: "1234",
            price: {
              value: 5.00,
              currency: "R$"
            },
            observation: "None"
          }
        ] 
        discounts: [
          {
            value: 0,
            target: "DELIVERY_FEE",
            sponsorshipValues: {
              name: "MARKETPLACE",
              value: 0
            }
          }
        ] 
        total:
          items: 1
          otherFees: 5.00
          discount: 0
          orderAmount: 55.00
        payments:
          prepaid: 55.00
          pending: 0
          methods: [
            {
              value: 55.00,
              currency: "R$",
              method: "FOOD_VOUCHER",
              methodInfo: "None"
            }
          ]
        customer:
          id: "22815773000169-d9730653-a8ba-4e85-8dbb-b5697e6ae8d5"
          phone: 
            number: "11999999999"
            extension: "0"
          documentNumber: "12345"
          name: "John"
          ordersCountOnMerchant: 1
        delivery:
          deliveredBy: "MERCHANT"
          deliveryAddress:
            country: "Brazil"
            streetName: "Gomes de Carvalho Street"
            formattedAddress: "string"
            streetNumber: "100"
            city: "São Paulo"
            postalCode: "20111-000"
            coordinates:
              latitude: -23.5475
              longitude: -46.63611
            neighborhood: "Moema"
            state: "SP"
            complement: "102"
            deliveryDateTime: "2021-05-27T20:45:10.332Z"
        extraInfo: "None"

    merchantExample:
      summary: "Merchant Example"
      value:
        lastUpdate: "2021-05-27T20:45:10.332Z"
        TTL: 500
        id: "22815773000169-dbc7e35a-c936-4665-9e13-eb55eb8b6824"
        type: "MERCHANT"
        status: "AVAILABLE"
        basicInfo:
          name: "Pizza Plaza"
          document: "22815773000169"
          corporateName: "Food Company"
          description: "Food company specializing in pizzas."
          averageTicket: 90.00
          averagePreparationTime: 20
          minOrderValue:
            value: 20.00
          currency: "R$"
          merchantType: "RESTAURANT"
          merchantCategories: ["PIZZA", "FAMILY_MEALS", "PREMIUM"]
          address:
            country: "Brazil"
            state: "SP"
            city: "São Paulo"
            district: "Moema"
            street: "Plaza Avenue"
            number: "100"
            postalCode: "20111-000"
            complement: "2001"
            latitude: -23.5480
            longitude: -46.63630
          contactEmails: "food@company.com"
          contactPhones: [
            {
              commercialNumber: "11999999999",
              whatsappNumber: "11998888888"
            }
          ]
          logoURL: "https://logo-image.food-company.com"
          bannerURL: "https://banner-image.food-company.com"
          createdAt: "2021-05-10T20:45:10.332Z"
        services: [
          {
            id: "22815773000169-f078e8e2-3044-4eec-b4a8-8359810de123",
            type: "SERVICE",
            status: "AVAILABLE",
            serviceType: "DELIVERY",
            menuId: "22815773000169-f627ccdc-6789-456f-a782-148538d5035b",
            serviceArea: {
              id: "22815773000169-01339e6d-520b-429e-bc7c-dcfd2df42278",
              type: "SERVICE_AREA",
              geoMidpointLatitude: -20.2333,
              geoMidpointLongitude: -20.8383,
              geoRadius: 1000
            },
            serviceAreaFee: {
              id: "22815773000169-e74643e5-53e3-41ef-a2c3-1e2db96eb1ee",
              type: "SERVICE_AREA_FEE",
              geoMidpointLatitude: -20.2333,
              geoMidpointLongitude: -20.8383,
              value: [
                {
                  geoRadius: 2000,
                  price: {
                    value: 5.00,
                    currency: "R$"
                  }
                }
              ]
            },
            serviceHours: {
              id: "22815773000169-fb093d8c-2ca5-40fb-afcf-472fbdae81cc",
              type: "SERVICE_HOURS",
              weekHours: [
                {
                  dayOfWeek: ["MONDAY", "TUESDAY",
                    "WEDNESDAY",
                    "THURSDAY",
                    "FRIDAY" ]
                },
                timePeriods: {
                startTime: "10:00:00.000Z",
                endTime: "18:00:00.000Z"
                },
              ],
              holidayHours: [
                {
                  date: "7/4/2021",
                  timePeriods: {
                    startTime: "12:00:00.000Z",
                    endTime: "17:00:00.000Z"
                  },
                }
              ]
            }
          }
        ]
        items: [
          {
            id: "22815773000169-732bd31e-77fc-47ee-88ee-a0437f97b198",
            type: "ITEM",
            name: "Medium - 2 flavors",
            description: "Medium two-flavored pizza.",
            externalCode: "23",
            imageUrl: "https://www.food-place.com/images/medium-pizza.png",
            serving: 8,
            unit: "8 pieces"
          },
          {
            id: "22815773000169-b728fd88-4af0-43f7-956f-95c251f01ddd",
            type: "ITEM",
            name: "Small - 1 flavor",
            description: "Small one-flavored pizza.",
            externalCode: "23",
            imageUrl: "https://www.food-place.com/images/small-pizza.png",
            serving: 4,
            unit: "4 pieces"
          },
          {
            id: "22815773000169-502ecf11-0509-48ed-b63c-6211c48fd9b9",
            type: "ITEM",
            name: "1/2 Pepperoni",
            description: "Pepperoni flavored pizza with LOTS of pepperoni.",
            externalCode: "23",
            imageUrl: "https://www.food-place.com/images/peperroni.png",
            nutritionalInfo: {
              description: "Contains preservatives",
              calories: "2000 Cal",
              allergen: ["GLUTEN"],
            },
            unit: "0"
          },
          {
            id: "22815773000169-7e507cab-7235-4f75-a0c2-e955fb2f2048",
            type: "ITEM",
            name: "1/2 Mozzarella",
            description: "Delicious mozzarella pizza.",
            externalCode: "24",
            imageUrl: "https://www.food-place.com/images/mozzarella.png",
            nutritionalInfo: {
              description: "Contains preservatives",
              calories: "2500 Cal",
              allergen: ["GLUTEN"],
            },
            unit: "0"
          },
          {
            id: "22815773000169-2c0f3447-5309-49cc-a167-4eac5c664470",
            type: "ITEM",
            name: "Banana",
            description: "Banana Pizza with cream.",
            externalCode: "25",
            imageUrl: "https://www.food-place.com/images/banana.png",
            nutritionalInfo: {
              description: "Contains preservatives",
              calories: "2500 Cal",
              allergen: ["GLUTEN"],
            },
            unit: "0"
          }
        ]
        menus: [
          {
            id: "22815773000169-f627ccdc-6789-456f-a782-148538d5035b",
            type: "MENU",
            name: "Pizzas",
            description: "Pizza menu",
            externalCode: "123",
            disclaimer: "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
            categoryId: ["22815773000169-92fad022-2c28-4239-a026-989f5b555cb7", 
            "22815773000169-6bb71850-1d40-49f9-8046-b13e068c0cca"]
          }
        ]
        category: [
          {
            id: "22815773000169-92fad022-2c28-4239-a026-989f5b555cb7",
            type: "CATEGORY",
            index: 0,
            name: "Salted Pizza",
            description: "Salted pizza flavors.",
            imageUrl: "https://www.food-company.com/images/salted_pizza.png",
            externalCode: "13",
            status: "AVAILABLE",
            availabilityId: ["22815773000169-11d063c4-73a7-4f87-a0eb-71636cc02029"],
            itemOfferId: [
              "22815773000169-f080cfb3-5c4a-4eb7-907d-2de3bbb5dfb9"
            ]
          },
          {
            id: "22815773000169-6bb71850-1d40-49f9-8046-b13e068c0cca",
            type: "CATEGORY",
            index: 1,
            name: "Sweeted Pizza",
            description: "Sweeted pizza flavors.",
            imageUrl: "https://www.food-company.com/images/sweeted_pizza.png",
            externalCode: "13",
            status: "AVAILABLE",
            availabilityId: ["22815773000169-11d063c4-73a7-4f87-a0eb-71636cc02029"],
            itemOfferId: [
              "22815773000169-377b99ba-5413-43d1-b875-7cdcaa72860e"
            ]
          }
        ]
        itemOffers: [
          {
            id: "22815773000169-f080cfb3-5c4a-4eb7-907d-2de3bbb5dfb9",
            type: "ITEM_OFFER",
            itemId: "22815773000169-732bd31e-77fc-47ee-88ee-a0437f97b198",
            index: 0,
            price: {
              value: 43.00,
              originalValue: 43.00,
              currency: "R$"
            },
            availabilityIds: ["22815773000169-11d063c4-73a7-4f87-a0eb-71636cc02029"],
            optionGroupsIds: ["22815773000169-fe67e551-f42f-499a-8afb-0ed893c71fa3"]
          },
          {
            id: "22815773000169-377b99ba-5413-43d1-b875-7cdcaa72860e",
            type: "ITEM_OFFER",
            itemId: "22815773000169-7e507cab-7235-4f75-a0c2-e955fb2f2048",
            index: 1,
            price: {
              value: 30.00,
              originalValue: 30.00,
              currency: "R$"
            },
            availabilityIds: ["22815773000169-11d063c4-73a7-4f87-a0eb-71636cc02029"],
            optionGroupsIds: ["22815773000169-c524c066-96fa-458d-b78c-3712661529b3"]
          }
        ]
        optionGroups: [
          {
            id: "22815773000169-fe67e551-f42f-499a-8afb-0ed893c71fa3",
            type: "OPTION_GROUP",
            index: 0,
            name: "Choose your salted pizza flavor",
            description: "Choose your salted pizza flavor.",
            externalCode: "12",
            status: "AVAILABLE",
            minPermitted: 2,
            maxPermitted: 2,
            options: [
              {
                id: "22815773000169-e5232f14-430c-4a94-8ff6-289d5a16a87a",
                type: "OPTION",
                itemId: "22815773000169-502ecf11-0509-48ed-b63c-6211c48fd9b9",
                index: 0,
                price: {
                  value: 50.00,
                  originalValue: 50.00,
                  currency: "R$"
                },
                maxPermitted: 1
              },
              {
                id: "22815773000169-e5232f14-430c-4a94-8ff6-289d5a16a87a",
                type: "OPTION",
                itemId: "22815773000169-7e507cab-7235-4f75-a0c2-e955fb2f2048",
                index: 1,
                price: {
                  value: 43.00,
                  originalValue: 43.00,
                  currency: "R$"
                },
                maxPermitted: 1
              },
              
            ]
          },
           {
            id: "22815773000169-c524c066-96fa-458d-b78c-3712661529b3",
            type: "OPTION_GROUP",
            index: 0,
            name: "Choose your sweeted pizza flavor",
            description: "Choose your sweeted pizza flavor.",
            externalCode: "12",
            status: "AVAILABLE",
            minPermitted: 1,
            maxPermitted: 1,
            options: [
              {
                id: "22815773000169-2419d582-357f-4149-9089-12321537f147",
                type: "OPTION",
                itemId: "22815773000169-2c0f3447-5309-49cc-a167-4eac5c664470",
                index: 0,
                price: {
                  value: 30.00,
                  originalValue: 30.00,
                  currency: "R$"
                },
                maxPermitted: 1
              }
            ]
          }
        ]
        availability: [
          {
            id: "22815773000169-11d063c4-73a7-4f87-a0eb-71636cc02029",
            type: "AVAILABILITY",
            startDate: "05/01/2021",
            endDate: "05/30/2021",
            hours: {
              dayOfWeek: ["MONDAY",
                "TUESDAY",
                "WEDNESDAY",
                "THURSDAY",
                "FRIDAY" ]
            },
            timePeriods: {
                startTime: "10:00:00.000Z",
                endTime: "18:00:00.000Z"
            }
          }
        ]