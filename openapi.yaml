openapi: 3.0.3
info:
  title: Open Delivery
  version: "1.0.0"
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  contact:
    name: Suporte Open Delivery
    email: suporte@opendelivery.org.br
    url: https://www.opendelivery.org.br
  x-logo:
    url: https://gui-camargo.github.io/OD/logo-open-delivery_small.png
    altText:  Open Delivery logo

  description: |-

    # Introduction

    Open Delivery is a set of REST APIs with the goal to provide standart communications between Merchants and Applications.

    ## How Open Delivery integrations work

    Open API integrations have two main components: Merchants information and Orders information.

    ## Merchant API
    This API defines the merchant info, services and online availability of restaurants ordering as well as their menu options and services offered. The Merchant endpoint is hosted by a Software Service Company (eg. POS applications) and periodically fetched by an Ordering Application (eg. Marketplaces), ensuring up-to-date ordering information is shown to users.

    The API contains these top-level entities:

    - Basic Merchant info entities
    - Service entities
    - Menu entities (Menus, Categories, Items, Offers, OptionGroups and Availability)

    ### Merchant Updates

    It is possible to send a notification to the Order Application to make a new request at the merchant endpoint and update the menu.

    ## Order API
    
    ### Order Events

    Open delivery provides two ways for the Software Services to receive the order events generated by the Order Application:

    Polling (required)
    Webhook (optional)

    ### Order updates

    After a new order event has been submitted, you leverage asynchronous order updates to send update notifications to users within the Food Ordering user interface.

    For example, you can notify the user that their order "status has moved from "Accepted" to "In Progress," or if the price has changed."

    ### Order Cancellation



    # Open Delivery API Evolution

    The Open Delivery API seeks to respect [SemVer](https://semver.org/). In this sense, compatible changes should not generate a new major version.

    The API version is composed of 4 elements: major, minor, patch and release candidate. The version v[x] in the URL path is the major element of the API version. The evolution of the version is as follows:

    - **Major**: incompatible, contract-breaking changes (v1.0.0 → v2.0.0)
    - **Minor**: compatible, non-breaking changes (v1.1.0 → v1.2.0)
    - **Patch**: bugfixes, clarifications to specifications, no functional changes (v1.1.1 → v1.1.2)
    - **Release candidate**: pre-release versions of any future patch, minor or major (v1.0.0-rc.1 → v1.0.0-rc.22)
    Non-breaking changes and clarifications to specifications may occur at any time. Customers should be prepared to handle these changes without breaking.

    The following changes are expected and considered backward compatible:

    - Addition of new features to the Open Delivery API;
    - Addition of new optional parameters;
    - Addition of new fields in Open Delivery API responses;
    - Change of order of fields;
    - Addition of new elements in enumerations.


    # Error Handling

    The API returns HTTP status codes to indicate success or failure of requests.

    `2xx` codes indicate success. 
    `4xx` codes indicate failure caused by the information sent by the client or the current state of the entities.
    `5xx` codes codes indicate service problems on the API side.

    The error responses include in the body details of the error following the
    _schema_ of [RFC 7807](https://tools.ietf.org/html/rfc7807).

    ## General

    This section gathers errors that could be returned by any endpoints listed in the API.

    ### `InvalidRequest`

      * __Significado__: Invalid request.
      * __HTTP Status Code__: [400 Bad Request](https://tools.ietf.org/html/rfc7231#section-6.5.1).

    ### `AccessDenied`

      * __Significado__: Authenticated participant request that violates some authorization rule.
      * __HTTP Status Code__: [403 Forbidden](https://tools.ietf.org/html/rfc7231#section-6.5.3).

    ### `NotFound`

      * __Significado__: Entity not found.
      * __HTTP Status Code__: [404 Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4).

    ### `PermanentlyRemoved`

      * __Significado__: Indicates that the entity existed, but has been permanently removed.
      * __HTTP Status Code__: [410 Gone](https://tools.ietf.org/html/rfc7231#section-6.5.9).

    ### `InternalServerError`

      * __Significado__: Unexpected condition when processing requisition.
      * __HTTP Status Code__: [500 Internal Server Error](https://tools.ietf.org/html/rfc7231#section-6.6.1).

    ### `ServiceUnavailable`

      * __Significado__: Service is not currently available. Requested service may be under maintenance or outside the operating window.
      * __HTTP Status Code__: [503 Service Unavailable](https://tools.ietf.org/html/rfc7231#section-6.6.4).

    ### `UnavailabilityByTime`

      * __Significado__: It indicates that the service took longer than expected to return.
      * __HTTP Status Code__: [504 Gateway Timeout](https://tools.ietf.org/html/rfc7231#section-6.6.5).
   
#    ## Orders Erros
#    Reúne erros dos endpoints que tratam do gerenciamente dos Webhooks da API.
#
#    ### `WebhookOperacaoInvalida`
#    * __Significado__: a presente requisição busca criar um webhook sem respeitar o schema ou,
#    ainda, apresenta semântica inválida.
#    * __HTTP Status Code__: [400](https://tools.ietf.org/html/rfc7231#section-6.5.1).
#    * __endpoints__: `PUT /webhook/{chave}`.
#
#    __Violações__ para o endpoint `PUT /webhook/{chave}`:
#      - o parâmetro {chave} não corresponde a uma chave DICT válida.
#      - o parâmetro {chave} não corresponde a uma chave DICT pertencente a este usuário recebedor.
#      - Campo webhook.webhookUrl não respeita o schema.
#
#    ### `WebhookNaoEncontrado`
#
#    * __Significado__: o webhook denotado por {chave} não encontra-se estabelecido.
#    * __HTTP Status Code__: [404](https://tools.ietf.org/html/rfc7231#section-6.5.4).
#    * __endpoints__: `GET /webhook/{chave}`,  `DELETE /webhook/{chave}`
#
#    ### `WebhookConsultaInvalida`
#
#    * __Significado__: os parâmetros de consulta à lista de webhooks ativados não respeitam o schema
#    ou não fazem sentido semanticamente.
#    * __HTTP Status Code__: [400](https://tools.ietf.org/html/rfc7231#section-6.5.1).
#    * __endpoints__: `GET /webhook`.
#
#    __Violações__ específicas para o endpoint `GET /webhook`:
#      - algum dos parâmetros informados para a consulta não respeita o _schema_.
#      - o _timestamp_ representado pelo parâmetro `fim` é anterior ao timestamp
#      representado pelo parâmetro `inicio`.
#      - o parâmetro `paginacao.paginaAtual` é negativo.
#      - o parâmetro `paginacao.itensPorPagina` é negativo.

tags:
  - name: authentication
    x-displayName: "Authentication"
    description: |    
        Open Delivery suports **OAuth 2**.
        <!-- ReDoc-Inject: <security-definitions> -->

        ### Generating a Client Credentials Token

        To generate a client credentials token, retrieve your client_id and client_secret for your app from your Ordering Application Company and see the [endpoint](#operation/getToken) below.

        ### Usage

        The **accessToken** field will contain the token used to authenticate against the Open Delivery APIs. Once you’ve obtained this token, you can provide it in the “Authorization” header of requests you make to endpoints that require client credentials scopes.

        The **expiresIn** field indicates the lifetime of the access token, provided in seconds. This should be cached and re-used across requests until (or shortly before) expiration, not re-generated per request.
        
        ```
        curl \
          -H 'authorization: Bearer <TOKEN>' \
          https://{baseURL}/v1/events:polling
        ``` 
        
        
        Refresh Token is not available at this version.

  - name: merchantOverview
    x-displayName: Merchant Overview
    description: |-

      The Merchant entity will be the entity used by the ordering applications to fetch all the data from a merchant and display it to the user.
      It is the responsibility of the merchant software service to provide the endpoint and the responsibility of the ordering application to fetch the information.

      ## Usage

      The merchant must 'choose' a software service, which will be responsible for exposing its data on the **[/merchant](#operation/getMerchant)** endpoint. This endpoint will be used by the ordering system to get the updated merchant infos (BasicInfos, Services and Menus).

      <div align="center">
        <img alt="Repository" src="https://abrasel-nacional.github.io/docs/images/menu_flow.png" />
      </div>

      The ordering applications can check for merchant updates in the following ways:
      1.	Make a new request on the **[/merchant](#operation/getMerchant)** endpoint whenever the TTL expires;

      2.	The ordering Application can optionally provide a **[webhook](#operation/menuUpdated)** , where the merchant software service can send a menu update notification;
      
      3.	If the Software Service **[refuses](#operation/cancelDenied)** an order for any reason, upon receiving the refusal, it is recommended that the ordering application make a new query on the endpoint /merchant.


      ## Health Check

      The ordering applications must provide an **[endpoint](#operation/getMerchantStatus)** for the software service to know if its menu is being read correctly.

  - name: merchantStructure
    x-displayName: Merchant Structure
    description: |-

      The structure of the Merchant model consists of the following top-level properties:

      - **BasicInfo**: Information about the merchant.
      - **Services entities**: Timing, location, and conditions of the merchant service.
      - **Menu entities**: Details of the merchnat menus.

      The following diagram shows how Basic Info, Service, and Menu properties represent a single merchant:

      <div align="center">
        <img alt="Repository" src="https://abrasel-nacional.github.io/docs/images/merchant_structure.png" />
      </div>

      Full Merchant Model

      <SchemaDefinition schemaRef="#/components/schemas/Merchant" />     

      # BasicInfo

      A merchant `BasicInfo` defines properties such as the merchant name, location address, website, description, telephone number, for a merchant that the Software Services serves. 
      Typically, this data is static.

      <SchemaDefinition schemaRef="#/components/schemas/BasicInfo" />

      # Service

      The `Service` defines the capabilities of a delivery organization in a geographic region.
      A `Service` defines properties such as the service type, hours available, and area served.
      Cada `Service` necessita obrigatoriamente estar vinculada à um `Menu`, através da propriedade `menuId` 
      `Service` is expected to change.

      <div align="center">
        <img alt="Repository" src="https://abrasel-nacional.github.io/docs/images/merchant_services.png" />
      </div>
      Figure 1: `Service` model showing its relationship with `ServiceArea`, `ServiceHours`, and `ServiceAreaFee` properties.

      <SchemaDefinition schemaRef="#/components/schemas/Service" />

      # Menu

      A `Menu` defines properties such as categories, items, offers and availability. 
      Um menu para ser exibido pelo Ordering Application necessáriamente necessita estar vinculado à um `Service` através da propriedade `menuId`.
      
      <div align="center">
        <img alt="Repository" src="https://abrasel-nacional.github.io/docs/images/merchant_menus.png" />
      </div>
      Figure 1: `Menu` model showing its relationship with `Category`, `Availability`, `ItemOffer` and `OptionGroup`.
      
      Data in a Menu entity is expected to change.

      ## Item

      A `Item` propertie is the menu entity that carries all the general item information. They are:
      Name, description, external code, image, nutricional information, and EAN (European Article Number), used mainly by marketplaces.
      The 'Item' can be offered in a menu as a main item or an option. And, for the same store, it can even be reused in different menus.

      <SchemaDefinition schemaRef="#/components/schemas/Item" />

      ## Category

      `Category` is the propertie in which the store has to organize its `ItemsOffers` in order to make it easier for the user to find what he wants to buy. Categories have sales statuses such as activated and deactivated and accept `Availability` too.
      
      <SchemaDefinition schemaRef="#/components/schemas/Category" />

      ## ItemOffer

      The `ItemOffer` can be considered the offering of a item, and it is used to set the item price and 'Availability'.
      The `ItemOffer` is a item related to the category.

      <SchemaDefinition schemaRef="#/components/schemas/ItemOffer" /> 


      ## OptionGroup and Option

      The `OptionGroup` is the entity used to group customizations of a product, for example: "Choose your beverage:"
      An `OptionGroup` can be shared by several items.

      `Options` are the complements of a OptionGroup. It can be defined as: "A item related to a `OptionGroup`". 
      The `Option` has its own sales status, and can be activated or desactivated when needed. 
      It is possible to set the `Option` price to 0.00 regardless of whether it is mandatory or optional.

      <SchemaDefinition schemaRef="#/components/schemas/OptionGroup" />


      ## Availability

      The `Availability' entity defines specific times and days to control the availability of categories and item offerings within the menu.
      It is also possible to set special times for holidays.

      <SchemaDefinition schemaRef="#/components/schemas/Availability" />
 

  - name: merchantEndpoints
    x-displayName: Merchant API
    description: |-

  - name: ordersOverview
    x-displayName: Order Overview
    description: |-

      "This overview summarizes the Open Delivery Ordering flow and how it interacts with Software Services and Ordering Applications.

      The order flow has the following Macro steps:

      ### Order Event Reception

      Through Order Events, the 'Order Application' communicates to the 'Software Service' the existence of a new order, as well as the other events of the order lifecycle.

      Open Delivery provides two ways for Software Services to be aware of new events:

      - Polling: 
      Receiving events through polling provided by the 'Order Application' is the standard way Open Delivery works, and its implementation is mandatory.

      - Webhook:
        Optionally it is recommended to implement a 'webhook' by the Software Services for the Order Applications to send the new events directly, ensuring a much faster communication.
      
        As this implementation is not mandatory, it is recommended that merchant software services contact the Order Applications to find out if it is possible to work with this possibility.

      ### Status Updates

      After receiving the new order event, the merchant needs to notify the 'Order Application' of its progress.

      Through the Open Delivery API's it is possible:

      - Confirm receipt of order;
      - Notify that an order is ready for pickup;
      - Notify that an order has been shipped.

      Whenever a merchant triggers one of these actions, the 'Order Application' will send a new event to the 'Software Service', informing the new order status within the 'Order Application'.

      ### Order Cancellation

      Open Delivery provides API's to make cancellation requests from either party.
      These requests can be accepted or denied depending on the rules that the company has.

      ### Order Life Cicle


      
  - name: ordersWebhook
    x-displayName: Webhook
    description: |-
    
      Receiving events via Webhook works as follows:

      <div align="center">
        <img alt="Workflow" src="https://user-images.githubusercontent.com/80956588/113513032-f459c680-953d-11eb-8ac3-9422e9970d0f.png" />
      </div>

      Order Event Notification
      Webhook is sent to notify you that an order has been placed on the Uber Eats marketplace.

      The merchant Software Service that implements this webhook, should return an HTTP 200 response code with an empty response body to acknowledge receipt of the webhook event. 
      If the Ordering Application does not receive a 200 acknowledgement response, than the webhook event will be resent based on its resent politics.

      Webhook Headers
      Uber will include security headers for all requests made to your webhook URL.

      Header	Description
      X-Environment	Indicates if this request is coming from the production or sandbox API.
      X-App-Id
      X-App-Signature	SHA256 hash of the request body, using the client secret as the key.
        
      Webhook Security
      Webhook messages are signed so that your app can verify that the sender is Uber. Webhooks requests contain an X-Uber-Signature header. The value of this field is a lowercased hexadecimal HMAC signature of the webhook HTTP request body, using the client secret as a key and SHA256 as the hash function.  

      Webhook Event Structure

  - name: ordersPolling
    x-displayName: Polling
    description: |-

        "Receiving events via Polling works as follows:

        <div align="center">
          <img alt="Workflow" src="https://user-images.githubusercontent.com/80956588/114452490-ded44480-9bae-11eb-9eaf-1fd8e7c7f142.png" />
        </div>

        ### Query new order events

        In order to receive new order events, the 'Software Service' must make requests on the polling endpoint regularly at a certain time interval, determined by the 'Order Application'. 
        Whenever there is a new event the response will send the response code 200 with the list of events. If there are no new events, the response will send the response code 204.

        It is important that the Software Service performs the requests within the timeframe determined by the 'Request Application', as blocking and penalties may occur depending on the application's rules.
        
        Availability of new events in polling: The 'Order Application' may have specific rules about the maximum time new events are available in polling before they are removed.
            
        Always check with the Order Application what the rules are for using the polling service. 

        Duplicate Events and Order Date:
        Eventually the API may return the same event more than once, for example the PLACED event including old orders. For this reason it is important that your application handles the uniqueness of requests and events through "id" and the date through "createdAt".

        Therefore, when receiving an event, you must check the event id and validate that this event (id) has not been processed before. If this event has already been received previously, it must be discarded.

        Please note: you should only accept a new order or update the status of an order after validating that the event has not been processed before.

        ### Acknowledgment Events

        When receiving new events, the 'Software Service' should always send acknowledgement so that the API does not send that same event again;

        Important recommendations:

        Make an acknowledgment request for each polling request with results.
        If you receive events that are not used by your application, send the acknowledgment of these events anyway so that you are not receiving them every polling again. We recommend that this be the default treatment for all events not yet mapped in your application.
        You only need to send acknowledgment of the event once."
      
  - name: ordersDetails
    x-displayName: Order Details
    description: |-

      Before confirming or canceling an order, it is necessary to get the order details so that the Software Service user can check if he will be able to prepare and deliver this order, such as checking if he has all the necessary items and if he is available to make the delivery to the informed address.

      Through the GET /orders/{id} endpoint you can get all the details of an order.

      This endpoint returns the code 200 and the content of the request. If an invalid request id or the id of an expired order is entered (depending on the marketplace's policy) the endpoint returns 404.

      In this section you will find all the details of the payload of an order:

  - name: ordersStatus
    x-displayName: Status Update
    description: |-

      Following the order lifecycle, the Software Service needs to notify the Ordering Application of the upcoming order status.
       
      After acknowledging receipt of a new order event (either via polling or webhook) is expected that the Software Service explicitly POST /accept_pos_order or POST /deny_pos_order within a time window set by the Ordering Application.
      Otherwise the order can time out and auto-cancel and the merchant can suffer a penalty based on the Ordering Application policy. 
      Order acceptances should be posted as quickly as possible to minimize Consumer cancellations.

      When the request is ready, it is expected that a request will be sent to /readyForPickup.

      When the request goes out for Delivery, it is expected that a request will be sent to /dispatch.

      When sending requests to these endpoints, the Ordering Application is expected to notify the consumer of the progress of the request.

  - name: ordersCancellation
    x-displayName: Cancellation
    description: |-

        An order can be canceled for several reasons and the initiative to cancel an order can come from the store, the customer, or the marketplace. It may also happen that the delivery person requests the cancellation in some scenarios, such as when the customer is not found at the delivery address.

        Cancellation Rules
        It is expected that both Ordering Applications and Software Services will have their own order cancellation policies and inform their users.

        A request cancellation will always be an asynchronous processing, where one party makes a cancellation request and the other accepts or refuses this "Request problems."

        A cancellation request must always contain:

        reason: Open text field indicating the reason for the cancellation.
        code: An enumerator containing a cancellation reason.
        mode: Field indicating whether the cancellation occurred Automatically or Manually.

        The cancellation is caused by:

        Software Service (Merchant):

        If the merchant wants to cancel an order, it must make the request through the endpoint: /orders/{id}/requestCancellation

        Penalties
        Avoid order cancellations! Excessive cancellations can result in some penalties (depending on the Ordering Application's policy) such as having the store temporarily closed on the platform.

        Cancellation Validation
        The Cancellation request does not guarantee that the order is cancelled. When sending a request /orders/{id}/requestCancellation, the Ordering Application will send the code 202 (accepted) in response.
        This does not yet mean that the request has been cancelled. It means that the request has been accepted and will be processed by the cancellation service. As a result of this request, the Software Service may receive at the next polling (or webhook) one of the following events:

        CANCELLATION_REQUEST_FAILED
        CANCELLED

        The order should only be Canceled when the CANCELLED event is generated.

        Cancellation rules may vary depending on the timing of the order (before or after confirmation). In some situations it is possible that the cancellation service will consult with the consumer on whether or not the consumer accepts the cancellation of the order.

        Cancellation codes:
        SYSTEMIC ISSUES
        DUPLICATE APPLICATION
        UNAVAILABLE ITEM
        RESTAURANT WITHOUT DELIVERY MAN
        OUTDATED MENU
        ORDER OUTSIDE THE DELIVERY AREA
        SCAMMER / PRANKSTER CUSTOMER
        OUTSIDE DELIVERY HOURS
        INTERNAL DIFFICULTIES OF THE RESTAURANT
        RISK AREA
        RESTAURANT WILL OPEN LATER
        RESTAURANT CLOSED EARLY

        It is recommended that the Ordering Application make a new request on the /merchant endpoint whenever a merchant refuses.

        Ordering Application

        Cancellation by Ordering Application can happen by:

        CONSUMER_CANCELLATION_REQUESTED:

        The consumer can request the cancellation of an order. 
        Depending on the cancellation rules applied, this option may not be enabled for all merchants. 
        It may also only be allowed at certain times, such as before the order is confirmed.

        OTHER_CANCELLATION_REASON:

        Ordering Aplication may cancel the order for reasons other than via the consumer.

        Cancellation Handshake
        
        When the request occurs the store will receive an ORDER_CANCELLATION_REQUESTED event in polling (or webhook) and must manifest itself through the following endpoints:

        /acceptCancellation
        /denyCancellation

        This request will be processed by the Ordering Application's cancellation service (asynchronously) and the Software Service will receive in the next polling (or webhook) the following event(s):

        CANCELLATION_DENIED, or
        CANCELLED

  - name: payment
    x-displayName: Payment Endpoint
    description: |-

        Ordering Applications must provide an endpoint where merchants can view information about payments for orders placed and information about the transfer of funds to the merchant.

  - name: menuEntitiesModel
    x-displayName: Menu Entities Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Merchant" />

  - name: merchantModel
    x-displayName: Merchant Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/BasicInfo" />

  - name: serviceModel
    x-displayName: Service Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Service" />

  - name: menuModel
    x-displayName: Menu Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Menu" />

  - name: itemModel
    x-displayName: Items Model
    description: |
     

  - name: categoryModel
    x-displayName: Categories Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Category" />  

  - name: itemOfferModel
    x-displayName: Items Offers Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/ItemOffer" />

  - name: optionGroupModel
    x-displayName: Option Groups Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/OptionGroup" />

  - name: availabilityModel
    x-displayName: Availability Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Availability" />

  - name: orderModel
    x-displayName: Order Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Order" />       

  - name: eventModel
    x-displayName: Event Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Event" /> 

  - name: repositoryOverview
    x-displayName: Repository Overview
    description: |-

      The goal of the repository is to centrally host the information of Open Delivery participants.
      Through an adhesion form a restaurant and its software house can perform a registration that will be available in a database of participants.
      The indexing system will search the URL previously registered at the moment of the adhesion that will be available in the endpoint /repository listing the registered restaurants.
    
      <div align="center">
        <img alt="Repository" src="https://abrasel-nacional.github.io/docs/images/repo-image.png" />
      </div>
      ## How to Access

      Work in progress.

x-tagGroups:
  - name: ""
    tags:
      - authentication
  - name: Merchant
    tags:
      - merchantOverview
      - merchantStructure
      - merchantEndpoints
  - name: Orders
    tags:
      - ordersOverview
      - ordersPolling
      - ordersWebhook
      - ordersDetails
      - ordersStatus
      - ordersCancellation
  - name: Payments
    tags:
      - payment
  - name: Repository
    tags:
      - repositoryOverview
  - name: Models
    tags:
      - menuEntitiesModel
      - merchantModel
      - serviceModel
      - menuModel
      - itemModel
      - categoryModel
      - itemOfferModel
      - optionGroupModel
      - availabilityModel
      - orderModel
      - eventModel

paths:
  /oauth/token:
    get:
      operationId: "getToken"
      tags:
      - "authentication"
      summary: "Get token"
      description: |-
          Endpoint to query the merchants of an establishment          
      requestBody:
          $ref: "#/components/requestBodies/Token"  
      responses:
        "200":
          description: "Successful token request."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "401":
          description: "Bad credentials"
        "500":
          description: "Unexpected error"

  /merchant:
    get:
      tags:
      - "merchantEndpoints"
      operationId: "getMerchant"
      summary: "Get Info, Services and Menus of a Merchant"
      security:
        - OAuth2: [od.all]  
      description: |-
          Endpoint to query all data for a specific merchant, such as basic data, menus, and services

          ### General guidelines

          **DateTime and Time values**: For properties that require a DateTime or Time value, use the formats specified in DateTime and Time formats. For example, 2017-05-01T06:30:00+05:30 for DateTime and T08:08:00+05:30 for Time.

          **IDs**: Use an @id property to identify all unique entities within an entity type. An @id is a unique identifier of the entity of that type, but across entities, IDs can overlap.

          **Null** values: Do not use the value null in place of objects. If an object is optional, you must omit it from your feed.

          Colocar informações sobre o TTL 
      responses:
        "200":
          description: "Successful merchant return."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Merchant"
              examples:
                menuExample:
                  $ref: "#/components/examples/merchantExample"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /merchantList:
    get:
      tags:
        - "repositoryOverview"
      summary: "Returns the name and URL of the merchant."
      security:
        - OAuth2: [od.all]
      description: |-
        Endpoint responsible for returning merchants and their URLs, if registered.
      responses:
        "200":
          description: "Successfully returns the merchant list."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ListMerchant"
        "400":
          description: "Invalid Order Supplied."
        "404":
          description: "Order Not Found."
        "500":
          description: "Internal Server Error."
  /merchantStatus:
    get:
      parameters:
        - in: "query"
          name: "merchantId"
          required: true
          schema:
            $ref:  "#/components/schemas/Merchant/properties/@id"
      tags:
      - "merchantEndpoints"
      operationId: "getMerchantStatus"
      summary: "Get a Health Check on and specific merchant"
      security:
        - OAuth2: [od.all]  
      description: |-
          Get a Health Check on and specific merchant
      responses:
        "200":
          description: "Lista de cobranças imediatas."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Generico"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"          
  
  "/events:polling":
    get:
      tags:
      - "ordersPolling"
      summary: "Get Events"
      security:
        - OAuth2: [od.all]  
      description: 
        "Polls events for any orders from merchants associated with the authenticated user.
        Each event received from this endpoint must be properly acknowledged, otherwise it will continue to be returned on further requests.
        In the body of the request, send an array containing only the event ids. Each request accepts a list of at most 2000 event ids."
      responses:
        "200":
          description: "lista dos Pix recebidos de acordo com o critério de busca."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Generico"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /acknowledge:
    post:
      parameters: 
        - name: "@id"
          in: "query"
          schema:
            allOf:
              - $ref: "#/components/schemas/Generico"
              - pattern: "[a-zA-Z0-9]{1,35}"
      tags:
      - "ordersPolling"
      summary: "Ack Events"
      security:
        - OAuth2: [od.all]  
      description: 
        Acknowledge a set of events, dismissing them from future polling calls.
      responses:
        "200":
          description: "lista dos Pix recebidos de acordo com o critério de busca."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Generico"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /orders/{orderId}:
    get:
      parameters: 
        - name: "orderId"
          required: true
          in: "path"
          schema:
            type: "string"
            format: "UUID"
      tags:
      - "ordersDetails"
      summary: "Get Order Details"
      security:
        - OAuth2: [od.all]
      description: "Endpoint to consult the details of an order."
      responses:
        "200":
          description: "Order returning success."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Order"
              examples:
                orderExample:
                  $ref: "#/components/examples/orderExample"
        "400":
          description: "Invalid Order Supplied."
        "404":
          description: "Order Not Found."
        "500":
          description: "Internal Server Error."
        
  /orders/{orderId}/confirm:
    post:
      parameters: 
        - name: "@id"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "UUID"
      requestBody:
          $ref: "#/components/requestBodies/ConfirmedOrder"
      tags:
      - "ordersStatus"
      summary: "Confirm"
      security:
        - OAuth2: [od.all]  
      description: "Confirms receipt of order."
      responses:
        "200":
          description: "Order confirmed."
        "500":
          description: "Internal Server Error."

  /orders/{orderId}/cancelRequest:
    post:
      parameters: 
        - name: "@id"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "UUID"
      requestBody:
          $ref: "#/components/requestBodies/CancelRequest"
      tags:
      - "ordersCancellation"
      summary: "Request order cancellation"
      security:
        - OAuth2: [od.all]  
      description: "Request order cancellation."
      responses:
        "200":
          description: "Order cancellation requested."
        "500":
          description: "Internal Server Error."

  /orders/{orderId}/cancelAccepted:
    post:
      parameters: 
        - name: "@id"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "UUID"
      tags:
      - "ordersCancellation"
      summary: "Accept order cancellation"
      security:
        - OAuth2: [od.all]  
      description: "Accept order cancellation"
      responses:
        "200":
          description: "Order cancellation confirmed."
        "500":
          description: "Internal Server Error."

  /orders/{orderId}/cancelDenied:
    post:
      parameters: 
        - name: "@id"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "UUID"
      requestBody:
          $ref: "#/components/requestBodies/CancelDenied"
      tags:
      - "ordersCancellation"
      operationId: "cancelDenied"
      summary: "Request order denied"
      security:
        - OAuth2: [od.all]  
      description: "Request order denied."
      responses:
        "200":
          description: "Denied cancellation order confirmed."
        "500":
          description: "Internal Server Error." 

  /orders/{orderId}/dispatch:
    post:
      parameters: 
        - name: "@id"
          in: "query"
          schema:
            allOf:
              - $ref: "#/components/schemas/Generico"
              - pattern: "[a-zA-Z0-9]{1,35}"
      tags:
      - "ordersStatus"
      summary: "Dispatch"
      security:
        - OAuth2: [od.all]  
      description: "Informs dispatch of order"
      responses:
        "200":
          description: "lista dos Pix recebidos de acordo com o critério de busca."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Generico"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /orders/{orderId}/readyForPickup:
    post:
      parameters: 
        - name: "@id"
          in: "query"
          schema:
            allOf:
              - $ref: "#/components/schemas/Generico"
              - pattern: "[a-zA-Z0-9]{1,35}"
      tags:
      - "ordersStatus"
      summary: "Ready For Pickup"
      security:
        - OAuth2: [od.all]  
      description: "Informs you that the order is ready for pickup"
      responses:
        "200":
          description: "lista dos Pix recebidos de acordo com o critério de busca."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Generico"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
  
  /repository:
    get:
        operationId: "merchant"
        tags:
        - "repositoryOverview"
        summary: "List companies under a Menu Holder"
        description: |-
            This endpoint MUST be provided by the Menu Holder Company.

            Endpoint used by the indexing system to list the restaurants under a menu manager.
        responses:
          "200":
            description: "Companies Info"
            content:
              "application/json":
                schema:
                  type: array
                  items:
                    $ref: "#/components/schemas/Repository"
          "403":
            $ref: "#/components/responses/AccessDenied"
          "404":
            $ref: "#/components/responses/NotFound"
          "503":
            $ref: "#/components/responses/ServiceUnavailable"

x-webhooks:
  menuUpdated:
    post:
      summary: New menu update
      description: Information about a update in the systems
      operationId: menuUpdated
      tags: 
        - merchantEndpoints
      responses:
        "200":
          description: Return a 200 status to indicate that the data was received successfully

  newEvent:
    post:
      summary: New event
      description: Information about a new event in the systems
      operationId: newEvent
      tags: 
        - ordersWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        "200":
          description: Return a 200 status to indicate that the data was received successfully                     

components:

  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: oauth/token
          scopes:
            od.all: "Access to all Open Delivery APIs"      
  
  requestBodies:
    Token:
      required: true
      content:
        "application/x-www-form-urlencoded":
          schema:
            $ref: "#/components/schemas/TokenRequest"

    ConfirmedOrder:
      description: "Order confirmation."
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/OrderConfirmed"
    CancelRequest:
      description: "Request to order cancelled."
      required: true
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/RequestCancelled"
    CancelDenied:
      description: "Request to cancel order denied."
      required: true
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/RequestDenied"  
  responses:
    RequisicaoInvalida:
      description: "Problemas na requisição."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Generico'
    NotFound:
      description: "The requested resource was not found."
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Generico'
    AccessDenied:
      description: "Authenticated participant request that violates some authorization rule."
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Generico'
    ServiceUnavailable:
      description: "Service is not currently available. Requested service may be under maintenance or outside the operating window."
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Generico'
  schemas:
    TokenRequest:
      type: "object"
      title: "TokenRequest"
      required: [""]
      properties:
        clientId:
          type: "string"
          format: "date-time"
          description:  "The last modified date and time in ISO timestamp format but with type String. \n\nThis should be used in conjuction of the TTL field to update the information on the ordering aplication."
        clientSecret:
          type: "integer"
          description:  "Time to Live (in seconds). 
          \nMin: 500
          Max: 86400. 
          \nA new request must be done when the TTL expires."
        grantType:
          type: "string"
          description:  "Time to Live (in seconds)." 
          enum:
            - "clientCredentials"

    TokenResponse:
      type: "object"
      title: "TokenResponse"
      required: [""]
      properties:
        accessToken:
          type: "string"
          format: "date-time"
          description:  "The last modified date and time in ISO timestamp format but with type String. \n\nThis should be used in conjuction of the TTL field to update the information on the ordering aplication."
        tokenType:
          type: "integer"
          description:  "Time to Live (in seconds). 
          \nMin: 500
          Max: 86400. 
          \nA new request must be done when the TTL expires."
        expiresIn:
          type: "integer"
          description:  "Time to Live (in seconds). 
          \nMin: 500
          Max: 86400. 
          \nA new request must be done when the TTL expires."    

    Merchant:
      type: "object"
      title: "MenuEntity"
      required: ["lastUpdate", "TTL", "merchant","services", "items", "menus", "categories", "itemOffers"]
      properties:
        lastUpdate:
          type: "string"
          format: "date-time"
          description:  "The last modified date and time in ISO timestamp format but with type String. \n\nThis should be used in conjuction of the TTL field to update the information on the ordering aplication."
        TTL:
          type: "integer"
          description:  "Time to Live (in seconds). 
          \nMin: 500
          Max: 86400. 
          \nA new request must be done when the TTL expires."
        "@id":
          type: "string"
          format: "UUID"
          description:  "Unique Identifier. Must be formatted with `Merchant Document + UUID`
          \n\n This @id must be generated by the company responsible for the merchant's menu and have to be informed in the Order object by the ordering application."
        "@type":
          type: "string"
          enum:
          - MERCHANT
        status:
          type: "string"
          description:  "Indicates if the entity is Avaliable or Unavaliable. Only use this type when you must disable the entity due to an unexpected event and you don't know when the service will be re-established (e.g. do not use for holidays)."    
          enum:
            - AVAILABLE
            - UNAVAILABLE 
        basicInfo:
          type: "object"
          description:  "A required entity to implement. Describes a merchant."
          allOf:
            - $ref: "#/components/schemas/BasicInfo"
        services:
          type: "array"
          description:  "A required entity to implement. Describes food ordering services details for a merchant."
          items:           
            $ref: "#/components/schemas/Service" 
        items:
          type: "array"
          description:  "A required entity to implement. Describes an array of items. To be used with an `ItemOffer` or an `Option`."
          items:
            $ref: "#/components/schemas/Item" 
        menus:
          type: "array"
          description:  "A required entity to implement. Describes an array of menus."
          items:
            $ref: "#/components/schemas/Menu"
        categories:
          type: "array"
          description:  "A required entity to implement. Describes an array of sections in the menu where `ItemOffers` will be showed."
          items:
            type: "object"            
            $ref: "#/components/schemas/Category" 
        itemOffers:
          type: "array"
          description:  "A required entity to implement. Describes an array of offers for the `Items`."
          items:
            type: "object"            
            $ref: "#/components/schemas/ItemOffer"
        optionGroups:
          type: "array"
          description:  "An optional entity to implement. Describes additional options of an `ItemOffer`."
          items:
            $ref: "#/components/schemas/OptionGroup"
        availability:
          type: "array"
          description:  "An optional entity to implement. Describes the time period during which a `Category` or an `ItemOffer` entity is served."
          items:
            type: "object"            
            allOf:
              - $ref: "#/components/schemas/Availability"
    BasicInfo:
      type: "object"
      title: "Merchant"
      properties:   
        name:
          type: "string"
          description:  "Public Name"
          maxLength: 500
        document:
          type: "string"
          description:  "Document"
          pattern: "/^\\d{14}$/"
        corporateName:
          type: "string"
          description:  "Corporate Name"
          maxLength: 500
        description:
          type: "string"
          description:  "Merchant Description"          
        averageTicket:
          type: "number"
          description:  "Average Ticket. Can be used to show the price range of items available at the merchant."          
        averagePreparationTime:
          type: "number"
          description:  "Average amount of time preparing an order takes, in minutes." 
        minOrderValue:
          type: "object"
          description:  "Minimum order value that the merchant accepts." 
          allOf:
            - $ref: "#/components/schemas/Price"
        merchantType:
          type: "string"
          description:  "Merchant Type"
          enum:
            - "RESTAURANT"
            - "STORE"
        merchantCategories:
          type: "array"
          description:  "Merchant Categories"
          items:
            type: "string"
            enum:
              - "JAPANESE"
              - "PIZZA"
              - "HAMBURGUERS"           
        address:
          type: "object"
          description:  "Address"
          allOf:
            - $ref: "#/components/schemas/Address" 
        contactEmails:
          type: "array"
          description: "Contact Emails"
          items:
            type: "string"
        contactPhones:
          type: "object"
          description:  "Contact Phones"
          allOf:
            - $ref: "#/components/schemas/ContactPhones"
        logoURL:
          type: "string"
          format: "uri"
          description:  "URL pointing to an image of the merchant logo.\n\n Image requirements:
                          \n - Hosted on a secure connection (SSL).
                          \n - File size must be less than 10MB.
                          \n - Image must be in JPEG, PNG or GIF format.
                          \n - Both width and height must be between 320px and 1144px."
        bannerURL:
          type: "string"
          format: "uri"
          description:  "URL pointing to an image of the merchant banner.\n\n Image requirements:
                          \n - Hosted on a secure connection (SSL).
                          \n - File size must be less than 10MB.
                          \n - Image must be in JPEG, PNG or GIF format.
                          \n - Both width and height must be between 320px and 1144px."
        createdAt:
          type: "string"
          format: date-time
          description:  "Merchant creation date in ISO timestamp format but with type String."    
    ListMerchant:
      type: "array"
      title: "MerchantList"     
      required: ["merchantId"]
      items:
        type: "object"
        properties:
          "merchantId":
            type: "string"
            format: "UUID"
          "name":
            type: "string"
            description: "Restaurant Name"
          "merchantUrl":
            type: "string"
            description: "Optional URL Optional merchant URL."
    Address:
      type: "object"
      title: "Address"
      required: ["country"]
      properties:
        "country":
          type: "string"
          pattern: "^[A-Z]{2}$"
          description:  "Two-letter ISO 3166-1 alpha-2 country code."
        "state":
          type: "string"
          description:  "State"
        "city":
          type: "string"
          description:  "City"
        "district":
          type: "string"
          description:  "District"
        "street":
          type: "string"
          description:  "Street"                      
        "number":
          type: "string"
          description:  "Number" 
        "postalCode":
          type: "string"
          description:  "Postal Code" 
        "complement":
          type: "string"
          description:  "Complement" 
        "latitude":
          type: "number"
          description:  "Latitude in degrees. Values are restricted to the range [[-90, 90]].\n\n\n\nThe precision should be at least 5 decimal places." 
        "longitude":
          type: "number"
          description:  "Longitude in degrees. Values are restricted to the range [[-180, 180]].\n\n\n\nThe precision should be at least 5 decimal places."

    ContactPhones:
      type: "object"
      title: "Contact Phones"
      required: ["@id","@type"]
      properties:
        "commercialNumber":
          type: "string"
          description:  "Telephone number of the merchant"
        "whatsappNumber":
          type: "string"
          description:  "Whatsapp number of the merchant"         
         
    Service:
      type: "object"
      title: "Service"
      required: ["@id","@type"]
      properties:
        "@id":
          type: "string"
          format: "UUID"
          description:  "Unique Identifier"
        "@type":
          type: "string"
          enum:
          - "SERVICE"
        status:
          type: "string"
          description:  "Indicates if the entity is Avaliable or Unavaliable. Only use this type when you must disable the entity due to an unexpected event and you don't know when the service will be re-established (e.g. do not use for holidays)."    
          enum:
            - AVAILABLE
            - UNAVAILABLE  
        serviceType:
          type: "string"
          description:  "The type of service being offered."
          enum:
            - DELIVERY
            - TAKEOUT
        menuId:
          description:  "The @id value of the `Menu` entity correlated to this `Service` entity."
          $ref: "#/components/schemas/Menu/properties/@id"     
        serviceArea:
          type: "object"
          description:  "A conditional entity to implement (required if the Service entity associated has serviceType set to \"DELIVERY\"). Describes the geographical region in which food can be delivered."
          allOf:
            - $ref: "#/components/schemas/ServiceArea"  
        serviceAreaFee:
          type: "object"
          description:  "A conditional entity to implement (required if the Service entity associated has serviceType set to \"DELIVERY\"). Describes a fee per Radius."
          allOf:
            - $ref: "#/components/schemas/ServiceAreaFee"       
        serviceHours:
          type: "object"
          description:  "A required entity to implement. Describes the time window which users can place orders."
          allOf:
            - $ref: "#/components/schemas/ServiceHours"  

    ServiceArea:
      type: "object"
      title: "Service Area"
      required: ["@id","@type"]
      properties:
        "@id":
          type: "string"
          format: "UUID"
          description:  "A unique identifier of the service area."
        "@type":
          type: "string"
          enum:
          - "SERVICE_AREA"
        polygon:
          type: "array"
          items:
            type: "string"
            pattern: "^([+-]?([0-9]*[.])?[0-9]+[ ]+){2}([+-]?([0-9]*[.])?[0-9]+[ ]*)*$"
            description: "A polygon or multipolygon expressed as a series of three or more space delimited points. It is recommended that the first and last points be the same, but it is not required.\n\n\n\nEach point in a polygon or multipolygon is defined by a latitude point followed by a longitude point. You also must specify the points in a counter-clockwise direction."
        geoMidpointLatitude:    
          type: "number"
          description:  "Indicates the latitude coordinate at the center of the CIRCLE area."
        geoMidpointLongitude:    
          type: "number"
          description:  "Indicates the longitude coordinate at the center of the CIRCLE area."
        geoRadius:    
          type: "integer"
          description:  "Indicates the approximate radius (in meters) of the CIRCLE area."              

          
    ServiceAreaFee:
      type: "object"
      title: "Service Area Fee"
      required: ["@id","@type"]
      properties:
        "@id":
          type: "string"
          format: "UUID"
          description:  "A unique identifier of the entity describing the fee"
        "@type":
          type: "string"
          enum:
          - "SERVICE_AREA_FEE"
        geoMidpointLatitude:    
          type: "number"
          description:  "Indicates the latitude coordinate at the center of the CIRCLE area."
        geoMidpointLongitude:    
          type: "number"
          description:  "Indicates the longitude coordinate at the center of the CIRCLE area."
        value:
          type: "array"
          description:  "Price of the fee per Radius."
          items:
            type: "object"
            allOf:
              - $ref: "#/components/schemas/ServiceAreaFeeValue"  

    ServiceAreaFeeValue:
      type: "object"
      title: "Service Area Fee Value"
      required: ["@id","@type"]
      properties:
        geoRadius:    
          type: "integer"
          description:  "Indicates the approximate radius (in meters) of the CIRCLE area."    
        price:
          type: "object"
          description:  "Price of the fee"
          allOf:
            - $ref: "#/components/schemas/Price"

    Price:
      type: "object"
      title: "Price"
      required: ["@id","@type"]
      properties:
        value:    
          type: "number"
          description:  "Price value. 4 decimals places are accepted"
        currency:
          type: "string"
          pattern: "^[A-Z]{3}$"
          description:  "The 3-letter ISO 4217 currency code."

    ItemPrice:
      type: "object"
      title: "Item Price"
      required: ["@id","@type"]
      properties:
        value:    
          type: "number"
          description:  "The actual price value. 4 decimals places are accepted"
        originalValue:    
          type: "number"
          description:  "The orginal price value. 4 decimals places are accepted"  
        currency:
          type: "string"
          pattern: "^[A-Z]{3}$"
          description:  "The 3-letter ISO 4217 currency code."
     

    ServiceHours:
      type: "object"
      title: "Contact Phones"
      required: ["@id","@type"]
      properties:
        "@id":
          type: "string"
          format: "UUID"
          description:  "A unique identifier of the service hours."
        "@type":
          type: "string"
          enum:
          - "SERVICE_HOURS"
        weekHours:
          type: array
          description:  "A list of the day(s) of the week and time periods for which the service is valid."
          items: 
            type: "object"
            allOf:
              - $ref: "#/components/schemas/Hours"
        holidayHours:
          type: array
          description: "Map of holiday dates, each with optional `timePeriods`. If a date does not have a time period specified, the restaurant will be closed for that date."
          items: 
            type: "object"  
            allOf:
              - $ref: "#/components/schemas/HolidayHours"    
    
    Hours:
      type: "object"
      title: "Hours"
      required: ["@id","@type"]
      properties:
        dayOfWeek: 
          type: string
          description: "Day of the week for which these service hours are valid"
          enum:
            - "MONDAY"
            - "TUESDAY"
            - "WEDNESDAY"
            - "THURSDAY"
            - "FRIDAY"
            - "SATURDAY"
            - "SUNDAY"   
        timePeriods:
          type: "object"
          description:  "Time window from which users' orders can be placed."
          allOf:
            - $ref: "#/components/schemas/TimePeriods"
 

    TimePeriods:
      type: "object"
      title: "TimePeriods"
      required: ["@id","@type"]
      properties:
        startTime: 
          type: string
          format: time
          description: "Indicates the specific time of day in ISO format starting from which users' orders can be placed."
        endTime:
          type: string
          format: time
          description: "Indicates the specific time of day in ISO format beyond which users' orders cannot be placed."            


    HolidayHours:
      type: "object"
      title: "Holiday Hours"
      required: ["@id","@type"]
      properties:
        date:
          type: string
          format: date
          description: "date"
        timePeriods:
          type: "object"
          description:  "hours"
          allOf:
            - $ref: "#/components/schemas/TimePeriods"     

    Item:
      type: "object"
      title: "Contact Phones"
      required: ["@id","@type"]
      properties:
        "@id":
          type: "string"
          format: "UUID"
          description:  "A unique identifier of the item."
        "@type":
          type: "string"
          enum:
          - "ITEM"
        name:
          type: "string"
          description:  "Name"
          maxLength: 500
        description:
          type: "string"
          description:  "Description"
        externalCode:
          type: "string"
          description:  "External Code"
        imageUrl:
          type: "string"
          format: "uri"
          description:  "URL pointing to an image of the item.\n\n Image requirements:
                          \n - Hosted on a secure connection (SSL).
                          \n - File size must be less than 10MB.
                          \n - Image must be in JPEG, PNG or GIF format.
                          \n - Both width and height must be between 320px and 1144px."
        nutritionalInfo:
          type: "object"
          description:  "Nutrition information for the dish."
          allOf:
            - $ref: "#/components/schemas/NutritionalInfo"
        serving:
          type: "integer"
          description:  "Number of servings available for the item."   
        unit:
          type: "string"
          description:  "Unit"
        ean:
          type: "string"
          description:  "EAN"
                 

    NutritionalInfo:
      type: "object"
      title: "Contact Phones"
      required: ["@id","@type"]
      properties:
        description:
          type: "string"
          format: "UUID"
          description:  "Nutrition information in free text. For example \"Contains preservatives\"."
        calories:
          type: "string"
          description:  "The number of calories in Cal, kcal, or kJ, using the following format: value Cal or min-max Cal"
          pattern: "^[0-9]+(\\.[0-9]+)? ?(- ?[0-9]+(\\.[0-9]+)?)? [a-zA-Z]+$"
        allergen:
          type: "array"
          description:  "Allergens of this Item"
          items:
              type: "string"
              enum: 
              - "ALMONDS"
              - "ALPHA_ISOMETHYL_IONONE"
              - "ALCOHOL"
              - "AMYL_CINNAMAL"
              - "ANISE_ALCOHOL"
              - "BARLEY"
              - "BENZYL_ALCOHOL"
              - "BENZYL_BENZOATE"
              - "BENZYL_CINNAMATE"
              - "BENZYL_SALICYLATE"
              - "BRAZIL_NUTS"
              - "BUTYLPHENYL_METHYLPROPIONATE"
              - "CARROTS"
              - "CASHEW_NUTS"
              - "CELERY"
              - "CEREALS_CONTAINING_GLUTEN"
              - "CINNAMAL"
              - "CINNAMYL_ALCOHOL"
              - "CITRAL"
              - "CITRONELLOL"
              - "COCOA"
              - "CORIANDER"
              - "CORN"
              - "COUMARIN"
              - "CRUSTACEANS"
              - "EGGS"
              - "EUGENOL"
              - "EVERNIA_FURFURACEA"
              - "EVERNIA_PRUNASTRI"
              - "FARNESOL"
              - "FISH"
              - "GERANIOL"
              - "GLUTEN"
              - "HAZELNUTS"
              - "HEXYL_CINNAMAL"
              - "HYDROXYCITRONELLAL"
              - "KAMUT"
              - "LACTOSE"
              - "LUPINE"
              - "MACADAMIA_NUTS"
              - "METHYL_2_OCTYNOATE"
              - "MILK"
              - "MOLLUSCS"
              - "MUSTARD"
              - "NO_DECLARED_ALLERGENS"
              - "OAT"
              - "PEANUTS"
              - "PEAS"
              - "PECAN_NUTS"
              - "PISTACHIOS"
              - "POD_FRUITS"
              - "QUEENSLAND_NUTS"
              - "RYE"
              - "SESAME_SEEDS"
              - "SOYBEANS"
              - "SPELT"
              - "SULPHUR_DIOXIDE"
              - "TREE_NUTS"
              - "TREE_NUT_TRACES"
              - "WALNUTS"
              - "WHEAT"
        additives:
          type: "array"
          description:  "Additives of this Item"
          items:
            type: "string"

        suitableDiet:
          type: "array"
          description:  "The dish complies with the described dietary restriction"
          items:
            type: "string"
            enum:
              - "DIABETIC"
              - "GLUTEN_FREE"
              - "HALAL"
              - "HINDU"
              - "KOSHER"
              - "LOW_CALORIE"
              - "LOW_FAT"
              - "LOW_LACTOSE"
              - "LOW_SALT"
              - "VEGAN"
              - "VEGETARIAN"
        isAlcoholic:
          type: "string"
          description:  "Indicates if an item is alcoholic"           
      
    Menu:
      type: "object"
      title: "Contact Phones"
      required: ["@id","@type"]
      properties:
        "@id":
          type: "string"
          format: "UUID"
          description:  "A unique identifier of the menu."
        "@type":
          type: "string"
          enum:
          - "MENU"
        name:
          type: "string"
          description:  "Name"
          maxLength: 500
        description:
          type: "string"
          description:  "Description"
        externalCode:
          type: "string"
          description:  "External Code"          
        disclaimer:
          type: "string"
          description:  "Disclaimer"    
        disclaimerURL:
          type: "string"
          format: "uri"
          description:  "Disclaimer URL"
        categoryId:
          type: "array"
          description:  "A list of the @id values of the child `Category` entities that correspond to this `Menu` entity. Default assumes all `Category` entities are available in this menu."
          items:
            type: "string"
            format: "UUID"


    Category:
      type: "object"
      title: "Contact Phones"
      required: ["@id","@type"]
      properties:
        "@id":
          type: "string"
          format: "UUID"
          description:  "A unique identifier of the category."
        "@type":
          type: "string"
          enum:
          - "CATEGORY"
        index:
          type: "string"
          description:  "Merchant"
        name:
          type: "string"
          description:  "Merchant"
          maxLength: 500
        description:
          type: "string"
          description:  "Merchant"
        imageUrl:
          type: "string"
          description:  "Merchant"
        externalCode:
          type: "string"
          description:  "Merchant"
        status:
          type: "string"
          description:  "Indicates if the entity is Avaliable or Unavaliable. Only use this type when you must disable the entity due to an unexpected event and you don't know when the service will be re-established (e.g. do not use for holidays)."    
          enum:
            - AVAILABLE
            - UNAVAILABLE
        availabilityId:
          type: "array"
          description:  "The @id values of `Availability` entities which provide details on when the category is available. Default assumes a `Category` is available at all times."
          items:
            type: string
            format: "UUID"  
        itemOfferId:
          type: array
          description:  "A list of the @id values of the child `ItemOffer` entities that correspond to this `Category` entity. Default assumes all `ItemOffer` entities are available in this category."
          items:
            anyOf:
            - $ref: "#/components/schemas/ItemOffer/properties/@id"           
                  
    ItemOffer:
      type: "object"
      title: "Contact Phones"
      required: ["@id","@type"]
      properties:
        "@id":
          type: "string"
          format: "UUID"
          description:  "A unique identifier of the item offer."
        "@type":
          type: "string"
          enum:
          - "ITEM_OFFER"
        itemId:
          type: "string"
          description:  "The @id value of the `Item` entity correlated to this `ItemOffer` entity."
        index:
          type: "string"
          description:  "Index"  
        price:
          type: "object"
          description:  "Price of the menu item offer. Original and actual values can be informed, for showing discounts."
          allOf:
            - $ref: "#/components/schemas/ItemPrice"
        availabilityIds:
          type: "array"
          description:  "The @id values of `Availability` entities which provide details on when the menu item offer is available. Default assumes an `ItemOffer` is available at all times."
          items:
            type: string
            format: "UUID"   
        optionGroupsIds:
          type: "array"
          description:  "A list of the @id values of the child `OptionGroup` entities that correspond to this `ItemOffer` entity."
          items:
            allOf:
            - $ref: "#/components/schemas/OptionGroup/properties/@id"                      
       
    OptionGroup:
      type: "object"
      title: "Option Group"
      required: ["@id","@type"]
      properties:
        "@id":
          type: "string"
          format: "UUID"
          description:  "A unique identifier of the option group."
        "@type":
          type: "string"
          enum:
          - "OPTION_GROUP"
        index:
          type: "string"
          description:  "Index"              
        name:
          type: "string"
          description:  "Name"
          maxLength: 500
        description:
          type: "string"
          description:  "Description"
        externalCode:
          type: "string"
          description:  "External Code"
        status:
          type: "string"
          description:  "Indicates if the entity is Avaliable or Unavaliable. Only use this type when you must disable the entity due to an unexpected event and you don't know when the service will be re-established (e.g. do not use for holidays)."    
          enum:
            - AVAILABLE
            - UNAVAILABLE
        minPermitted:
          type: "string"
          description:  "The minimum number of options which should be selected in the option group."
        maxPermitted:
          type: "string"
          description:  "The maximum number of options which should be selected in the option group."
        options:
          type: array
          description: "A list of `Option` entities that correspond to this option group"
          items: 
            type: "object"
            description:  "options"
            allOf:
              - $ref: "#/components/schemas/Option"      

    Option:
      type: "object"
      title: "Contact Phones"
      required: ["@id","@type"]
      properties:
        "@id":
          type: "string"
          format: "UUID"
          description:  "A unique identifier of the option."
        "@type":
          type: "string"
          enum:
          - "OPTION"
        itemId:
          type: "string"
          description:  "The @id value of the `Item` entity correlated to this `Option` entity."
        index:
          type: "string"
          description:  "index"  
        price:
          type: "object"
          description:  "Price of the menu item offer. Original and actual values can be informed, for showing discounts."
          allOf:
            - $ref: "#/components/schemas/ItemPrice"
        maxPermitted:
          type: "string"
          description:  "The maximum quantity of this option which can be selected in the option group."      
          
    Availability:
      type: "object"
      title: "Availability"
      required: ["@id","@type"]
      properties:
        "@id":
          type: "string"
          format: "UUID"
          description:  "A unique identifier of the availability."
        "@type":
          type: "string"
          enum:
          - "AVAILABILITY"       
        startDate:
          type: "string"
          description:  "Start Date"
        endDate:
          type: "string"
          description:  "End Date"
        hours:
            type: "object"
            description:  "Hours"
            allOf:
              - $ref: "#/components/schemas/Hours"   

    Order:
      type: "object"
      title: "Order"
      required: ["@id","@type"]
      properties:
        "@id":
          type: "string"
          format: "UUID"
          description:  "A unique identifier of the order."
        "@type":
            type: "string"
            enum:
              - "DELIVERY"
              - "TAKEOUT"
        displayId:
          type: "string"
          description: "Customer ID order shown on the screen."
        createdAt:
          type: "string"
          format: date-time
          description: "Order creation date in ISO timestamp format." 
        orderTiming:
            type: "string"
            enum:
              - "INSTANT"
              - "SCHEDULED"
        preparationStartDateTime:
            type: "string"
            description: "Order preparation start time."
        merchant:
            type: "object"
            properties:
              "@id":
                allOf:
                  - $ref: "#/components/schemas/Merchant/properties/@id"
              name:
                allOf:
                  - $ref: "#/components/schemas/BasicInfo/properties/name"
        items:
          type: "array"
          items:
            type: "object"
            required: ["@id"]
            properties:
              "@id":
                type: "string"
                format: "UUID"
              index:
                type: "number"
              name:
                type: "string"
              externalCode:
                type: "string"
              unit:
                type: "string"
                enum:
                  - "UNIT"
              ean:
                type: "string"
              quantity:
                type: "number"
              specialInstructions:
                type: "string"
              unitPrice:
                type: "object"
                allOf:
                  - $ref: "#/components/schemas/Price"
              optionsPrice:
                type: "object"
                allOf:
                  - $ref: "#/components/schemas/Price"
              totalPrice:
                type: "object"
                allOf:
                  - $ref: "#/components/schemas/Price"
              options:
                type: "array"
                items:
                  type: "object"
                  required: ["@id"]
                  properties:
                    index:
                      type: "number"
                    "@id":
                      type: "string"
                      format: "UUID"
                    name:
                      type: "string"
                    externalCode:
                      type: "string"
                    unit:
                      type: "string"
                    ean:
                      type: "string"
                      description: ""
                    quantity:
                      type: "number"
                    unitPrice:
                      type: "object"
                      allOf:
                        - $ref: "#/components/schemas/Price"
                    price:
                      type: "object"
                      allOf:
                        - $ref: "#/components/schemas/Price"
                    specialInstructions:
                      type: "string"
        otherFees:
          type: "array"
          items:
            type: "object"
            properties:
              name:
                type: "string"
              type:
                type: "string"
                enum:
                  - "DELIVERY_FEE"
                  - "SERVICE_FEE"
                  - "TIP"
              receivedBy:
                type: "string"
                enum:
                  - "MARKETPLACE"
                  - "MERCHANT"
              receiverDocument:
                type: "string"
                description: "Mandatory for marketplace."
              price:
                type: "object"
                allOf:
                  - $ref: "#/components/schemas/Price"
              observation:
                type: "string"
        discounts:
          type: "array"
          items:
            type: "object"
            properties:
              value:
                type: "number"
              target:
                type: "string"
                enum:
                  - "CART"
                  - "DELIVERY_FEE"
                  - "ITEM"
              targetId:
                type: "string"
                description: "Only mandatory if target field is equal `ITEM`."
              sponsorshipValues:
                type: "array"
                items:
                  type: "object"
                  properties:
                    name:
                      type: "string"
                      enum:
                        - "MARKETPLACE"
                        - "MERCHANT"
                    value:
                      type: "number"
                      format: "decimal"
        total:
          type: "object"
          properties:
            items:
              type: "number"
            otherFees:
              type: "number"
            discount:
              type: "number"
            orderAmount:
              type: "number"
        payments:
          type: "object"
          properties:
            prepaid:
              type: "number"
            pending:
              type: "number"
            methods:
              type: "array"
              items:
                type: "object"
                properties:
                  value:
                    type: "number"
                  currency:
                    allOf:
                      - $ref: "#/components/schemas/Price/properties/currency"
                  type:
                    type: "string"
                    enum:
                      - "ONLINE"
                      - "OFFLINE"
                  method:
                    type: "string"
                    enum:
                      - "CREDIT"
                      - "DEBIT"
                      - "MEAL_VOUCHER"
                      - "FOOD_VOUCHER"
                      - "WALLET"
                      - "PIX"
                      - "CASH"
                      - "OTHER"
                  methodInfo:
                    type: "string"
                  changeFor:
                    type: "number"
                    format: "decimal"
                    description: "Only mandatory for `CASH` method."
        customer:
          type: "object"
          required: ["@id"]
          properties:
            "@id":
              type: "string"
              format: "UUID"
            phone:
              type: "object"
              properties:
                number:
                  type: "string"
                extension:
                  type: "string"
            documentNumber:
              type: "string"
            name:
              type: "string"
            ordersCountOnMerchant:
              type: "number"
        delivery:
          type: "object"
          properties:
            deliveredBy:
              type: "string"
              enum:
                - "MERCHANT"
                - "MARKETPLACE"
            deliveryAddress:
              type: "object"
              properties:
                country:
                  type: "string"
                streetName:
                  type: "string"
                formattedAddress:
                  type: "string"
                streetNumber:
                  type: "string"
                city:
                  type: "string"
                postalCode:
                  type: "string"
                coordinates:
                  type: "object"
                  properties:
                    latitude:
                      type: "number"
                    longitude:
                      type: number
                neighborhood:
                  type: "string"
                state:
                  type: "string"
                complement:
                  type: "string"
            deliveryDateTime:
              type: "string"
              format: date-time
              description: "Delivery date in ISO timestamp format." 
        takeout:
          type: "object"
          properties:
            mode:
              type: "string"
              enum:
                - "DEFAULT"
                - "PICKUP_AREA"
            takeoutDateTime:
              type: "string"
              format: date-time
              description: "Takeout date in ISO timestamp format."
        extraInfo:
          type: "string"
    OrderConfirmed:
      type: "object"
      title: "Order Confirmed"
      properties:
        reason:
          type: "string"
        createdAt: 
          type: "string"
          format: date-time
          description: "Order creation date in ISO timestamp format."
        orderExternalCode:
          type: "string"
    RequestCancelled:
      type: "object"
      title: "Request Cancelled"
      properties:
        reason:
          type: "string"
        code:
          type: "string"
          enum:
            - "ITEM_AVAILABILITY"
        mode:
          type: "string"
          enum:
            - "AUTO"
            - "MANUAL"
        out_of_stock_items:
          type: "array"
          items:
            type: string
        invalid_items:
          type: "array"
          items:
            type: string
    RequestDenied:
      type: "object"
      title: "Request Cancelled"
      properties:
        reason:
          type: "string"
        code:
          type: "string"
          enum:
            - "DISH_ALREADY_DONE"
    SalesByMerchant:
          type: "array"
          required: ["@id"]
          items:
            type: "object"
            properties:
              "@id":
                type: "string"
                format: "UUID"
              orderDate:
                type: "string"
                format: "date-time"
              lastProcessingDate:
                type: "string"
                format: "date-time"
              orderStatus:
                type: "string"
                enum:
                  - "CONCLUDED"
              companyName:
                type: "string"
              documentNumber:
                type: "string"
              businessModelOrder:
                type: "string"
                enum:
                  - "MARKETPLACE"
              payment:
                type: "object"
                properties:
                  type:
                    type: "string"
                    enum:
                      - "ONLINE"
                  method:
                    type: "string"
                    enum:
                      - "CREDIT"
                      - "CASH"
                  brand:
                    type: "string"
                  liability:
                    type: "string"
                    enum:
                      - "MERCHANT"
                  cardNumber:
                    type: "string"
                  billing:
                    type: "object"
                    properties:
                      gmv:
                        type: "number"
                      totalBag:
                        type: "number"
                      deliveryFee:
                        type: "number"
                      benefitMarkeplace:
                        type: "number"
                      benefitMerchant:
                        type: "number"
                      commission:
                        type: "number"
                      acquirerFee:
                        type: "number"
                      deliveryCommission:
                        type: "number"
                      commissionRate:
                        type: "number"
                        format: "double"
                      acquirerFeeRate:
                        type: "number"
                        format: "double"
                      anticipationFee:
                        type: "number"
                      anticipationFeeRate:
                        type: "number"
                        format: "double"
                      totalDebit:
                        type: "number"
                      totalCredit:
                        type: "number"
                  transfer:
                    type: "object"
                    properties:
                      expectedTransferDate:
                        type: "string"
                        format: "date-time"
                      expectedBankAccount:
                        type: "object"
                        properties:
                          bankNumber:
                            type: "string"
                          bankName:
                            type: "string"
                          branchCode:
                            type: "string"
                          branchCodeDigit:
                            type: "string"
                          accountNumber:
                            type: "string"
                          accountNumberDigit:
                            type: "string"

    Event:
      type: "object"
      title: "Event"
      required: ["@id","@type"]
      discriminator:
        propertyName: eventType
        mapping:
          CREATED: '#/components/schemas/EventMetadata'
          CONFIRMED: '#/components/schemas/EventMetadataConfirm'
          DISPATCHED: '#/components/schemas/EventMetadata'
          READY_FOR_PICKUP: '#/components/schemas/EventMetadata'
          PICKUP_AREA_ASSIGNED: '#/components/schemas/EventMetadata'
          CONCLUDED: '#/components/schemas/EventMetadata'
          CANCELLATION_REQUESTED: '#/components/schemas/EventMetadataCancel'
          CANCELLATION_REQUEST_DENIED: '#/components/schemas/EventMetadataCancel'
          CANCELLED: '#/components/schemas/EventMetadataCancel'
      properties:
        eventId:
          type: "string"
          format: "UUID"
          description:  "A unique identifier of the event."  
        eventType:
            type: "string"
            description: "The event type"
            enum:
              - "CREATED"
              - "CONFIRMED"
              - "DISPATCHED"
              - "READY_FOR_PICKUP"
              - "PICKUP_AREA_ASSIGNED"
              - "CONCLUDED"
              - "CANCELLATION_REQUESTED"
              - "CANCELLATION_REQUEST_DENIED"
              - "CANCELLED"
        orderId:
          allOf:
            - $ref: "#/components/schemas/Order/properties/@id"
        orderUrl:
          type: "string"
          format: "uri"
          description: "The URL to get the order details"
        createdAt:
          type: "string"
          format: date-time
          description:  "Order creation date in ISO timestamp format." 

    EventMetadataCancel:
      description: Metadata
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
        - properties:
            metadata: 
              type: object
              description: "Information related to the Event Type"
              properties:
                reason:
                  type: "string"
                  description: "Reason for the cancellation"
                code:
                  type: "string"
                  description: "Cancelation reason code"
                  enum:
                    - "SYSTEM_PROBLEMS"
                    - "REQUEST_IN_DUPLICITY"
                    - "ITEM_UNAVAILABLE"
                    - "RESTAURANT_WITHOUT_DELIVERY_MAN"
                    - "MENU_OUTDATED"
                    - "ORDER_OUTSIDE_THE_DELIVERY_AREA"
                    - "OFF_HOURS_DELIVERY"
                    - "DIFFICULTIES_INTERNAL_RESTAURANT"
                    - "RISK_AREA"
                clientId:
                  type: "string"
                  description: "The URL to get the order details"
     
    EventMetadata:
      description: Metadata
      allOf:
        - $ref: '#/components/schemas/Event'

    EventMetadataConfirm:
      description: Metadata
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
        - properties:
            metadata: 
              type: object
              description: "Information related to the Event Type"
              properties:
                expectedPreparationStartTime:
                  type: "string"
                  format: "date-time"
                  description: "Expected preparation start time after Order Confirmation"
                clientId:
                  type: "string"
                  description: "The URL to get the order details"  

    Repository:
      type: "object"
      title: "Repository"
      required: ["@id","@type"]
      properties:
        document:
          type: "string"
          description:  "Document"
          pattern: "/^\\d{14}$/"
        corporateName:
          type: "string"
          description:  "Corporate Name"
          maxLength: 500
        postalCode:
          type: "string"
          description:  "Postal Code" 
        email:
          type: "string"
          description:  "Contact Email. It is recommended that a contact be made available to deal with specific Open Delivery issues."
        website:    
          type: "string"
          format: "URL"
          description:  "Company Website. It is recommended to have a website (or landing page) with information about how the company works with Open Delivery."
        baseApiUrl:
          type: "string"
          format: "URL"
          description:  "Base URL of the endpoints with the company's data. It will be used by the indexing system to search the establishments under the responsibility of the menu software (see endpoint) and to search public menus (see endpoint)."
        hostCompanyDocument:    
          type: "string"
          description:  "Document"
          pattern: "/^\\d{14}$/"
        TTL:
          type: "integer"
          description:  "Time to Live (in seconds). 
          \nA new request must be done when the TTL expires."

    Generico:
      type: "object"
      title: "Order"
      required: ["@id","@type"]
      properties:
        "@id":
          type: "string"
          format: "UUID"
          description:  "A unique identifier of the order."  
  examples:
    orderExample:
      summary: "Sample Order"
      value:
        id: "4818e72f-2304-466f-9fe7-af08f34ac4ed"
        type: "DELIVERY"
        displayId: "12345"
        createdAt: "2021-05-27T19:38:10.332Z"
        orderTiming: "INSTANT"
        preparationStartDateTime: "2021-05-27T19:45:10.332Z"
        merchant:
          id: "7fb59cb8-5808-40c8-b967-1b3f20ee39cd"
          name: "Plaza Pizza"
        items: [
          {
            id: "d9730653-a8ba-4e85-8dbb-b5597e5ae8d5",
            index: 0,
            name: "Pepperoni",
            externalCode: "12345",
            unit: "UNIT",
            ean: "978020137962",
            quantity: 2,
            specialInstructions: "Extra pepperoni",
            unitPrice: {
              value: 20.00,
              currency: "R$"
            },
            optionsPrice: {
              value: 5.00,
              currency: "R$"
            },
            totalPrice: {
              value: 25.00,
              currency: "R$"
            },  
          options: [
            {
              id: "d9730653-a8ba-4e85-8dbb-b5597e5ae8d5",
              name: "Beverage",
              externalCode: "12345",
              unit: "UNIT",
              ean: "978020137965",
              quantity: 1,
              unitPrice: {
                value: 5.00,
                currency: "R$"
              },
            price: {
              value: 5.00,
              currency: "R$"
            },
              specialInstructions: "None"
            }
          ]
          }
        ] 
        otherFees: [
          {
            name: "Delivery",
            type: "DELIVERY_FEE",
            receivedBy: "MARKETPLACE",
            receiverDocument: "1234",
            price: {
              value: 2.00,
              currency: "R$"
            },
            observation: "None"
          }
        ] 
        discounts: [
          {
            value: 0,
            target: "DELIVERY_FEE",
            sponsorshipValues: {
              name: "MARKETPLACE",
              value: 0
            }
          }
        ] 
        total:
          items: 2
          otherFees: 0
          discount: 0
          orderAmount: 30.00
        payments:
          prepaid: 30.00
          pending: 0
          methods: [
            {
              value: 30.00,
              currency: "R$",
              method: "FOOD_VOUCHER",
              methodInfo: "None"
            }
          ]
        customer:
          id: "d9730653-a8ba-4e85-8dbb-b5697e6ae8d5"
          phone: 
            number: "11999999999"
            extension: "0"
          documentNumber: "12345"
          name: "John"
          ordersCountOnMerchant: 1
        delivery:
          deliveredBy: "MERCHANT"
          deliveryAddress:
            country: "Brazil"
            streetName: "Gomes de Carvalho Street"
            formattedAddress: "string"
            streetNumber: "100"
            city: "São Paulo"
            postalCode: "20111-000"
            coordinates:
              latitude: -23.5475
              longitude: -46.63611
            neighborhood: "Moema"
            state: "SP"
            complement: "102"
            deliveryDateTime: "2021-05-27T20:45:10.332Z"
        extraInfo: "None"
    merchantExample:
      summary: "Merchant Example"
      value:
        lastUpdate: "2021-05-27T20:45:10.332Z"
        TTL: 500
        id: "d9730653-b9ba-4e85-8dbb-b5697e6ae8d5"
        type: "MERCHANT"
        status: "AVAILABLE"
        basicInfo:
          name: "Pizza Plaza"
          document: "18.728.987/0001-20"
          corporateName: "Food Company"
          description: "Food company specializing in pizzas and burgers."
          averageTicket: 90.00
          averagePreparationTime: 20
          minOrderValue:
            value: 20.00
          currency: "R$"
          merchantType: "RESTAURANT"
          merchantCategories: ["HAMBURGUERS", "PIZZA"]
          address:
            country: "Brazil"
            state: "SP"
            city: "São Paulo"
            district: ""
            street: "Plaza Avenue"
            number: "100"
            postalCode: "20111-000"
            complement: "2001"
            latitude: -23.5480
            longitude: -46.63630
          contactEmails: "food@company.com"
          contactPhones: [
            {
              commercialNumber: "11999999999",
              whatsappNumber: "11998888888"
            }
          ]
          logoURL: "https://logo-image.food-company.com"
          bannerURL: "https://banner-image.food-company.com"
          createdAt: "2021-05-10T20:45:10.332Z"
        services: [
          {
            id: "d9730653-a8ba-4e85-8dbb-b5697e6ae8d7",
            type: "SERVICE",
            status: "AVAILABLE",
            serviceType: "DELIVERY",
            menuId: "d9730653-b9ba-4e85-8dbb-b5697e6ae8d5",
            serviceArea: {
              id: "d9730653-b9ba-4e85-8dbb-b589996ae8d5",
              type: "SERVICE_AREA",
              geoMidpointLatitude: -20.2333,
              geoMidpointLongitude: -20.8383,
              geoRadius: 1000
            },
            serviceAreaFee: {
              id: "a9930653-b9ba-4e85-8dbb-b589996ae8d5",
              type: "SERVICE_AREA_FEE",
              geoMidpointLatitude: -20.2333,
              geoMidpointLongitude: -20.8383,
              value: [
                {
                  geoRadius: 2000,
                  price: {
                    value: 5.00,
                    currency: "R$"
                  }
                }
              ]
            },
            serviceHours: {
              id: "a9930653-b9ba-4e85-8dbb-b589996ae8d5",
              type: "SERVICE_HOURS",
              weekHours: [
                {
                  dayOfWeek:
                    "MONDAY",
                    "TUESDAY",
                    "WEDNESDAY",
                    "THURSDAY",
                    "FRIDAY" 
                },
                timePeriods: {
                startTime: "10:00:00.000Z",
                endTime: "18:00:00.000Z"
              },
              ],
              holidayHours: [
                {
                  date: "7/4/2021",
                  timePeriods: {
                    startTime: "12:00:00.000Z",
                    endTime: "17:00:00.000Z"
                  },
                }
              ]
            }
          }
        ]
        items: [
          {
            id: "a9930653-b9ba-4e85-8dbb-b589996ae8d5",
            type: "ITEM",
            name: "Pepperoni",
            description: "Pepperoni pizza with cream cheese.",
            externalCode: "23",
            imageUrl: "https://images.food-place.com/peperroni.png",
            nutritionalInfo: {
              description: "Contains preservatives",
              calories: "2000 Cal",
              allergen: ["GLUTEN"],
              additives: [],
              suitableDiet: "LOW_LACTOSE",
              isAlcoholic: "No"
            }
          }
        ]
        menus: [
          {
            id: "a9930653-b9ba-4e85-8dbb-b589996ae8d5",
            type: "MENU",
            name: "Pizzas",
            description: "Pizza Menu",
            externalCode: "123",
            disclaimer: "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
            disclaimerURL: "https://disclaimer.food-company.com",
            categoryId: ["a9930653-b9ba-4e85-8dbb-b589996ae8d5", "a9930653-b9ba-4e85-8dbb-b549996ae8d6"]
          }
        ]
        category: [
          {
            id: "a9930653-b9ba-4e85-8dbb-b589996ae8e",
            type: "CATEGORY",
            index: "0",
            name: "Pizzas",
            description: "Pizza menu",
            imageUrl: "https://menu-pizza.food-company.com",
            externalCode: "13",
            status: "AVAILABLE",
            availabilityId: ["123", "456"],
            itemOfferId: [
              "a9930653-b9ba-4e85-8dbb-b589996ae8f", "a9930653-b9bc-4f85-8dbb-b589996ae8e"
            ]
          }
        ]
        itemOffers: [
          {
            id: "a9930653-b9ba-4e85-8dbb-b589996ae8f",
            type: "ITEM_OFFER",
            itemId: "a9930653-b9bc-4f85-8dbb-b589996ae8e",
            index: "0",
            price: {
              value: 20.00,
              originalValue: 20.00,
              currency: "R$"
            },
            availabilityIds: [],
            optionGroupsIds: ["a9930653-b9ba-4e85-8dbb-b589996ae8f"]
          }
        ]
        optionGroups: [
          {
            id: "a9930653-b9ca-4e85-8dbb-b589996ae8a",
            type: "OPTION_GROUP",
            index: "0",
            name: "Extras",
            description: "Extra things to put on the pizza.",
            externalCode: "12",
            status: "AVAILABLE",
            minPermitted: "0",
            maxPermitted: "5",
            options: [
              {
                id: "a9530653-b9ca-4e85-8dbb-b589996ae8a",
                type: "OPTION",
                itemId: "1",
                index: "0",
                price: {
                  value: 2.00,
                  originalValue: 2.00,
                  currency: "R$"
                },
                maxPermitted: "2"
              }
            ]
          }
        ]
        availability: [
          {
            id: "a9530653-b9ca-4e85-8dbb-b589996cf8a",
            type: "AVAILABILITY",
            startDate: "05/01/2021",
            endDate: "05/30/2021",
            hours: {
              dayOfWeek:
                "MONDAY",
                "TUESDAY",
                "WEDNESDAY",
                "THURSDAY",
                "FRIDAY" 
            },
            timePeriods: {
                startTime: "10:00:00.000Z",
                endTime: "18:00:00.000Z"
            }
          }
        ]