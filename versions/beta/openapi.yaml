openapi: 3.0.3
info:
  title: Open Delivery API
  version: "'Beta Version'"
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  contact:
    url: https://www.opendelivery.org.br
    x-author: Guilherme Munhoz Camargo - Programmers
  x-logo:
    url: https://gui-camargo.github.io/OD/logo-open-delivery_small.png
    altText: Open Delivery logo

  description: |-
    # ► ------- OPEN DELIVERY ------- ◄

    # └► 'BETA' VERSION WARNING

    > **THIS DOCUMENTATION VERSION CONTAINS INFORMATION THAT HAS NOT YET BEEN OFFICIALLY RELEASED AND IS STILL IN BETA STAGE. THE INFORMATION CONTAINED HERE IS STILL UNDERGOING TESTING AND VALIDATION AND MAY BE SUBJECT TO CHANGE (SEE THE [CHANGELOGS](#section/Table-Of-Contents) SECTION FOR THE LATEST CHANGES).**

    > **TO VIEW THE OFFICIAL RELEASE (CURRENTLY VERSION V1.0.1) FOLLOW THIS [LINK](https://abrasel-nacional.github.io/docs/).** 

    # └► Introduction
      **Open Delivery** proposes to solve the challenge of organizing the flow of information between merchants and **Ordering Applications**, establishing a single communication standard for all, through a set of REST APIs.
      Thus, menus and orders are standardized and customer requests are received in a single place, in an organized and efficient way, allowing the merchant to work with more partners in the delivery environment.

    # └► Table Of Contents

    The documentation is separated as follows:

    **[General and Common Information](#section/-GENERAL-INFO-)**    
    This is information that is valid for all versions that exist so far.
      - **[How to Start](#section/How-to-Start-(Setup-Guide))**
      - **[Open Delivery API Evolution](#section/Open-Delivery-API-Evolution)**
      - **[General Guidelines](#section/General-Guidelines)**
      - **[Error Handling](#section/Error-Handling)**

    **API Reference**: 
      - **[Logistics](#tag/logisticsSection)**
      - **[Reconciliation](#tag/financialReportSection)**
      - **[Contracts](#tag/contractSection)**      

    > As this information is still in beta test stage, breaking changes can occur at any time until release. After release, it will follow semantic versioning from there on out.

    # └► Changelog

      Latest Changes:  

      ### Version [BETA] - Oct 31, 2022

      - **FINANCIAL RECONCILIATION endpoints changes:**

        - [GET /v1/paymentBatchByIds](#operation/paymentBatchId)
                
          - fixed the type of propertie `ordersChargebacks.amount` to object `Price` instead of `string`. 

        - [GET /v1/paymentBatchByDate](#operation/paymentBatchDate)
                
          - changed the structure of the HTPP 200 response body:
          
            from:
            ```
            [{ "summary": {}, "batches": {} }]
            ```
            to:
            ```
            { "summary": {}, "batches": [{}] }
            ```

      - **CONTRACTS endpoints changes:**

        - [GET /v1/contractSummary](#operation/getContractSummary)
        - [POST /v1/signup/contractConditions](#operations/postContractConditions)
        
          - changed the `period` propertie into an array, and renamed to `periods`. 

      ### Version [BETA] - Mar 12, 2022

      - Added new fields in [POST /logistics/delivery](#operation/logisticsNewDelivery) endpoint

        - `notifyPickup`: Used to let the logistic service know that it needs to be notified of the pickup.
        - `notifyConclusion`: Used to let the logistic service know that it needs to be notified of the finalization of the delivery.
        - `combinedOrdersIds`: This field was missing in the documentation.
        
      See the full changelog here:  
      https://github.com/Abrasel-Nacional/Open-Delivery-Beta-Test/blob/main/CHANGELOG_1.1.x.md

    # └► Issues and Suggestions

    In case of doubts, suggestions, improvements, problems or any information regarding the documentation presented here, access the project's Github repo and open a new issue.
       
    > https://github.com/Abrasel-Nacional/docs/issues

    # └► Developer Tools

    This section has some tools to help you implement the Open Delivery API. 

    **Disclaimer**: The tools listed below are tools made available by partners of the Open Delivery project and are the sole responsibility of their authors. The Open Delivery does not provide support for these tools.

    **Schema Validators**

    > [Open Delivery - API Schema Validator (by Programmers IT)](https://programmersit.github.io/opendelivery-api-schema-validator/)     

    # └► Versions

    This section has links to all versions of Open Delivery:

    - **RELEASE**   
    
      Contains the standards already published:  
      **MERCHANT** | **ORDERS**

      - [v1.0.1](https://abrasel-nacional.github.io/docs/) - (Latest release)
      - [v1.0.0](https://abrasel-nacional.github.io/docs/versions/1.0.0/)


    - **BETA**  

      Contains the standards still in tests:  
      **LOGISTICS** | **FINANCIAL RECONCILIATION** | **CONTRACTS**

      - **[BETA VERSION](https://abrasel-nacional.github.io/docs/versions/beta/)**

    - **RELEASE CANDIDATE**

      Contains evolutions and improvements of the standards already published and that will be part of the release version in the future.

      - [RELEASE CANDIDATE VERSION](https://abrasel-nacional.github.io/docs/versions/rc/)

    # 
    # ► ------- GENERAL INFO -------- ◄

    # └► How to Start (Setup Guide)

    The Open Delivery API proposes the implementation of a single communication standard between the various parts that make up the delivery environment. This documentation contains all the definitions needed for interested systems and platforms to implement it.

    Open Delivery does not have a server or baseURL. It is up to each company that implements the standard to use its infrastructure to host the endpoints.

    This section seeks to summarize the Open Delivery documentation as a whole, helping the different parts of the integrations to understand what needs to be developed and parameterized. 

    First, it is recommended to read all the documentation to understand the different processes and flows of the integrations. 

    After reading and understanding the documentation as a whole, companies interested in implementing the standard in their platforms and systems can use this guide to assist in the implementation.

    ## Parties Involved

    - **ORDERING APPLICATION**: It is the platform where the final consumer will choose his items and place the order. It is responsible for reading the merchant data exposed by the SOFTWARE SERVICE and sending the orders to the SOFTWARE SERVICE as well.
              
    - **SOFTWARE SERVICE**: It is the merchant management platform. It is responsible for exposing the merchant data (registration data, service data, and menus) and receiving the orders from the ORDERING APPLICATION.

      > There may also be applications that will perform a hub function, connecting the ORDERING APPLICATION to the SOFTWARE SERVICE. In this context, these intermediate applications, can play the role of both the ORDERING APPLICATION (when communicating with a SOFTWARE SERVICE) as well as the SOFTWARE SERVICE (when communicating with the ORDERING APPLICATION).

    - **LOGISTIC SERVICE**: It is the platform responsible for receiving calls for new deliveries from SOFTWARE SERVICE or ORDERING APPLICATION, and sending the tracking of the deliveries.

    ## Development

    Since Open Delivery is not the host of the APIs, it is up to the companies interested in using the standard to develop the Open Delivery standard APIs in their systems and platforms using this documentation as a guideline. 

    Listed below are the different routes offered by the Open Delivery standard and which party is responsible for being the host of it.
    
    | |ORDERING APPLICATION|SOFTWARE SERVICE|LOGISTIC SERVICE|
    |-|:------------------:|:--------------:|:--------------:|
    |**[AUTHENTICATION](#tag/authentication)**|||||
    |[POST /oauth/token](#operation/getToken)|X||X|
    |--------------------------------||||
    |**[LOGISTICS](#tag/logisticsSection)**|||||
    |[POST /v1/logistics/delivery](#operation/logisticsNewDelivery)|||X|
    |[POST /v1/logistics/orderPicked/{orderId}](#operation/logisticsPicked)|||X|
    |[POST /v1/logistics/finishDelivery/{orderId}](#operation/logisticsFinish)|||X|
    |[POST /v1/logistics/handleProblem/{orderId}](#operation/logisticsProblem)|||X|
    |[POST /v1/logistics/cancel/{orderId}](#operation/logisticsCancel)|||X|
    |[GET /v1/logistics/delivery/{orderId}](#operation/logisticDetails)|||X|
    |[POST /v1/logistics/availability](#tag/logisticPrice)|||X|
    |[POST /v1/deliveryUpdate](#operation/newLogisticEvent) |X|X||
    |--------------------------------||||
    |**[FINANCIAL RECONCILIATION](#tag/financialReportSection)**|||||
    |[GET /v1/paymentBatchByIds](#operation/paymentBatchId)|X|||
    |[GET /v1/paymentBatchByDate](#operation/paymentBatchDate)|X|||
    |--------------------------------||||
    |**[CONTRACTS](#tag/contractSection)**|||||
    |**[Contract Summary](#tag/contractSummaryOverview)**|||||
    |[GET /v1/contractSummary](#operation/getContractSummary)|X|||
    |**[Sign-Up Service](#tag/contractSignupOverview)**|||||
    |[POST /v1/signup/contractConditions](#operation/postContractConditions)|X|||
    |[POST /v1/signup/chosenConditions](#operation/postContractChosenConditions)|X|||
    |[GET /v1/signup/contractStatus](#operation/getContractStatus)|X|||
    |[PUT /v1/signup/merchantAccount](#operation/putMerchantAccount)|X|||

     ## Parametrizations

      > **IMPORTANT: Before reading this section, it is recommended the reading of the complete documentation, for a better understanding of the different required parameterizations.**

      Once the endpoints are implemented, the parties interested in integrating via the Open Delivery stantard should provide some parameters for the other party to correctly connect to its routes. 

      Below is a list of information that each party must provide to the other party for the integrations to occur, i.e., you should consider that the information below will be created as parameters on the endpoint that will call the endpoints.

      - **PARAMETERS IN THE SOFTWARE SERVICE   
      (ORDERING APPLICATION --> SOFTWARE SERVICE)**

        - **{baseURL}** : The {baseURL} is the parameter that indicates the base address, i.e. the constant part of the address, where the routes will be called. The **Ordering Application** can provide up to 2 different base URLs:
          - {baseURL} for authentication: where the token route will be hosted.
          - {baseURL} for the other routes.

          The **Ordering Application** can use only one {baseURL} if it wishes.
        
        - **clientId** and **clientSecret**: The **Ordering Application** is responsible for providing the credentials for authentication to be performed through the authentication endpoint. 
        
            > IMPORTANT: As described in the authentication section of the documentation, credentials must be generated BY MERCHANT and not by **Software Service**, that is, even if several MERCHANTS use the same **Software Service**, each of the MERCHANT will have a unique clientId and clientSecret.

        - **AppId**: It is the unique ID of the **Ordering Application**. It must be generated by the **Ordering Application** itself, and once generated, it must be informed to all the **Software Service**S that it will integrate. Since the **AppId** is a unique key of the **Ordering Application**, you must not create oneAppId** per **Software Service**S, but the same key for all of them.
      > The companies that play the role of hub, intermediating the integrations between the **Ordering Application** and the **Software Service**, must also generate their own **AppId**, different from the **Ordering Application**'s AppId.

      - **PARAMETERS IN ORDERING APPLICATION  
      (SOFTWARE SERVICE --> ORDERING APPLICATION)**

        - **{baseURL} from the `GET /merchant` endpoint:** The **Ordering Application** must be provided with the {baseURL} to access the GET /merchant route to obtain the merchant's information. 

          > IMPORTANT: Each merchant that the **Software Service** works with must have a unique {baseURL}.
        - **apiKey**: If the GET /merchant endpoint is implemented using authentication, it is necessary that the **Software Service** provides the apiKey referring to the entered merchant.
        
        - **Order Event Webhook**: If both parties are going to work with sending order events via webhook, it is necessary to provide the URL of the webhook.   
          Default webhook route:  

          `POST {baseURL}/newEvent`

      - **PARAMETERS IN THE SOFTWARE SERVICE/ORDERING APPLICATION  
      (LOGISTIC SERVICE --> SOFTWARE SERVICE/ORDERING APPLICATION)**

      - **{baseURL}** : The {baseURL} is the parameter that indicates which is the base address, i.e. the constant part of the address, where the routes will be called. The **Logistic Service** can provide up to 2 different base URLs:
          - {baseURL} for authentication: where the token route will be hosted.
          - {baseURL} for the other routes.

          The **Logistic Service** will be able to use only one {baseURL} if it wishes.
        
        - **clientId** and **clientSecret**: The **Logistic Service** is responsible for providing the credentials for authentication to be performed through the authentication endpoint. 
        
            > IMPORTANT: As described in the authentication section of the documentation, the credentials must be generated BY MERCHANT and not by **Software Service**/**Ordering Application**, that is, even if several MERCHANTS use the same **Software Service**/**Ordering Application**, each of the MERCHANT will have a unique clientId and clientSecret.

        - **AppId**: It is a unique identification of the **Logistic Service**. It must be generated by the **Logistic Service** itself and once generated, it must be informed to all the **Software Service**S/**Ordering Application** to which it will integrate. As the **AppId** is a unique key of the **Logistic Service**, it must not be created an **AppId** per **Software Service**S/**Ordering Application**, but the same key must be informed for all.

      - **PARAMETERS IN THE LOGISTIC SERVICE  
      (SOFTWARE SERVICE/ORDERING APPLICATION --> LOGISTIC SERVICE)**

        - **Tracking Event Webhook**: It is necessary to inform the URL of the webhook to receive the tracking and event updates of the delivery order.   
        Default webhook route:  
        `POST {baseURL}/deliveryEvent`

        - **MerchantId**: It is a unique ID of the MERCHANT. Similar to the **AppId** but for Merchant. It must be generated by **Software Service**S and once generated, it must be informed to all **Logistic Services** it will integrate with. Since the **MerchantId** is a unique key, a **MerchantId** must not be created per **Logistic Service**, but the same key must be informed for all. 
        The **Ordering Application** must send the **MerchantId** received previously through its integration with the **Software Service**.
        
    # └► Open Delivery API Evolution

     The **Open Delivery** API seeks to respect [SemVer](https://semver.org/). In this sense, compatible changes should not generate a new major version.

     The API version is composed of 4 elements: major, minor, patch and release candidate. The version v[x] in the URL path is the major element of the API version. The evolution of the version is as follows:

     - **Major**: incompatible, contract-breaking changes (v1.0.0 → v2.0.0)
     - **Minor**: compatible, non-breaking changes (v1.1.0 → v1.2.0)
     - **Patch**: bugfixes, clarifications to specifications, no functional changes (v1.1.1 → v1.1.2)
     - **Release candidate**: pre-release versions of any future patch, minor or major (v1.0.0-rc.1 → v1.0.0-rc.22)
     Non-breaking changes and clarifications to specifications may occur at any time. Customers should be prepared to handle these changes without breaking.

     The following changes are expected and considered backward compatible:

     - Addition of new features to the **Open Delivery** API;
     - Addition of new optional parameters;
     - Addition of new fields in **Open Delivery** API responses;
     - Change of fields sorting;
     - Addition of new elements in enumerations.

    # └► General Guidelines

     - **Date-Time, Date and Time values**: For properties that require a Date-Time, Date or Time value, use the formats specified in date-time, date and time formats (following the [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) specifications)
      
      > **ALL DATES MUST BE SENT USING UTC AS DEFAULT.**   
      > (This way it is simpler for the receiving agent to convert to local time.)

      For example:
      
      **2017-05-01T06:30:00Z** for date-time (As defined by date-time - [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14))\
      **2017-05-01** for date (As defined by full-date - [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14))\
      **08:08:00Z** for time (As defined by full-time - [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14))

    - **IDs**: Use an id property to identify all unique entities within an entity type. An id is a unique identifier of the entity of that type, but across entities, IDs can overlap.

    - **Null** values: Do not use the value null in place of objects. If an object is optional, you must omit it from your feed.

    - **{baseURL}** : Since Open Delivery is not the host of the APIs, it is up to the companies interested in using the standard to provide the {baseURL}. Companies can provide up to two {baseURL}:
        - {baseURL} for authentication: where the **[Get Access Token](#operation/getToken)** route will be hosted.
        - {baseURL} for all other routes.

        > It is also possible to use the same {baseURL} for all routes.

    - **Sending arrays as request parameters:**

      To send an array parameter on a request for any endpoint, use the following format:   
      
      - For `QUERY` parameters:
      ```
      ?param=X&param=Y&param=Z
      ```

      - For `HEADER` parameters:
      ```
          param: X
          param: Y
          param: Z
      ```



    # └► Error Handling

     The API returns HTTP status codes to indicate success or failure of requests.

     `2xx` codes indicate success.  
     `4xx` codes indicate failure caused by the information sent by the client or the current state of the entities.  
     `5xx` codes codes indicate service problems on the API side.

    **General**

    This section gathers errors that could be returned by any endpoints listed in the API.

    `BadRequest`

      * __Meaning__: Invalid request.
      * __HTTP Status Code__: [400 Bad Request](https://tools.ietf.org/html/rfc7231#section-6.5.1).

    `Forbidden`

      * __Meaning__: Authenticated client request that violates some authorization rule.
      * __HTTP Status Code__: [403 Forbidden](https://tools.ietf.org/html/rfc7231#section-6.5.3).

    `NotFound`

      * __Meaning__: Entity not found.
      * __HTTP Status Code__: [404 Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4).


    `InternalServerError`

      * __Meaning__: Unexpected condition when processing requisition.
      * __HTTP Status Code__: [500 Internal Server Error](https://tools.ietf.org/html/rfc7231#section-6.6.1).

    `ServiceUnavailable`

      * __Meaning__: Service is not currently available. Requested service may be under maintenance or outside the operating window.
      * __HTTP Status Code__: [503 Service Unavailable](https://tools.ietf.org/html/rfc7231#section-6.6.4).

    `GatewayTimeout`

      * __Meaning__: Indicates that the service took longer than expected to return.
      * __HTTP Status Code__: [504 Gateway Timeout](https://tools.ietf.org/html/rfc7231#section-6.6.5).
    
    
    #   
    # ► ------- API REFERENCE ------- ◄
#############################################################

tags:
  # Version Tags

  # - name: versionSection
  #   x-displayName: " ►►►► VERSION 1.0.1-rc.3 ◄◄◄◄"
  #   x-traitTag: true
  #   description: |-
  #     All the information listed in this section is planned to be released in version **1.0.1** of the Open Delivery API.

  #     > This version is still in **'Release Candidate'**, so minor changes is expected until release.

  # - name: versionChangelog
  #   x-displayName: "└─► Changelog"
  #   x-traitTag: true
  #   description: |-
  #     Latest Changes:      

  #     ### Version [1.0.1-rc.3]

  #     - Added a new [Working Versions](#tag/versionsSection) section with endpoints so that both the Software Service and the Ordering Application can check which version of the Open Delivery API the other end is using. The endpoints created were:

  #       - [GET /v1/versions/orderingApp](#operation/getOrderingAppVersions)
  #       - [GET /v1/versions/merchant](#operation/getMerchantVersions)

  #     - [GET /merchant](#operation/getMerchant)
  #         - `service` > Changed the `serviceTiming` field by adding fields referring to the scheduling time windows. The structure of the field is now as follows:
      
  #         ```
  #         ...
  #         "serviceTiming":
  #             {
  #                 "timing": ["INSTANT", "SCHEDULED"],
  #                 "schedule":
  #                     {
  #                         "scheduleTimeWindow": "15_MINUTES",
  #                         "scheduleStartWindow": "15_MINUTES",
  #                         "scheduleEndWindow": "15_MINUTES",
  #                     },
  #         ...
  #         ```

  #     - [GET /orders/{orderId}](#operation/ordersDetails)
  #         - `indoor` > renamed the field `table` to `place`.     

  #       ```
  #         {
  #           ...
  #           "indoor": {
  #             "mode": "PLACE",
  #             "indoorDateTime": "2019-08-24T14:15:22Z",
  #             "place": "string"
  #           },
  #           ...
  #         }
  #       ```

  #     #### Other Changes:

  #     - Added a new [Developer Tools](#section/Developer-Tools) section where links to partner tools to help with API development will be listed.

  #     - [Order Overview](#tag/ordersOverview)

  #       - The lifecycle and order flow diagrams have been updated to better reflect the service types.

  #     - Overall revisions of grammatical errors, syntax, examples and descriptions.

  #     ### Version [1.0.1-rc.2]

  #     - Added HTTP Status code 422 on the following endpoints:
  #       - [POST /v1/orders/{orderId}/confirm](#operation/confirmOrder)
  #       - [POST /v1/orders/{orderId}/readyForPickup](#operation/orderReady)
  #       - [POST /v1/orders/{orderId}/dispatch](#operation/dispatchOrder)
  #       - [POST /v1/orders/{orderId}/requestCancellation](#operation/requestCancellation)
  #       - [POST /v1/orders/{orderId}/acceptCancellation](#operation/cancellationAccepted)
  #       - [POST /v1/orders/{orderId}/denyCancellation](#operation/cancellationDenied)

  #     - Added HTTP Status code 204 on the following endpoints:
  #       - [POST /v1/merchantUpdated](#operation/menuUpdated)
  #       - [POST /v1/orderUpdate](#operation/newEvent)
  #       - [POST /v1/orders/{orderId}/acceptCancellation](#operation/cancellationAccepted)
  #       - [POST /v1/orders/{orderId}/denyCancellation](#operation/cancellationDenied)

  #     ### Version [1.0.1-rc.1]

  #     - Added a new endpoint so that **Merchant** can send information related to its [GET /merchant](#operation/getMerchant) endpoint to the **Ordering APPLICATION**:

  #       - [PUT /v1/merchantOnboarding](#operation/putMerchantOnboarding) 

  #     - Added the possibility to indicate orders with scheduled delivery.  
  #     With this the following changes were made:

  #       - [GET /merchant](#operation/getMerchant)
  #         - `service` > Added a new optional field `serviceTiming`, where the merchant can indicate the delivery timing available for that service.

  #       - [GET /orders/{orderId}](#operation/ordersDetails)
  #         - Added `SCHEDULED` option to the `orderTiming` field.

  #         - Added a new property called `schedule` where the delivery window for scheduled orders will be specified with the following structure:
  #           ```
  #               {
  #                 ...
  #                 "schedule": {
  #                   "scheduledDateTimeStart": "2019-08-24T14:15:22Z",
  #                   "scheduledDateTimeEnd": "2019-08-24T14:15:22Z"
  #                   },
  #                 ...
  #               }
  #           ```

  #     ### Version [1.0.1-rc.0]

  #     - Added the `status` property to entities `ItemOffer` and `Option` on the [GET /merchant](#operation/getMerchant) endpoint.

  #     - Removed the **requirement** of the fields:
  #       - [GET /merchant](#operation/getMerchant)
  #         - `menu` > `description`
  #         - `menu` > `disclaimer`
  #         - `category` > `description`
  #         - `optionGroup` > `description`

  #     - Added a new service type called **INDOOR**.  
  #       The following places are affected:

  #       - [GET /merchant](#operation/getMerchant)
  #         - added option `INDOOR` to `type` field of entity `service`.

  #       - [GET /orders/{orderId}](#operation/ordersDetails)
  #         - added new property: `indoor` with the following structure:     

  #       ```
  #         {
  #           ...
  #           "indoor": {
  #             "mode": "DEFAULT",
  #             "indoorDateTime": "2019-08-24T14:15:22Z",
  #             "table": "string"
  #           },
  #           ...
  #         }
  #       ```

  #     See the full changelog here:  
  #     https://github.com/Abrasel-Nacional/Open-Delivery-Beta-Test/blob/main/CHANGELOG.md

  - name: versionSection2
    x-displayName: " ►►►►►► BETA TEST ◄◄◄◄◄◄"
    x-traitTag: true
    description: |-
      All the information listed in this section is planned to be released after testing and validation.

      > This version is still in **'Beta'**, so minor and major changes may still occur until release.

  - name: versionChangelog2
    x-displayName: "└─► Changelog"
    x-traitTag: true
    description: |-

      Latest Changes:  

      ### Version [BETA] - Mar 12, 2022

      - Added new fields in [POST /logistics/delivery](#operation/logisticsNewDelivery) endpoint

        - `notifyPickup`: Used to let the logistic service know that it needs to be notified of the pickup.
        - `notifyConclusion`: Used to let the logistic service know that it needs to be notified of the finalization of the delivery.
        - `combinedOrdersIds`: This field was missing in the documentation.
        
      See the full changelog here:  
      https://github.com/Abrasel-Nacional/Open-Delivery-Beta-Test/blob/main/CHANGELOG_1.1.x.md

  # - name: versionSection3
  #   x-displayName: " ►►►► VERSION 1.2.0-rc.0 ◄◄◄◄"
  #   x-traitTag: true
  #   description: |-
  #     All the information listed in this section is planned to be released in version **1.2.0** of the Open Delivery API.

  #     > This version is still in **'Beta'**, so minor changes may still occur until release.

  # - name: versionChangelog3
  #   x-displayName: "└─► Changelog"
  #   x-traitTag: true
  #   description: |-

  #     Latest Changes:  

  #     ### Version [1.2.0-rc.0] - Apr 19, 2022

  #     * Initial Release

  #     See the full changelog here:  
  #     https://github.com/Abrasel-Nacional/Open-Delivery-Beta-Test/blob/main/CHANGELOG.md

  # Versions
  # - name: versionsSection
  #   x-displayName: "└─■ WORKING VERSIONS"
  #   x-traitTag: true

  # - name: versionsEndpoint
  #   x-displayName: "└───● Versions Listing"
  #   description: |-

  #     Because Open Delivery does not have its own servers and relies on the implementation of the endpoints by the platforms of the companies using the standard, it can happen that two platforms are using different versions of the Open Delivery API.

  #     This section includes endpoints to get the current version that each platform is using.

  # Authentication
  - name: securitySection
    x-displayName: "└─■ SECURITY"
    x-traitTag: true

  - name: authentication
    x-displayName: "└───● Authentication"
    description: |-

      **Open Delivery** suports two types of authentication methods: **OAuth 2** and **apiKey**.

      <SecurityDefinitions />

  # Merchant Tags

  # - name: merchantSection
  #   x-displayName: "└─■ MERCHANT"
  #   x-traitTag: true

  # - name: merchantOverview
  #   x-displayName: "└───● Merchant Overview"
  #   description: |-

  #     The Merchant entity will be the entity used by the **Ordering Application** to fetch all the data from a merchant and display it to the user.
  #     It is the responsibility of the merchant **Software Service** to provide the endpoint and the responsibility of the **Ordering Application** to fetch the information.

  #     ## Merchant API Usage

  #     The merchant must 'choose' a **Software Service**, which will be responsible for exposing its data on the **[GET /v1/merchant](#operation/getMerchant)** endpoint. This endpoint will be used by the ordering system to get the updated merchant infos (BasicInfos, Services and Menus).

  #     <div align="center">
  #       <img src="https://abrasel-nacional.github.io/docs/images/menu_flow.png" />
  #     </div>

  #     The **Ordering Application** can check for merchant updates in the following ways:    
  #     1.	Make a new request on the **[GET /v1/merchant](#operation/getMerchant)** endpoint whenever the TTL expires;  
  #     2.	The **Ordering Application** can optionally provide a **[webhook](#operation/menuUpdated)** , where the merchant **Software Service** can send a merchant update notification;  
  #     3.	If the **Software Service** **[refuses](#operation/cancelDenied)** an order for any reason, upon receiving the refusal, it is recommended that the **Ordering Application** make a new request on the **[GET /v1/merchant](#operation/getMerchant)** endpoint.

  # - name: merchantStructure
  #   x-displayName: └───● Merchant Structure
  #   description: |-

  #     The structure of the Merchant model consists of the following top-level properties:

  #     - **BasicInfo**: Information about the merchant.
  #     - **Services entities**: Timing, location, and conditions of the merchant service.
  #     - **Menu entities**: Details of the merchnat menus.

  #     The following diagram shows how Basic Info, Service, and Menu properties represent a single merchant:

  #     <div align="center">
  #       <img src="https://abrasel-nacional.github.io/docs/images/merchant_structure.png" />
  #     </div>

  #     The following schema lists the properties for the `Merchant` model:

  #     <SchemaDefinition schemaRef="#/components/schemas/MerchantDescription" />     

  #     # BasicInfo

  #     A merchant `BasicInfo` defines properties such as the merchant name, location address, website, description, telephone number, for a merchant that the merchant **Software Service** serves. 
  #     Typically, this data is static.

  #     The following schema lists the properties for the `BasicInfo` type: 

  #     <SchemaDefinition schemaRef="#/components/schemas/BasicInfo" />

  #     # Service

  #     The `Service` defines the capabilities of a delivery organization in a geographic region.
  #     A `Service` defines properties such as the service type (`DELIVERY` or `TAKEOUT`), hours available, and area served.  
  #     Each Service must be linked to a `Menu`, through the `menuId` property.   
  #     `Service` is expected to change.

  #     <div align="center">
  #       <img src="https://abrasel-nacional.github.io/docs/images/merchant_services.png" />
  #     </div>

  #     The following schema lists the properties for the `Service` type: 

  #     <SchemaDefinition schemaRef="#/components/schemas/Service" />

  #     # Menu

  #     A `Menu` is a set of linked properties such as categories, items, offers and availability.  
  #     In order to be displayed by the **Ordering Application**, a `Menu` needs to be linked to a `Service` through the `menuId` property.

  #     <div align="center">
  #       <img src="https://abrasel-nacional.github.io/docs/images/merchant_menus.png" />
  #     </div>

  #     Data in a `Menu` entity is expected to change.

  #     The following schema lists the properties for the `Menu` type: 

  #     <SchemaDefinition schemaRef="#/components/schemas/Menu" />

  #     ## Category

  #     A `Category` is the propertie in which the merchant has to organize its `ItemsOffers` in order 
  #     to make it easier for the user to find what he wants to buy. Categories have statuses and accepts `Availability` entities.

  #     The following schema lists the properties for the `Category` type: 

  #     <SchemaDefinition schemaRef="#/components/schemas/Category" />

  #     ## Item

  #     A `Item` propertie is the menu entity that carries all the general item information, like:
  #     name, description, external code, image, nutricional information, and EAN (European Article Number).
  #     The `Item` can be offered in a `Menu` as a main item or an option. And, for the same store, it can even be reused in different `Menus`.

  #     The following schema lists the properties for the `Item` type: 

  #     <SchemaDefinition schemaRef="#/components/schemas/Item" />

  #     ## ItemOffer

  #     The `ItemOffer` can be considered the offering of a item, and it is used to set the item price and `Availability`.
  #     The `ItemOffer` is a `Item` related to the `Category`.

  #     The following schema lists the properties for the `ItemOffer` type: 

  #     <SchemaDefinition schemaRef="#/components/schemas/ItemOffer" />

  #     ## OptionGroup and Option

  #     The `OptionGroup` is the entity used to group customizations of a product, for example: "Choose your beverage:"
  #     An `OptionGroup` can be shared by several items.
  #     The `OptionGroup` has its own statuses, and can be activated or desactivated when needed. 

  #     `Options` are the complements of a OptionGroup. It can be defined as: "A `Item` related to a `OptionGroup`". 
  #     It is possible to set the `Option` price to 0.00 regardless of whether it is mandatory or optional.

  #     The following schema lists the properties for the `OptionGroup` type: 

  #     <SchemaDefinition schemaRef="#/components/schemas/OptionGroup" />


  #     ## Availability

  #     The `Availability` entity defines specific times and days to control the availability of `Categories` and `Item offerings` within the `Menu`.
  #     It is also possible to set special times for holidays.

  #     The following schema lists the properties for the `Availability` type: 

  #     <SchemaDefinition schemaRef="#/components/schemas/Availability" />

  # - name: merchantEndpoints
  #   x-displayName: "└───● Merchant Endpoint"
  #   description: |-

  # - name: merchantStatus
  #   x-displayName: "└───● Onboarding and Status"
  #   description: |-

  #     This section contains routes for registering and updating the Merchant endpoint information, as well as the read status of this endpoint.

  # - name: merchantUpdate
  #   x-displayName: "└───● Merchant Update"
  #   description: |-
  #     ### Merchant Update Notification

  #     **[Webhook](#operation/menuUpdated)** is sent to notify the **Ordering Application** that an new update has happened on the merchant information.

  #     The **Ordering Application** that implements this webhook, should return an HTTP 200 response code with an empty response body to acknowledge receipt of the webhook event. 
  #     If the merchant **Software Service** does not receive a 200 acknowledgement response, than the webhook event will be resent based on the **Software Service** policies.

  # # Orders Tags

  # - name: ordersSection
  #   x-displayName: "└─■ ORDERS"
  #   x-traitTag: true

  # - name: ordersOverview
  #   x-displayName: └───● Order Overview
  #   description: |-

  #     This overview summarizes the **Open Delivery** Ordering flow and how it interacts with merchant **Software Service** and **Ordering Application**.

  #     ### Order Events

  #     <div align="center">
  #       <img src="https://abrasel-nacional.github.io/docs/images/order_life_cicle.png" />
  #       <br />
  #       <br />
  #       <br />
  #       <br />
  #       <br />
  #     </div>

  #     ### Understanding the Order Flow

  #     <div align="center">
  #       <img src="https://abrasel-nacional.github.io/docs/images/order_integrations2.png" />
  #     </div>

  #     The order flow has the following Macro steps:

  #     ### Order Event Reception

  #     Through Order Events, the '**Ordering Application**' communicates to the '**Software Service**' the existence of a new order, as well as the other events of the order lifecycle.

  #     **Open Delivery** provides two ways for merchant **Software Service** to be aware of new events:

  #     - **[Polling](#tag/ordersPolling)**: 
  #     Receiving events through polling provided by the '**Ordering Application**' is the standard way **Open Delivery** works, and its implementation is mandatory.

  #     - **[Webhook](#tag/ordersWebhook)**:
  #       Optionally it is recommended the implementation of a **webhook** by the merchant **Software Service** for the **Ordering Applications** to send new events directly, ensuring a much faster communication.

  #       > As this implementation is not mandatory, it is recommended that the merchant **Software Service** contacts the **Ordering Application** to find out if it is possible to work with this possibility.

  #     ### Order Details

  #     Once the new order event is received, it is necessary to get the **[order details](#tag/ordersDetails)**, such as items purchased, delivery addresses, and payment methods.

  #     ### Events Updates

  #     After getting the order details, the merchant needs to notify the '**Ordering Application**' of the order progress.

  #     Through the **Open Delivery** API it is possible to:

  #     - **[Confirm](#operation/confirmOrder)** receipt of order;
  #     - Notify that an order is **[ready for pickup](#operation/orderReady)**;
  #     - Notify that an order has been **[dispatched](#operation/dispatchOrder)**.

  #     Whenever a merchant triggers one of these actions, the '**Ordering Application**' will send a new event to the mechart **Software Service**, acknowledging the new order status within the '**Ordering Application**'.

  #     > For `TAKEOUT` orders, it is possible to optionally assign a **pickup area** that will be informed through an event to the merchant.
  #     > This must be provided by the **Ordering Application** interface.

  #     ### Order Cancellation

  #     **Open Delivery** provides API's to send **[cancellation](#tag/ordersCancellation)** requests from either system.
  #     These requests can be accepted or denied depending on the rules that the company has.
  #   x-traitTag: true

  # - name: ordersPolling
  #   x-displayName: └───● Polling (Required)
  #   description: |-

  #     Receiving events via Polling works as follows:

  #     <div align="center">
  #       <img src="https://abrasel-nacional.github.io/docs/images/polling.png" />
  #     </div>

  #     ### Query new order events

  #     In order to receive new order events, the merchant **Software Service** must make requests on the polling endpoint regularly at a certain time interval, determined by the '**Ordering Application**'. 
  #     Whenever there is a new event the response will send the response code 200 with the list of events. If there are no new events, the response will send the response code 204.

  #     > It is important that the **Software Service** performs the requests within the timeframe determined by the **Ordering Application**, as blocking and penalties may occur depending on the application's rules.

  #     **Availability of new events in polling:** 

  #     The **Ordering Application** may have specific rules about the maximum time new events are available in polling before they are removed.
          
  #     > Always check with the **Ordering Application** what the rules are for using the polling service. 

  #     **Duplicate Events and Order Date:**

  #     Eventually the API may return the same event more than once, for example the PLACED event including old orders. For this reason it is important that your application handles the uniqueness of requests and events through id and the date through "createdAt".

  #     Therefore, when receiving an event, you must check the event id and validate that this event (id) has not been processed before. If this event has already been received previously, it must be discarded.

  #     > **Please note**: merchant **Software Services** should only accept a new order or update the status of an order after validating that the event has not been processed before.

  #     ### Acknowledgment Events

  #     When receiving new events, the **Software Service** should always send acknowledgement so that the **Ordering Application** does not send that same event again;

  #     >**Important recommendations**:
  #     >
  #     > Merchants **Software Service** should make an acknowledgment request for each polling request with results.  
  #     > If it receives events that are not used by the itself, it needs to send the acknowledgment of these events anyway so that it is not receiving them every polling again.   
  #     > **Open Delivery** recommends that this be the default treatment for all events not yet mapped in the **Software Service** application.  
  #     > **Software Services** only needs to send acknowledgment of the event once."

  # - name: ordersWebhook
  #   x-displayName: └───● Webhook (Optional)
  #   description: |-

  #     Receiving events via Webhook works as follows:

  #     <div align="center">
  #       <img src="https://abrasel-nacional.github.io/docs/images/webhook.png" />
  #     </div>

  #     ### Order Event Notification
  #     Webhook is sent to notify the merchant **Software Service** that an new order event has happened on the **Ordering Application**.

  #     The merchant **Software Service** that implements this webhook, should return an HTTP `200` response code with an empty response body to acknowledge receipt of the webhook event. 
  #     If the **Ordering Application** does not receive a `200` acknowledgement response, than the webhook event will be resent based on the **Ordering Application** policies.

  #     ### Webhook Headers
  #     **Open Delivery** will include security headers for all requests made to the merchant **Software Service** webhook URL.

  #     **Header Description**

  #     | Header            | Description |
  #     | ----------------- | ----------- |
  #     | X-App-Id          | An Unique Identificator of the **Ordering Application** |
  #     | X-App-MerchantId   | An Unique Identificator of the **Merchant** receiving the order |      
  #     | X-App-Signature   | SHA256 hash of the request body, using the client secret as the key |

        
  #     **Webhook Security** 

  #     Webhook messages are signed so that the merchant **Software Service** can verify that the sender is a valid **Ordering Application**. 
  #     Webhooks requests contain an X-App-Signature header. 
  #     The value of this field is a lowercased hexadecimal HMAC signature of the webhook HTTP request body, using the client secret as a key and SHA256 as the hash function.

  # - name: ordersDetails
  #   x-displayName: └───● Order Details
  #   description: |-

  #     Before confirming or canceling an order, it is necessary to get the order details so that the merchant **Software Service** user can check if he will be able to prepare and deliver this order, such as checking if he has all the necessary items and if he is available to make the delivery to the informed address.

  #     Through the GET /orders/{id} endpoint the merchant **Software Service** can get all the details of an order.

  #     This endpoint returns the code 200 and the content of the request. If an invalid request id or the id of an expired order is entered (depending on the **Ordering Application** policy) the endpoint returns 404.

  #     In this section you will find all the details of the payload of an order:

  #     <SchemaDefinition schemaRef="#/components/schemas/Order" />

  # - name: ordersStatus
  #   x-displayName: └───● Order Event Update
  #   description: |-

  #     Following the order lifecycle, the merchant **Software Service** needs to notify the **Ordering Application** of the upcoming order status.
       
  #     After acknowledging receipt of a new order event (either via polling or webhook) is expected that the **Software Service** explicitly 
  #     **POST [/orders/{orderId}/confirm](#operation/confirmOrder)** or **POST [/orders/{orderId}/requestCancellation](#operation/requestCancellation)** within a time window set by the **Ordering Application**.
  #     Otherwise the order can time out and auto-cancel and the merchant can suffer a penalty based on the **Ordering Application** policy.   
  #     Order acceptances should be posted as quickly as possible to minimize consumer cancellations.

  #     When the order is ready, it is expected that a request will be sent to **[/orders/{orderId}/readyForPickup](#operation/orderReady)**

  #     When the order goes out for Delivery, it is expected that a request will be sent to **[/orders/{orderId}/dispatch](#operation/dispatchOrder)**.

  #     > When sending requests to these endpoints, is expected that the **Ordering Application** notifies the consumer of the progress of the order.

  # - name: ordersCancellation
  #   x-displayName: └───● Order Cancellation
  #   description: |-

  #     An order can be canceled for several reasons and the initiative to cancel an order can come from the merchant, the customer, or the **Ordering Application**.   
  #     It may also happen that the delivery person requests the cancellation in some scenarios, such as when the customer is not found at the delivery address.

  #     > **Cancellation Rules**
  #     >  
  #     > It is expected that both the **Ordering Application** and merchant **Software Service** have their own order cancellation policies and inform their users.

  #     A cancellation request will always be an asynchronous processing, where one party makes a cancellation request and the other accepts or refuses it."

  #     A cancellation request must always contain:

  #     - **reason**: Open text field indicating the reason for the cancellation.
  #     - **code**: An enumerator containing a cancellation reason.  
  #     - **mode**: Field indicating whether the cancellation occurred Automatically or Manually.

  #     The cancellation can be requested by:

  #     ### **Software Service** (Merchant):

  #     <div align="center">
  #       <img src="https://abrasel-nacional.github.io/docs/images/software_cancel_request.png" />
  #     </div>

  #     If the merchant wants to cancel an order, it must make a **POST [/orders/{orderId}/requestCancellation](#operation/requestCancellation)** request.

  #     > **Penalties**
  #     >
  #     > Avoid order cancellations! Excessive cancellations can result in some penalties (depending on the **Ordering Application**'s** policy) such as having the merchant temporarily closed on the platform.

  #     **Cancellation Validation**

  #     The Cancellation request does not guarantee that the order is cancelled. When sending a request [/orders/{orderId}/requestCancellation](#operation/requestCancellation), the **Ordering Application** will send the code 202 (accepted) in response.
  #     This does not yet mean that the request has been cancelled. It means that the request has been accepted and will be processed by the **Ordering Application** cancellation service. As a result of this request, the merchant **Software Service** may receive at the next polling (or via webhook) one of the following events:

  #     - CANCELLATION_REQUEST_DENIED
  #     - CANCELLED

  #     The order should only be Canceled when the CANCELLED event is generated.

  #     > Cancellation rules may vary depending on the timing of the order (before or after confirmation). In some situations it is possible that the **Ordering Application** cancellation service will consult with the consumer on whether or not the consumer accepts the cancellation of the order.

  #     ``` 
  #     Cancellation codes:

  #     - SYSTEMIC_ISSUES
  #     - DUPLICATE_APPLICATION
  #     - UNAVAILABLE_ITEM
  #     - RESTAURANT_WITHOUT_DELIVERY_MAN
  #     - OUTDATED_MENU
  #     - ORDER_OUTSIDE_THE_DELIVERY_AREA
  #     - BLOCKED_CUSTOMER
  #     - OUTSIDE_DELIVERY_HOURS
  #     - INTERNAL_DIFFICULTIES_OF_THE_RESTAURANT
  #     - RISK_AREA
  #     ``` 

  #     > **Important**: It is recommended that the **Ordering Application** makes a new request on the [GET /v1/merchant](#operation/getMerchant) endpoint whenever a merchant makes a Cancellation request.

  #     ### **Ordering Application**

  #     <div align="center">
  #       <img src="https://abrasel-nacional.github.io/docs/images/orderingApp_cancel_request.png" />
  #     </div>

  #     Cancellation by **Ordering Application** can happen by:
  #     ```
  #     code: CONSUMER_CANCELLATION_REQUESTED
  #     ```  

  #     The consumer can request the cancellation of an order. 
  #     Depending on the cancellation rules applied, this option may not be enabled for all merchants. 
  #     It may also only be allowed at certain times, such as before the order is confirmed.
  #     ```
  #     code: OTHER_CANCELLATION_REASON
  #     ```

  #     Ordering Aplications may cancel the order for reasons other than via customer.

  #     **Cancellation Handshake**

  #     When the request occurs the merchant **Software Service** will receive an ORDER_CANCELLATION_REQUESTED event in polling (or via webhook) and must manifest itself through the following endpoints:

  #     **[/orders/{orderId}/acceptCancellation](#operation/cancellationAccepted)**  
  #     **[/orders/{orderId}/denyCancellation](#operation/cancellationDenied)**

  #     This request will be processed by the **Ordering Application**'s** cancellation service (asynchronously) and the merchant **Software Service** will receive in the next polling (or webhook) the following event(s):

  #     CANCELLATION_DENIED or CANCELLED

  # Logistics Tags

  - name: logisticsSection
    x-displayName: └─■ LOGISTICS
    x-traitTag: true
    description: |-
      This section covers the API referring to the operations with `**Logistic Services**`. 

      > The information below are still in release candidate (BETA) and will be tested in the coming months.

  - name: logisticOverview
    x-displayName: └───● Logistic Overview
    description: |-
      Open Delivery provides a set of standards so that both merchants through their **Software Services** and **Ordering Applications** can request a new delivery to a logistics operator and track this delivery.

      ## Logistics API Usage

      Open Delivery's Logistic API aims to standardize the communication between a **requester** - which can be either a **Software Service** or an **Ordering Application** - and a company's software that provides **Logistic Services** (called here **Logistic Service**).  

      > A **Logistic Service** can be either a company that specializes in delivery services or an **Ordering Application** that also provides delivery services. 

      > The Open Delivery logistics API only handles communications between the merchant software (or **Ordering Application**) and the software of the logistics operator. Communications and interfaces with the deliverers at the end are not covered in this documentation, leaving it up to the logistics companies to perform this interaction.

      <div align="center">
        <img src="https://abrasel-nacional.github.io/docs/images/logisticsFlow.png" />
      </div>

      The endpoints provided here, cover the following functionalities:

      ### Delivery Order

      It covers the calling of a new delivery, as well as auxiliary endpoints for reporting the pickup of an order, the completion of the delivery, as well as problem handling and cancellations.

      ### Delivery Tracking
      Webhook to be available at the **requester's** side of the call, in order to receive all order event updates, as well as delivery information updates.

      ### Delivery Availability and Price

      Endpoint with the function of simulating a new delivery, with the purpose of checking if it is possible to make the delivery as well as its prices and times. "

  - name: logisticOrder
    x-displayName: └───● Delivery Order
    description: |-

      ### Events

      This overview summarizes the **Open Delivery** delivery ordering flow and how it interacts with the requester (merchant **Software Services** or **Ordering Applications**) and the **Logistic Services**.

      <div align="center">
        <img src="https://abrasel-nacional.github.io/docs/images/logisticsOrderFlow.png" />
      </div>

      > The `PICKUP_ONGOING`, `DELIVERY_ONGOING` and `RETURNING_TO_MERCHANT` events are events that occur while the delivery man is on the move, so these events can be sent repeatedly in order to update the delivery man's location. The interval at which these events are sent is defined by each **Logistic Service**. 

      > It is important to emphasize that the entire event flow is per Order and even though a delivery may have combined orders (see section below), for all operations in the flow, the id to be used is the `orderId` (initially informed by the requester at the /logistics/delivery endpoint). 

       ### Combining Orders

      The Open Delivery logistics API offers the option of combining more than one order into a single delivery.  
      This can be done on both the **Software Service** (or **Ordering Application**) and the **Logistic Service** sides.

      To combine orders its necessary that at least one delivery is currently in progress.
      When requesting for a new delivery, you need to inform the `deliveryId` field of the ongoing delivery in the `combinedDeliveryId` field of the new request.

      <div align="center">
        <img src="https://abrasel-nacional.github.io/docs/images/logisticsCombined.png" />
      </div>

      > This combination will be subject to acceptance by the **Logistic Service**. 

      The **Logistic Service** may also perform order combination in its software, using its algorithms and processes (provided that the `canCombine` field is entered as `TRUE` in the delivery request). 
      > For this combination no action is required from the **requester**.

      Regardless of the case, the **Logistic Service** must inform in the event webhook the combined orders of the same merchant, through the `combinedOrdersIds` field.


      > Since all event flow is per Order, then in the case of deliveries that have combined orders, an event message must be sent to each of the orders separately. 

      ### Order Rejection and retries for the same order

      If a new delivery order is rejected by the **Logistic Service**, regardless of the reason, the **Software Service** / **Ordering Application** can make a new attempt for the same order (same `orderId` and same `orderDisplayId`). The **Logistic Service** must receive this retry only if the last sent event for this order was the `REJECTED` event. If any other event has already been sent, then the **Logistic Service** will return a duplicate orderId error.

      > The number of retries possible for the same order is defined by each **Logistic Service**.

  - name: logisticTracking
    x-displayName: └───● Delivery Tracking
    description: |-
      Receiving delivery events via Webhook works as follows:

       <div align="center">
         <img src="https://abrasel-nacional.github.io/docs/images/delivery_webhook.png" />
       </div>

       ### Delivery Order Event Notification
       Webhook is sent to notify the merchant **Software Service** (or the **Ordering Application**) that an new order event has happened on the **Logistic Service**.

       The host that implements this webhook, should return an HTTP `200` response code with an empty response body to acknowledge receipt of the webhook event. 
       If the **Logistic Service** does not receive a `200` acknowledgement response, than the webhook event will be resent based on the **Logistic Service** policies.

       ### Webhook Headers
       **Open Delivery** will include security headers for all requests made to the merchant **Software Service** webhook URL.

       **Header Description**

       | Header            | Description |
       | ----------------- | ----------- |
       | X-App-Id          | An Unique Identificator of the **Logistic Service** |
       | X-App-MerchantId  | An Unique Identificator of the **Merchant** receiving the order event |      
       | X-App-Signature   | SHA256 hash of the request body, using the client secret as the key |

         
       **Webhook Security** 

       Webhook messages are signed so that the merchant **Software Service** (or the **Ordering Application**) can verify that the sender is a valid **Logistic Service**. 
       Webhooks requests contain an X-App-Signature header. 
       The value of this field is a lowercased hexadecimal HMAC signature of the webhook HTTP request body, using the client secret as a key and SHA256 as the hash function.

  - name: logisticPrice
    x-displayName: └───● Delivery Availability and Pricing
    description: |-

      Endpoint used to check the availability of a **`Logistic Service`** to make a delivery with addresses and times already defined, as well as to obtain the price for this delivery.

      This endpoint only simulates the acceptance of a new delivery request, using the information available at the time of the call. 

      > The call to this endpoint does not generate any commitment to **Logistic Service** and should only be used as an estimate of the delivery values.  
        To make a real delivery request, call this endpoint.

  - name: logisticDetails
    x-displayName: └───● Delivery Details and History
    description: |-

      Endpoint used to get detailed and history information for a specific delivery order. 

      > This endpoint should not be used as a way to get delivery tracking. This is already covered in the events webhook. The purpose of this route is to receive sporadic calls to get missing information or the complete history of events and problems.
        Misuse of this endpoint can result in blockages by **Logistic Service**.

  # Financial Report Tags

  - name: financialReportSection
    x-displayName: └─■ RECONCILIATION
    x-traitTag: true
    description: |-
      This section covers the API referring to the operations with **`Financial Reconciliation`**. 

      > The information below are still in release candidate (BETA) and will be tested in the coming months.

  - name: financialReport
    x-displayName: └───● Financial Reports
    description: |-

      **Ordering Application** must provide an endpoint where merchants can view information about sales for orders placed and information about the transfer of funds to the merchant.

  # Contract Tags

  - name: contractSection
    x-displayName: └─■ CONTRACT
    x-traitTag: true
    description: |-
      This section covers the API referring to the operations with `Contracts`. 

      > The information below are still in release candidate (BETA) and will be tested in the coming months.

  - name: contractSummaryOverview
    x-displayName: └───● Overview
    description: |-

      Open Delivery is providing a way to standardize the information that is being or was negotiated between the Merchant and the Ordering Application through a set of standard fields, called Contract Summary Sheet.

      The idea is that whenever necessary, the Ordering Application will be able to provide the Merchant with the Contract Summary Sheet so that the Merchant is aware of all the information related to the contract, such as Fees, Payment Information, Contract Duration, and Registration and Contact Information of the parties. 

      The template for the Contract Summary Sheet is provided below and can be downloaded and used by Ordering Applications.

      <div align="center">
        <a href="https://abrasel-nacional.github.io/docs/files/contractSummary_ptbr.docx">Download Contract Summary Sheet Template</a>
      </div>

      The Contract Summary Sheet can also be accessed through the endpoint described below.

  - name: contractSummary
    x-displayName: └───● Endpoint

  - name: contractSignupOverview
    x-displayName: └───● Overview
    description: |-

      Besides standardizing the Contract Summary Sheet, Open Delivery is proposing, through some standard APIs, a way for the Software Services, partnering with Ordering Applications, to create a Hiring Service.

      Through a sequence of steps, the Software Service can display on its platform, information regarding plans and proposals from several Ordering Applications, so that its merchants can compare these rates and plans and choose the one they want to work with.

      The Software Services can then send this contracting intention to the Ordering Applications, facilitating the contract signature and onboarding of these merchants.

      Below are the steps to implement this contracting environment:


      <div align="center">
        <img src="https://abrasel-nacional.github.io/docs/images/signUpService.png" />
      </div>

      **1 -** The Software Services and Ordering Application shall contact each other, to partner so that the Software plataform can access and display its plans and rates, and send contracting intentions. The Software Service should also receive a set of credentials with access to the APIs of this Sign-Up Service.

      **2 -** With the credentials in hand, the Software Service makes a request to the GET endpoint /signup/contractConditions, informing some initial merchant data.  
      The Ordering Application returns a set of plans and rates to the Software Service.

      The Software Service should use this response to display to the Merchant, all the information returned, so that the Merchant has a clear view of everything being offered.

      **3 -** After the Merchant has analyzed and compared the rates and plans, it may indicate an intention to contract with one or more Ordering Applications that the Software Service has partnered with. The Software Service then sends the chosen plans to the Ordering Application, via the POST endpoint /signup/chosenConditions.  
      In response the Software Service will receive a contract ID and instructions for the Merchant to sign the contract (or term of service).

      **4 -** Merchant performs the signing of the contract or term (in an environment external to the Software Service).

      **5 -** Software Service checks the contract Status and conditions through the GET /signup/contractStatus endpoint. It is through this endpoint that the Software will know when the signing has occurred and whether the contracting process is proceeding successfully or not.

      **6 -** Software Service performs the onboarding of the complementary registration information through the PUT /signup/merchantAccount endpoint.

      **7 -** Contract between Merchant and Ordering Application becomes active, and both parties can now send and receive orders.

  - name: contractSignup
    x-displayName: └───● Actions
    description: |-

      Actions to provide a way to consult Ordering Applications contract plans and conditions, as well as signal the intention to contract a specific Ordering Application and finally perform onboarding on its plataform.

x-tagGroups:
  # - name: ".................................................................................................................."
  #   tags:
  #     - versionSection
  #     - versionChangelog
  # - name: ""
  #   tags:
  #     - versionsSection
  #     - versionsEndpoint
  - name: ""
    tags:
      - securitySection
      - authentication
  # - name: ""
  #   tags:
  #     - merchantSection
  # - name: "└──◌ Overview and Structure"
  #   tags:
  #     - merchantOverview
  #     - merchantStructure
  # - name: "└──◌ api"
  #   tags:
  #     - merchantEndpoints
  # - name: "└──◌ Updates and Status"
  #   tags:
  #     - merchantUpdate
  #     - merchantStatus
  # - name: ""
  #   tags:
  #     - ordersSection
  # - name: "└──◌ Overview"
  #   tags:
  #     - ordersOverview
  # - name: └──◌ Events
  #   tags:
  #     - ordersPolling
  #     - ordersWebhook
  # - name: └──◌ Details
  #   tags:
  #     - ordersDetails
  # - name: └──◌ Actions
  #  tags:
      # - ordersStatus
      # - ordersCancellation
  # - name: ".................................................................................................................."
  #   tags:
  #     - versionSection2
  #     - versionChangelog2
  - name: "_______________________________________"
    tags:
      - logisticsSection
  - name: └──◌ Logistics API
    tags:
      - logisticOverview
      - logisticOrder
      - logisticTracking
      - logisticDetails
      - logisticPrice
  - name: "_______________________________________"
    tags:
      - financialReportSection
  - name: "└──◌ FINANCIAL REPORTS"
    tags:
      - - financialReport
  - name: "_______________________________________"
    tags:
      - contractSection
  - name: "└──◌ CONTRACT SUMMARY"
    tags:
      - contractSummaryOverview
      - contractSummary
  - name: "└──◌ CONTRACT SIGN-UP SERVICE"
    tags:
      - contractSignupOverview
      - contractSignup

#############################################################

paths:
  # Versions

  /v1/versions/orderingApp:
    get:
      operationId: "getOrderingAppVersions"
      tags:
        - "versionsEndpoint"
      summary: "Get Current Ordering Application API Version"
      description: |-
        Requests the current version of the endpoints hosted on the **ORDERING APPLICATION** side.
        <br /><br />
        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">HOST:</span> **ORDERING APPLICATION**

        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">DIRECTION:</span>
        <div align="center">
          <img src="https://abrasel-nacional.github.io/docs/images/directionGETSS_OA.png" />
        </div>
      responses:
        "200":
          description: "Successful returns Ordering Application API version."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/VersionOrderingApp"
        "400":
          $ref: "#/components/responses/BadRequest"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /v1/versions/merchant:
    get:
      operationId: "getMerchantVersions"
      tags:
        - "versionsEndpoint"
      summary: "Get Current Merchant API Version"
      description: |-
        Requests the version of the endpoints hosted on the **SOFTWARE SERVICE** side, related to the MERCHANTS.
        <br /><br />
        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">HOST:</span> **ORDERING APPLICATION**

        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">DIRECTION:</span>
        <div align="center">
          <img src="https://abrasel-nacional.github.io/docs/images/directionGETOA_SS.png" />
        </div>
      responses:
        "200":
          description: "Successful returns Merchant API version."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/VersionMerchant"
        "400":
          $ref: "#/components/responses/BadRequest"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  # Authentication

  /oauth/token:
    post:
      operationId: "getToken"
      tags:
        - "authentication"
      summary: "Get Access Token"
      description: |-
        Requests new access token for accessing **Ordering Application** API resources.
        <br /><br />
        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">HOST:</span> **ORDERING APPLICATION**

        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">DIRECTION:</span>
        <div align="center">
          <img src="https://abrasel-nacional.github.io/docs/images/directionPOSTSS_OA.png" />
        </div>
      requestBody:
        $ref: "#/components/requestBodies/Token"
      responses:
        "200":
          description: "Successful returns token request."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "401":
          description: "Bad credentials"
        "500":
          description: "Unexpected error"

  # Merchant

  /v1/merchant:
    get:
      tags:
        - "merchantEndpoints"
      operationId: "getMerchant"
      summary: "Get information of a Merchant"
      security:
        - {}
        - apiKey: []
      description: |-
        Endpoint to get all data of a specific merchant, such as basic info, menus, and services.

         >  This endpoint can optionally require an **apiKey** for authentication.
         >  Check with the **Software Service** that hosts the endpoint whether authentication is required or not.

        <br /><br />
        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">HOST:</span> **SOFTWARE SERVICE**

        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">DIRECTION:</span>
        <div align="center">
          <img src="https://abrasel-nacional.github.io/docs/images/directionGETOA_SS.png" />
        </div>
      responses:
        "200":
          description: "Successful returns Merchant information."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Merchant"
              examples:
                menuExample:
                  $ref: "#/components/examples/merchantExample"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /v1/merchantStatus:
    get:
      parameters:
        - in: "query"
          name: "merchantId"
          required: true
          schema:
            $ref: "#/components/schemas/Merchant/properties/id"
      tags:
        - "merchantStatus"
      operationId: "getMerchantStatus"
      summary: "Health Check on a Merchant"
      security:
        - OAuth2: [od.all]
      description: |-
        Get specific merchant info reading status provided by the **Ordering Application**.
        <br /><br />
        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">HOST:</span> **ORDERING APPLICATION**

        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">DIRECTION:</span>
        <div align="center">
          <img src="https://abrasel-nacional.github.io/docs/images/directionGETSS_OA.png" />
        </div>
      responses:
        "200":
          description: "Successful returns Merchant Status information."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/MerchantStatus"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /v1/merchantOnboarding:
    put:
      tags:
        - "merchantStatus"
      operationId: "putMerchantOnboarding"
      summary: "[NEW] Register / Update Merchant endpoint info"
      security:
        - OAuth2: [od.all]
      description: |-
        Register and update the **Merchant** endpoint [GET /merchant](#operation/getMerchant) information in the **Ordering Application**.
        <br /><br />
        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">HOST:</span> **ORDERING APPLICATION**

        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">DIRECTION:</span>
        <div align="center">
          <img src="https://abrasel-nacional.github.io/docs/images/directionPUTSS_OA.png" />
        </div>
      parameters:
        - in: "query"
          name: "merchantId"
          required: true
          schema:
            type: string
            description: "The Id of the Merchant for whom you want to complete or change registration info."
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/MerchantAPIInfo"
      responses:
        "201":
          description: "Resource has been created."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/MerchantAPIInfo"
        "204":
          description: "Request has been processed. Return has no content."
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  # Orders

  "/v1/events:polling":
    get:
      operationId: pollingEvents
      parameters:
        - name: "x-polling-merchants"
          in: "header"
          required: true
          schema:
            type: array
            description: |-
              Subset of merchants to fetch events from. Must either be omitted or non-empty.
              > At this time, this field will only return data from the authenticated merchant, since authentication occurs per merchant and not per application. This field may be used in future versions.
            items:
              $ref: "#/components/schemas/Merchant/properties/id"
        - name: "eventType"
          in: "query"
          schema:
            type: array
            description: |-
              Desired event types. All other events not selected by group will be automatically acknowledged and omitted from the response. 
              Must either be omitted or non-empty.

              **Event Types definitions:**
              > `CREATED` : Order created.\
              > `CONFIRMED` : Order confirmed.\
              > `DISPATCHED` : Order went out for delivery.\
              > `READY_FOR_PICKUP`: Order ready for pickup.\
              > `PICKUP_AREA_ASSIGNED` : Designated area to pick up the order.\
              > `CONCLUDED` : Order completed.\
              > `CANCELLATION_REQUESTED` : Sent by the **Software Service** to the **Ordering Application**.\
              > `CANCELLATION_REQUEST_DENIED` : It must be sent from the **Ordering Application** to the **Software Service**.\
              > `CANCELLED` : When the order is actually cancelled.\
              > `ORDER_CANCELLATION_REQUEST`: It must be sent from the **Ordering Application** to the **Software Service**.
            items:
              $ref: "#/components/schemas/Event/properties/eventType"

      tags:
        - "ordersPolling"
      summary: "Get New Events"
      security:
        - OAuth2: [od.all]
      description: |-
        "Polls events for any orders from merchants associated with the authenticated user.
        Each event received from this endpoint must be properly acknowledged, otherwise it will continue to be returned on further requests.
        In the body of the request, send an array containing only the event ids. Each request accepts a list of at most 2000 event ids."
        <br /><br />
        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">HOST:</span> **ORDERING APPLICATION**

        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">DIRECTION:</span>
        <div align="center">
          <img src="https://abrasel-nacional.github.io/docs/images/directionGETSS_OA.png" />
        </div>
      responses:
        "200":
          description: "Successful returns list of polled events ."
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
        "204":
          description: "No content."
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /v1/events/acknowledgment:
    post:
      requestBody:
        $ref: "#/components/requestBodies/AckEvents"
      tags:
        - "ordersPolling"
      operationId: pollingAcknowledgment
      summary: "Acknowledge Events"
      security:
        - OAuth2: [od.all]
      description: |-
        Acknowledge a set of events, dismissing them from future polling calls.
        <br /><br />
        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">HOST:</span> **ORDERING APPLICATION**

        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">DIRECTION:</span>
        <div align="center">
          <img src="https://abrasel-nacional.github.io/docs/images/directionPOSTSS_OA.png" />
        </div>
      responses:
        "202":
          $ref: "#/components/responses/Accepted"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /v1/orders/{orderId}:
    get:
      parameters:
        - name: "orderId"
          required: true
          in: "path"
          schema:
            type: "string"
            format: "UUID"
      tags:
        - "ordersDetails"
      operationId: ordersDetails
      summary: "Get Order Details"
      security:
        - OAuth2: [od.all]
      description: |-
        Endpoint to consult the details of an order.
        <br /><br />
        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">HOST:</span> **ORDERING APPLICATION**

        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">DIRECTION:</span>
        <div align="center">
          <img src="https://abrasel-nacional.github.io/docs/images/directionGETSS_OA.png" />
        </div>
      responses:
        "200":
          description: "Successful returns Order information.."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Order"
              # examples:
              #   orderExample:
              #     $ref: "#/components/examples/orderExample"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /v1/orders/{orderId}/confirm:
    post:
      parameters:
        - name: id
          in: "path"
          required: true
          schema:
            type: "string"
            format: "UUID"
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/OrderConfirmed"
      tags:
        - "ordersStatus"
      operationId: confirmOrder
      summary: "Confirm"
      security:
        - OAuth2: [od.all]
      description: |-
        Confirms receipt of order.
        <br /><br />
        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">HOST:</span> **ORDERING APPLICATION**

        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">DIRECTION:</span>
        <div align="center">
          <img src="https://abrasel-nacional.github.io/docs/images/directionPOSTSS_OA.png" />
        </div>
      responses:
        "202":
          $ref: "#/components/responses/Accepted"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /v1/orders/{orderId}/requestCancellation:
    post:
      parameters:
        - name: id
          in: "path"
          required: true
          schema:
            type: "string"
            format: "UUID"
      requestBody:
        $ref: "#/components/requestBodies/CancelRequest"
      tags:
        - "ordersCancellation"
      operationId: "requestCancellation"
      summary: "Request order cancellation"
      security:
        - OAuth2: [od.all]
      description: |-
        Request order cancellation.
        <br /><br />
        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">HOST:</span> **ORDERING APPLICATION**

        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">DIRECTION:</span>
        <div align="center">
          <img src="https://abrasel-nacional.github.io/docs/images/directionPOSTSS_OA.png" />
        </div>
      responses:
        "202":
          $ref: "#/components/responses/Accepted"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /v1/orders/{orderId}/acceptCancellation:
    post:
      parameters:
        - name: id
          in: "path"
          required: true
          schema:
            type: "string"
            format: "UUID"
      tags:
        - "ordersCancellation"
      operationId: "cancellationAccepted"
      summary: "Accept order cancellation"
      security:
        - OAuth2: [od.all]
      description: |-
        Accept order cancellation"
        <br /><br />
        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">HOST:</span> **ORDERING APPLICATION**

        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">DIRECTION:</span>
        <div align="center">
          <img src="https://abrasel-nacional.github.io/docs/images/directionPOSTSS_OA.png" />
        </div>
      responses:
        "200":
          description: Status 200 available for compatibility reasons. Please use status 204 instead.
        "204":
          description: Order cancellation has been confirmed. No response content.
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /v1/orders/{orderId}/denyCancellation:
    post:
      parameters:
        - name: id
          in: "path"
          required: true
          schema:
            type: "string"
            format: "UUID"
      requestBody:
        $ref: "#/components/requestBodies/CancelDenied"
      tags:
        - "ordersCancellation"
      operationId: "cancellationDenied"
      summary: "Deny order cancellation"
      security:
        - OAuth2: [od.all]
      description: |-
        Order Cancellation denied.
        <br /><br />
        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">HOST:</span> **ORDERING APPLICATION**

        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">DIRECTION:</span>
        <div align="center">
          <img src="https://abrasel-nacional.github.io/docs/images/directionPOSTSS_OA.png" />
        </div>
      responses:
        "200":
          description: Status 200 available for compatibility reasons. Please use status 204 instead.
        "204":
          description: Order cancellation has been denied. No response content.
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /v1/orders/{orderId}/readyForPickup:
    post:
      parameters:
        - name: id
          in: "path"
          required: true
          schema:
            type: "string"
            format: "UUID"
      tags:
        - "ordersStatus"
      summary: "Ready For Pickup"
      operationId: "orderReady"
      security:
        - OAuth2: [od.all]
      description: |-
        Informs you that the order is ready for pickup
        <br /><br />
        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">HOST:</span> **ORDERING APPLICATION**

        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">DIRECTION:</span>
        <div align="center">
          <img src="https://abrasel-nacional.github.io/docs/images/directionPOSTSS_OA.png" />
        </div>
      responses:
        "202":
          $ref: "#/components/responses/Accepted"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /v1/orders/{orderId}/dispatch:
    post:
      parameters:
        - name: id
          in: "path"
          required: true
          schema:
            type: "string"
            format: "UUID"
      tags:
        - "ordersStatus"
      operationId: "dispatchOrder"
      summary: "Dispatch"
      security:
        - OAuth2: [od.all]
      description: |-
        Dispatch an Order.
        <br /><br />
        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">HOST:</span> **ORDERING APPLICATION**

        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">DIRECTION:</span>
        <div align="center">
          <img src="https://abrasel-nacional.github.io/docs/images/directionPOSTSS_OA.png" />
        </div>
      responses:
        "202":
          $ref: "#/components/responses/Accepted"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  # Logistics

  /v1/logistics/availability:
    post:
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/DeliveryAvailabilityPrice"
      tags:
        - "logisticPrice"
      summary: "Check delivery availability and prices"
      security: []
      description: |-
        Simulates a new delivery solicitation to know prices and delivery times.
      responses:
        "200":
          description: "Successfully returns delivery availability and price."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/DeliveryAvailabilityPriceResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /v1/logistics/delivery:
    post:
      requestBody:
        $ref: "#/components/requestBodies/DeliveryOrder"
      tags:
        - "logisticOrder"
      operationId: "logisticsNewDelivery"
      summary: "Request new delivery"
      security:
        - OAuth2: [od.all]
      description: "Starts the process of calling a new delivery for an order."
      responses:
        "202":
          description: "Request has been accepted for processing."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/DeliveryOrderResponse"

        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /v1/logistics/delivery/{orderId}:
    get:
      parameters:
        - name: orderId
          in: "path"
          required: true
          schema:
            $ref: "#/components/schemas/DeliveryOrder/properties/orderId"
      tags:
        - "logisticDetails"
      operationId: logisticDetails
      summary: "Get delivery details"
      security: []
      description: |-
        Gets detailed information about the delivery order.
      responses:
        "200":
          description: "Successfully returns the delivery order details."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/DeliveryOrderDetails"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /v1/logistics/orderPicked/{orderId}:
    post:
      parameters:
        - name: orderId
          in: "path"
          required: true
          schema:
            $ref: "#/components/schemas/DeliveryOrder/properties/orderId"
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/DeliveryOrderPicked"
      tags:
        - "logisticOrder"
      operationId: "logisticsPicked"
      summary: "Inform order pickup"
      security:
        - OAuth2: [od.all]
      description: "Inform the **Logistic Service** that the order was picked by delivery man at Merchant"
      responses:
        "200":
          description: "Order pickup has been confirmed."
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /v1/logistics/finishDelivery/{orderId}:
    post:
      parameters:
        - name: orderId
          in: "path"
          required: true
          schema:
            $ref: "#/components/schemas/DeliveryOrder/properties/orderId"
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/DeliveryOrderFinish"
      tags:
        - "logisticOrder"
      operationId: "logisticsFinish"
      summary: "Finish delivery"
      security:
        - OAuth2: [od.all]
      description: "Indicates the completion of a delivery order"
      responses:
        "200":
          description: "Delivery completion has been confirmed. "
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /v1/logistics/handleProblem/{orderId}:
    post:
      parameters:
        - name: orderId
          in: "path"
          required: true
          schema:
            $ref: "#/components/schemas/DeliveryOrder/properties/orderId"
      requestBody:
        $ref: "#/components/requestBodies/DeliveryHandleProblem"
      tags:
        - "logisticOrder"
      operationId: "logisticsProblem"
      summary: "Handle problem"
      security:
        - OAuth2: [od.all]
      description: |-
        Handle problems that may occur during the delivery.

        > Problems can occur at any time during a delivery in progress.  
        It is important that the **Logistic Service** always informs the **Software Service** (or **Ordering Application**) of a problem (via webhook), even if the problem does not require any action by the merchant to solve it.

        > Since there are other ways to solve delivery problems, such as via telephone or messaging applications, the implementation of this endpoint is optional, and the **Logistic Service** will inform the **Software Service** (or **Ordering Application**) of the need to use it.
        <div align="center">
          <img src="https://abrasel-nacional.github.io/docs/images/logisticsProblem.png" />
        </div>

      responses:
        "200":
          description: "The problem has been addressed."
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /v1/logistics/cancel/{orderId}:
    post:
      parameters:
        - name: orderId
          in: "path"
          required: true
          schema:
            $ref: "#/components/schemas/DeliveryOrder/properties/orderId"
      requestBody:
        $ref: "#/components/requestBodies/DeliveryCancel"
      tags:
        - "logisticOrder"
      operationId: "logisticsCancel"
      summary: "Cancel delivery"
      security:
        - OAuth2: [od.all]
      description: |-
        Requests cancellation of a order delivery in progress

        > The **Software Service** (or **Ordering Application**) may request to cancel the delivery of an order at any time.  
        Depending on **Logistic Service** policies, additional fees may apply.

        > If the order being cancelled is in a combined delivery, when cancelling, the order informed will be unlinked from the delivery, not interrupting the progress of the other orders in the same delivery.

        <div align="center">
          <img src="https://abrasel-nacional.github.io/docs/images/logisticsCancel.png" />
        </div>
      responses:
        "202":
          description: "Cancel request has been accepted for processing."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/DeliveryCancelResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  # Financial Report

  /v1/paymentBatchByIds:
    get:
      operationId: "paymentBatchId"
      tags:
        - "financialReport"
      summary: "Get Payments Batches by Id"
      description: |-
        This endpoint is responsible for returning a complete report for one or more payment batches so that the merchant can perform its bank reconciliation..

        It is necessary to inform at least one `batchId` in the request query.

        > **IMPORTANT: All values that will be _credited_ to the merchant must be filled with POSITIVE values. Likewise, all the values that will be __charged__ to the merchant must be filled with NEGATIVE values.**

        <br /><br />
        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">HOST:</span> **ORDERING APPLICATION**

        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">DIRECTION:</span>
        <div align="center">
          <img src="https://abrasel-nacional.github.io/docs/images/directionGETSS_OA.png" />
        </div>
      parameters:
        - name: batchIds
          in: "query"
          required: true
          description: "List of `batchId` to be returned."
          schema:
            type: array
            items:
              type: "string"
              description: batchId
      responses:
        "200":
          description: "Successfully returns the report."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/PaymentsByBatchId"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /v1/paymentBatchByDate:
    get:
      operationId: "paymentBatchDate"
      tags:
        - "financialReport"
      summary: "Get Payments Batches by Dates"
      description: |-
        This endpoint is responsible for returning a summary report for one or more payment batches so that the merchant can perform its bank reconciliation..

        The requisition can be filtered by a date range, or by batch or payment status.

        This endpoint does not return the detailed information on order values and extra charges, only the batch payment information. To get this information use the **Get Payments Batches by Id** endpoint

        > **IMPORTANT: Each system that implements this endpoint will have a different processing capacity, so the number of records that will be returned may vary from one system to another. The enpoint will always return a maximum number of records (which varies from system to system), even if the search has found more records than it returned. Check the `summary` object to know if all the records from the period informed were returned, or if a new search is necessary, with more restrictive filters.**

        > **IMPORTANT: All values that will be _credited_ to the merchant must be filled with POSITIVE values. Likewise, all the values that will be __charged__ to the merchant must be filled with NEGATIVE values.**

        <br /><br />
        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">HOST:</span> **ORDERING APPLICATION**

        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">DIRECTION:</span>
        <div align="center">
          <img src="https://abrasel-nacional.github.io/docs/images/directionGETSS_OA.png" />
        </div>
      parameters:
        - name: "startOrderDate"
          required: false
          in: "query"
          schema:
            type: "string"
            format: "date-time"
            description: "Initial order date for filtering. \n\n(UTC date-time in ISO timestamp format)."
        - name: "endOrderDate"
          required: false
          in: "query"
          schema:
            type: "string"
            format: "date-time"
            description: "Final order date for filtering. \n\n(UTC date-time in ISO timestamp format)."
        - name: "startPaymentDate"
          required: false
          in: "query"
          schema:
            type: "string"
            format: "date-time"
            description: "Initial payment date for filtering. \n\n(UTC date-time in ISO timestamp format)."
        - name: "endPaymentDate"
          required: false
          in: "query"
          schema:
            type: "string"
            format: "date-time"
            description: "Final payment date for filtering \n\n(UTC date-time in ISO timestamp format)."
        - name: "batchStatus"
          required: false
          in: "query"
          schema:
            type: "string"
            description: "Batch Status. This status refers only to the order period, not to the batch payment."
            enum:
              - "OPEN"
              - "CLOSED"
        - name: "paymentStatus"
          required: false
          in: "query"
          schema:
            type: "string"
            description: "Payment Status."
            enum:
              - "SCHEDULED"
              - "PAID"
              - "REJECTED"
              - "WAITING_MERCHANT_PAYMENT"
              - "PAYMENT_RECEIVED"
              - "DEBIT_IN_THE_NEXT_BATCH"
      responses:
        "200":
          description: "Successfully returns the report."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/PaymentsByBatchDate"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  # Contract Summary

  /v1/contractSummary:
    get:
      operationId: "getContractSummary"
      tags:
        - "contractSummary"
      summary: "Get Contract Summary for Merchant"
      description: |-
        This endpoint is responsible for returning the contract summary tab for a particular merchant. The summary sheet is a set of standard fields that give an overview of all the parties and terms negotiated in the contract between the Ordering Application and the Merchant.

        <br /><br />
        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">HOST:</span> **ORDERING APPLICATION**

        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">DIRECTION:</span>
        <div align="center">
          <img src="https://abrasel-nacional.github.io/docs/images/directionGETSS_OA.png" />
        </div>
      parameters:
        - in: "query"
          name: "merchantId"
          required: true
          schema:
            type: string
            description: "The Id of the Merchant for whom you want to get the contract summary."
      responses:
        "200":
          description: "Successfully returns the contract information."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ContractSummaryResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  # Contract Sign-Up

  /v1/signup/contractConditions:
    post:
      operationId: "postContractConditions"
      tags:
        - "contractSignup"
      summary: "Get Contract Conditions for Merchant"
      description: |-
        This endpoint is responsible for returning the contract conditions for a particular merchant. 

        <br /><br />
        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">HOST:</span> **ORDERING APPLICATION**

        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">DIRECTION:</span>
        <div align="center">
          <img src="https://abrasel-nacional.github.io/docs/images/directionPOSTSS_OA.png" />
        </div>
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/ContractConditionsRequest"
      responses:
        "200":
          description: "Successfully returns the contract conditions."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ContractConditionsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /v1/signup/chosenConditions:
    post:
      operationId: "postContractChosenConditions"
      tags:
        - "contractSignup"
      summary: "Send the Contract Conditions chosen by the Merchant"
      description: |-
        This endpoint is responsible for sending to the **Ordering Application** the conditions and terms chosen by the merchant.  

        This endpoint does not oonclude the sign-up process in the ordering application, it only tells them what plans and terms the merchant has chosen.

        <br /><br />
        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">HOST:</span> **ORDERING APPLICATION**

        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">DIRECTION:</span>
        <div align="center">
          <img src="https://abrasel-nacional.github.io/docs/images/directionPOSTSS_OA.png" />
        </div>
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/ContractChosenConditionsRequest"
      responses:
        "200":
          description: "Contract Conditions has been received successfully."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ContractChosenConditionsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /v1/signup/contractStatus:
    get:
      operationId: "getContractStatus"
      tags:
        - "contractSignup"
      summary: "Get Contract Status and Terms"
      description: |-
        This endpoint is responsible for returning the contract conditions for a particular merchant. 

        <br /><br />
        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">HOST:</span> **ORDERING APPLICATION**

        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">DIRECTION:</span>
        <div align="center">
          <img src="https://abrasel-nacional.github.io/docs/images/directionGETSS_OA.png" />
        </div>
      parameters:
        - in: "query"
          name: "contractId"
          required: true
          schema:
            type: string
            description: "The Id of the Contract for whom you want to get the status and terms."
      responses:
        "200":
          description: "Successfully returns the information requested."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ContractStatus"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /v1/signup/merchantAccount:
    put:
      operationId: "putMerchantAccount"
      tags:
        - "contractSignup"
      summary: "Put Merchant Account Onboarding"
      description: |-
        Endpoint to be used to complete the merchant registration in the Ordering Application. 

        This endpoint can also be used to make changes to some registration information. 

        <br /><br />
        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">HOST:</span> **ORDERING APPLICATION**

        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">DIRECTION:</span>
        <div align="center">
          <img src="https://abrasel-nacional.github.io/docs/images/directionPUTSS_OA.png" />
        </div>
      parameters:
        - in: "query"
          name: "merchantId"
          required: true
          schema:
            type: string
            description: "The Id of the Merchant for whom you want to complete or change registration info."
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/MerchantAccount"
      responses:
        "200":
          description: "Request has been processed."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/MerchantAccount"
        "201":
          description: "Resource has been created."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/MerchantAccount"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

x-webhooks:
  # Merchant

  /v1/menuUpdated:
    post:
      summary: New Merchant Update Notification
      description: |-

        > **POST /v1/merchantUpdate** 


        Information about a update in the systems.

        This endpoint can be used in the following ways:

        **1 - Sent with an empty body:**  
        This will force **Ordering Application** to make a new request to the **[GET /merchant](#operation/getMerchant)** endpoint to update all the **merchant** information.

        **2 - Sent with only the `merchantStatus` field:**  
        This will force the opening or closing of the **merchant** within the **Ordering Application**, without forcing a new **[GET /merchant](#operation/getMerchant)** call.

        **3 - Sent only with the `entityType` and `updatedObjects` fields:**  
        This will force the **Ordering Application** to update only the sent objects, without forcing a new **[GET /merchant](#operation/getMerchant)** call.
        > When the `entityType` field is populated, the `updatedObjects` field cannot be empty.

        **4 - Sent the `merchantStatus`, `entityType` and `updatedObjects` fields:**  
        This will force scenarios 2 and 3 to happen simultaneously.

        <br /><br />  
        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">HOST:</span> **ORDERING APPLICATION**  

        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">DIRECTION:</span>
        <div align="center">
          <img src="https://abrasel-nacional.github.io/docs/images/directionPOSTSS_OA.png" />
        </div>
      operationId: menuUpdated
      tags:
        - merchantUpdate
      security:
        - OAuth2: [od.all]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MerchantUpdate"
      responses:
        "200":
          description: Status 200 available for compatibility reasons. Please use status 204 instead.
        "204":
          description: Data was received successfully. No response content.
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  # Order

  /v1/newEvent:
    post:
      parameters:
        - in: "header"
          name: "X-App-Id"
          required: true
          schema:
            type: "string"
            format: "UUID"
            description: "An unique Identificator of the `**Ordering Applications**`. The same ID must be sent to all `**Software Service**s` that implements this webhook."
        - in: "header"
          name: "X-App-MerchantId"
          required: true
          schema:
            $ref: "#/components/schemas/Merchant/properties/id"
            description: "An unique Identificator of the Merchant "
        - in: "header"
          name: "X-App-Signature"
          required: true
          schema:
            type: "string"
            format: "SHA256"
            description: "SHA256 hash of the request body, using the client secret as the key"
      summary: New Order Event Notification
      description: |-
        > **POST /v1/newEvent** 
        Information about a new event in the systems
        <br /><br />
        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">HOST:</span> **SOFTWARE SERVICE**

        <span style="text-decoration:underline; color:#26323880; font-size:13.006px">DIRECTION:</span>
        <div align="center">
          <img src="https://abrasel-nacional.github.io/docs/images/directionPOSTOA_SS.png" />
        </div>
      operationId: newEvent
      tags:
        - ordersWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        "200":
          description: Status 200 available for compatibility reasons. Please use status 204 instead.
        "204":
          description: Data was received successfully. No response content.
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  # Logistic

  /v1/newLogisticEvent:
    post:
      parameters:
        - in: "header"
          name: "X-App-Id"
          required: true
          schema:
            type: "string"
            format: "UUID"
            description: "An unique Identificator of the **`Logistic Service`**. The same ID must be sent to all `**Software Service**s` and `**Ordering Applications**` that implements this webhook."
        - in: "header"
          name: "X-App-MerchantId"
          required: true
          schema:
            $ref: "#/components/schemas/Merchant/properties/id"
            description: "An unique Identificator of the Merchant "
        - in: "header"
          name: "X-App-Signature"
          required: true
          schema:
            type: "string"
            format: "SHA256"
            description: "SHA256 hash of the request body, using the client secret as the key"
      summary: Tracking event webhook
      description: Information about a new event in the systems
      operationId: newLogisticEvent
      tags:
        - logisticTracking
      requestBody:
        $ref: "#/components/requestBodies/DeliveryEvent"
      responses:
        "204":
          description: Data was received successfully. No response content.
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

#############################################################

components:

  securitySchemes:
    apiKey:
      type: apiKey
      description:
        "The apiKey is a key that should be generated by the endpoint's host and passed to its clients.
        Each client of the endpoint can have its own key.
        The creation and content of the key is of responsibility of the endpoint's host.

        > As of the time of this release, only the **[/merchant](#operation/getMerchant)** endpoint can require authentication via apiKey."

      in: header
      name: X-API-KEY

    OAuth2:
      type: oauth2
      description:
        "Oauth2 should be used for all API calls from the **`Software Service`** to the **`Ordering Application`**.\n

        As of the time of this release only one scope will be used for all endpoints: `od.all`.

        ### Generating a Client Credentials Token

        To generate a client credentials token, the merchant **Software Service** must retrieve the **clientId** and **clientSecret** from a **Ordering Application** Company and access the [/oauth/token](#operation/getToken) endpoint.

        > The **Ordering Application** MUST provide one `clientId` and `clientSecret` credentials for each individual merchant it will work with, even if these merchants use the same **Software Service**.

        ### Usage

        The **accessToken** field will contain the token used to authenticate against the **Open Delivery** APIs. Once you’ve obtained this token, you can provide it in the “Authorization” header of requests you make to endpoints that require client credentials scopes.

        The **expiresIn** field indicates the lifetime of the access token, provided in seconds. This should be cached and re-used across requests until (or shortly before) expiration, not re-generated per request.

        ```

        curl \n
        -H 'authorization: Bearer <TOKEN>' \n
        https://{baseURL}/v1/events:polling

        ```

        > Refresh Token is not available at this version."
      flows:
        clientCredentials:
          tokenUrl: oauth/token
          scopes:
            od.all: "Access to all **Open Delivery** APIs"

  requestBodies:
    Token:
      required: true
      content:
        "application/x-www-form-urlencoded":
          schema:
            $ref: "#/components/schemas/TokenRequest"
          examples:
            newToken:
              $ref: "#/components/examples/tokenExample"

    AckEvents:
      required: true
      content:
        "application/json":
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/AckEvents"

    ConfirmedOrder:
      description: "Order confirmation."
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/OrderConfirmed"

    CancelRequest:
      required: true
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/RequestCancelled"

    CancelDenied:
      description: "Request for order cancellation has been denied."
      required: true
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/RequestDenied"

    DeliveryOrder:
      description: "Request for a new delivery order"
      required: true
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/DeliveryOrder"
          # examples:
          #   newOrder:
          #     $ref: "#/components/examples/orderDeliveryExample"

    DeliveryEvent:
      description: "New event"
      required: true
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/DeliveryOrderEvent"
          # examples:
          #   newEvent:
          #     $ref: "#/components/examples/orderDeliveryEventExample"

    DeliveryHandleProblem:
      description: "New event"
      required: true
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/DeliveryHandleProblem"
          # examples:
          #   newEvent:
          #     $ref: "#/components/examples/orderDeliveryEventExample"

    DeliveryCancel:
      description: "New event"
      required: true
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/DeliveryCancel"

  responses:
    OK:
      description: "Request has been processed."
    Accepted:
      description: "Request has been accepted for processing."
    Created:
      description: "Resource has been created."
    NoContent:
      description: "Request has been processed."
    BadRequest:
      description: "Bad Request"
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFound:
      description: "The requested resource was not found."
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
    AccessDenied:
      description: "Authenticated participant request that violates some authorization rule."
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
    UnprocessableEntity:
      description: "Server understands the content type of the request entity, and the syntax of the request entity is correct, but it was unable to process the contained instructions. (Check that the instruction has not been sent before.)"
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
    ServiceUnavailable:
      description: "Service is not currently available. Requested service may be under maintenance or outside the operating window."
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"

  schemas:
    # Versions

    VersionRequest:
      type: "object"
      title: "TokenRequest"
      required: ["client_id", "client_secret", "grant_type"]
      properties:
        client_id:
          type: "string"
          description: "Client identifier provided by the **Ordering Application**."
        client_secret:
          type: "integer"
          description: "Client Secret provided by the **Ordering Application**."
        grant_type:
          type: "string"
          description: "The OAuth grant type. Currently, the only supported grant type is `client_credentials`."
          enum:
            - "client_credentials"

    VersionOrderingApp:
      type: "object"
      properties:
        merchant:
          type: "string"
          description: |-
            Current version for MERCHANT endpoints.

            Existing MERCHANT routes:

            > - "POST /v1/merchantUpdated"
            > - "GET /v1/merchantStatus"
          enum:
            - "1.0.0"
            - "1.0.1"
        order:
          type: "string"
          description: |-
            Current version for ORDER endpoints.

            Existing ORDER routes:

            >  - "GET /v1/events:polling"
            >  - "POST /v1/events/acknowledgment"
            >  - "GET /v1/orders/{orderId}"
            >  - "POST /v1/orders/{orderId}/confirm"
            >  - "POST /v1/orders/{orderId}/readyForPickup"
            >  - "POST /v1/orders/{orderId}/dispatch"
            >  - "POST /v1/orders/{orderId}/requestCancellation"
            >  - "POST /v1/orders/{orderId}/acceptCancellation"
            >  - "POST /v1/orders/{orderId}/denyCancellation"
          enum:
            - "1.0.0"
            - "1.0.1"

    VersionMerchant:
      type: "object"
      properties:
        merchantEndpoint:
          type: "string"
          description: |-
            Current version for the `GET /v1/merchant` endpoint.
          enum:
            - "1.0.0"
            - "1.0.1"
        ordersWebhook:
          type: "string"
          description: |-
            Current version for the `/v1/orderUpdate` webhook.
          enum:
            - "1.0.0"
            - "1.0.1"

    # Authentication

    TokenRequest:
      type: "object"
      title: "TokenRequest"
      required: ["client_id", "client_secret", "grant_type"]
      properties:
        client_id:
          type: "string"
          description: "Client identifier provided by the **Ordering Application**."
        client_secret:
          type: "integer"
          description: "Client Secret provided by the **Ordering Application**."
        grant_type:
          type: "string"
          description: "The OAuth grant type. Currently, the only supported grant type is `client_credentials`."
          enum:
            - "client_credentials"

    TokenResponse:
      type: "object"
      title: "TokenResponse"
      required: ["access_token, token_type"]
      properties:
        access_token:
          type: "string"
          description: "A JWT representing the access token."
        token_type:
          type: "string"
          description: "The token type. Currently, the only supported type is `bearer`"
          enum:
            - "bearer"
        expires_in:
          type: "number"
          format: "double"
          description: "The token expiration time in seconds"

    #Merchant

    Merchant:
      type: "object"
      title: "MenuEntity"
      required:
        [
          "lastUpdate",
          "TTL",
          id,
          "status",
          "basicInfo",
          "services",
          "items",
          "menus",
          "categories",
          "itemOffers",
        ]
      properties:
        lastUpdate:
          type: "string"
          format: "date-time"
          description: "The last modified date and time in ISO timestamp format but with type String. \n\nThis should be used in conjuction of the TTL field to update the information on the ordering aplication. \n\n(UTC date-time in ISO timestamp format)."
          example: "2021-05-27T20:45:10.332Z"
        TTL:
          type: "integer"
          description: "Time to Live (in seconds).
            \nMin: 500
            Max: 86400.
            \nA new request must be done when the TTL expires."
          example: 500
        id:
          type: "string"
          description: |-
            Unique Identifier. Identifies the merchant in the different systems that the merchant will communicate.  
            This id must be generated by the merchant's **`Software Service`**.

            > To avoid duplicates between different merchants it is recommended that the software creates the merchantId using:  
            > `Merchant Document + UUID`

            > If this is not possible, it is recommended to at least use a UUID.

          minLength: 36
          maxLength: 100
        status:
          type: "string"
          description: "Indicates if the Merchant is Avaliable or Unavaliable. Only use this type when you must close (disable) the merchant due to an unexpected event and you don't know when the service will be re-established (e.g. do not use for holidays)."
          enum:
            - AVAILABLE
            - UNAVAILABLE
          example: "AVAILABLE"
        basicInfo:
          type: "object"
          description: "A required entity to implement. Describes basic info of a merchant."
          allOf:
            - $ref: "#/components/schemas/BasicInfo"
        services:
          type: "array"
          description: "A required entity to implement. Describes food ordering services details for a merchant."
          items:
            $ref: "#/components/schemas/Service"
        menus:
          type: "array"
          description: "A required entity to implement. Describes an array of menus."
          items:
            $ref: "#/components/schemas/Menu"
        categories:
          type: "array"
          description: "A required entity to implement. Describes an array of sections in the menu where `ItemOffers` will be showed."
          items:
            type: "object"
            $ref: "#/components/schemas/Category"
        itemOffers:
          type: "array"
          description: "A required entity to implement. Describes an array of offers for the `Items`."
          items:
            type: "object"
            $ref: "#/components/schemas/ItemOffer"
        items:
          type: "array"
          description: "A required entity to implement. Describes an array of items. To be used with an `ItemOffer` or an `Option`."
          items:
            $ref: "#/components/schemas/Item"
        optionGroups:
          type: "array"
          description: "An optional entity to implement. Describes additional options of an `ItemOffer`."
          items:
            $ref: "#/components/schemas/OptionGroup"
        availabilities:
          type: "array"
          description: "An optional entity to implement. Describes the time period during which a `Category` or an `ItemOffer` entity is served."
          items:
            type: "object"
            allOf:
              - $ref: "#/components/schemas/Availability"

    MerchantDescription:
      type: "object"
      title: "MenuEntity"
      required:
        [
          "lastUpdate",
          "TTL",
          id,
          "status",
          "basicInfo",
          "services",
          "items",
          "menus",
          "categories",
          "itemOffers",
        ]
      properties:
        lastUpdate:
          type: "string"
          format: "date-time"
          description: "The last modified date and time. \n\nThis should be used in conjuction of the TTL field to update the information on the ordering aplication. \n\n(UTC date-time in ISO timestamp format)."
        TTL:
          type: "integer"
          description: "Time to Live (in seconds).
            \nMin: 500
            Max: 86400.
            \nA new request must be done when the TTL expires."
        id:
          type: "string"
          format: "UUID"
          description:
            "Unique Identifier. Must be formatted with `Merchant Document + UUID`
            \n\n This id must be generated by the company responsible for the merchant's menu and have to be informed in the Order object by the ***Ordering Application***."
        status:
          type: "string"
          description: "Indicates if the entity is Avaliable or Unavaliable. Only use this type when you must disable the entity due to an unexpected event and you don't know when the service will be re-established (e.g. do not use for holidays)."
          enum:
            - AVAILABLE
            - UNAVAILABLE
        basicInfo:
          type: "object"
          description: "See: **[BasicInfo](#section/BasicInfo)**
            \n\n A required entity to implement. Describes basic info of a merchant."
        services:
          type: "array"
          description: "See: **[Service](#section/Service)**
            \n\n A required entity to implement. Describes food ordering services details for a merchant."
          items:
            type: "object"
        menus:
          type: "array"
          description: "See: **[Menu](#section/Menu)**
            \n\n A required entity to implement. Describes an array of menus."
          items:
            type: "object"
        items:
          type: "array"
          description: "See: **[Item](#section/Menu/Item)**
            \n\n A required entity to implement. Describes an array of items. To be used with an `ItemOffer` or an `OptionGroups`."
          items:
            type: "object"
        categories:
          type: "array"
          description: "See: **[Category](#section/Menu/Category)**
            \n\n A required entity to implement. Describes an array of sections in the menu where `ItemOffers` will be showed."
          items:
            type: "object"
        itemOffers:
          type: "array"
          description: "See: **[ItemOffers](#section/Menu/ItemOffer)**
            \n\n A required entity to implement. Describes an array of offers for the `Items`."
          items:
            type: "object"
        optionGroups:
          type: "array"
          description: "See: **[Options](#section/Menu/OptionGroup-and-Option)**
            \n\n An optional entity to implement. Describes additional options of an `ItemOffer`."
          items:
            type: "object"
        availabilities:
          type: "array"
          description: "See: **[Availability](#section/Menu/Availability)**
            \n\n An optional entity to implement. Describes the time period during which a `Category` or an `ItemOffer` entity is served."
          items:
            type: "object"

    BasicInfo:
      type: "object"
      title: "BasicInfo"
      required:
        [
          "name",
          "document",
          "corporateName",
          "description",
          "averagePreparationTime",
          "minOrderValue",
          "merchantType",
          "merchantCategories",
          "address",
          "contactEmails",
          "contactPhones",
          "logoImage"
        ]
      properties:
        name:
          type: "string"
          description: "Merchant Public Name"
          maxLength: 500
          example: "Pizza Plaza"
        document:
          type: "string"
          description: "Merchant Document"
          pattern: "/^\\d{14}$/"
          example: "22815773000169"
        corporateName:
          type: "string"
          description: "Merchant Corporate Name"
          maxLength: 500
          example: "Food Company"
        description:
          type: "string"
          description: "Merchant Description"
          example: "Food company specializing in pizzas."
        averageTicket:
          type: "number"
          format: "decimal"
          description: "Average Ticket. Can be used to show the price range of items available at the merchant. It is not mandatory, but recommended to be used."
          example: 90
        averagePreparationTime:
          type: "number"
          format: "double"
          description: "Average amount of time preparing an order takes, in minutes."
          example: 20
        minOrderValue:
          type: "object"
          description: "Minimum order value that the merchant accepts."
          allOf:
            - $ref: "#/components/schemas/Price"
        merchantType:
          type: "string"
          description: "Merchant Type.

            Currently, only `RESTAURANT` is accepted."
          enum:
            - "RESTAURANT"
          example: "RESTAURANT"
        merchantCategories:
          type: "array"
          description: "Merchant Categories"
          items:
            type: "string"
            enum:
              - "BURGERS"
              - "PIZZA"
              - "FAST_FOOD"
              - "HOT_DOG"
              - "JAPANESE"
              - "DESSERTS"
              - "AMERICAN"
              - "ICE_CREAM"
              - "BBQ"
              - "SANDWICH"
              - "MEXICAN"
              - "BRAZILIAN"
              - "PASTRY"
              - "ARABIAN"
              - "COMFORT_FOOD"
              - "VEGETARIAN"
              - "VEGAN"
              - "BAKERY"
              - "HEALTHY"
              - "ITALIAN"
              - "CHINESE"
              - "JUICE_SMOOTHIES"
              - "SEAFOOD"
              - "CAFE"
              - "SALADS"
              - "COFFEE_TEA"
              - "PASTA"
              - "BREAKFAST_BRUNCH"
              - "LATIN_AMERICAN"
              - "CONVENIENCE"
              - "PUB"
              - "HAWAIIAN"
              - "EUROPEAN"
              - "FAMILY_MEALS"
              - "FRENCH"
              - "INDIAN"
              - "PORTUGUESE"
              - "SPANISH"
              - "GOURMET"
              - "KIDS_FRIENDLY"
              - "SOUTH_AMERICAN"
              - "SPECIALTY_FOODS"
              - "ARGENTINIAN"
              - "PREMIUM"
              - "AFFORDABLE_MEALS"
          example: ["PIZZA", "FAMILY_MEALS", "PREMIUM"]
        address:
          type: "object"
          description: "Merchant Address"
          allOf:
            - $ref: "#/components/schemas/Address"
        contactEmails:
          type: "array"
          description: "Merchant Contact Emails"
          items:
            type: "string"
          example: ["food@company.com"]
        contactPhones:
          type: "object"
          description: "Merchant Contact Phones"
          allOf:
            - $ref: "#/components/schemas/ContactPhones"
        logoImage:
          type: "object"
          description: "Image to be used as the merchant logo"
          allOf:
            - $ref: "#/components/schemas/Image"
        bannerImage:
          type: "object"
          description: "Image to be used as the merchant banner (the banner display depends on the client application interface)"
          allOf:
            - $ref: "#/components/schemas/Image"
        createdAt:
          type: "string"
          format: date-time
          description: "Merchant creation date and time. \n\n(UTC date-time in ISO timestamp format)."

    ListMerchant:
      type: "array"
      title: "MerchantList"
      required: ["merchantId", "name"]
      items:
        type: "object"
        properties:
          "merchantId":
            type: "string"
            format: "UUID"
          "name":
            type: "string"
            description: "Restaurant Name"
          "merchantURL":
            type: "string"
            description: "Optional merchant URL."

    Service:
      type: "object"
      title: "Service"
      required: [id, "status", "serviceType", "menuId", "serviceHours"]
      properties:
        id:
          type: "string"
          format: "UUID"
          description: "Unique Identifier"
          example: "f078e8e2-3044-4eec-b4a8-8359810de123"
        status:
          type: "string"
          description: "Indicates if the entity is Avaliable or Unavaliable. Only use this type when you must disable the entity due to an unexpected event and you don't know when the service will be re-established (e.g. do not use for holidays)."
          enum:
            - AVAILABLE
            - UNAVAILABLE
          example: "AVAILABLE"
        serviceType:
          type: "string"
          description: "The type of service being offered."
          enum:
            - DELIVERY
            - TAKEOUT
            - INDOOR
          example: "DELIVERY"
        serviceTiming:
          type: "object"
          title: "Service Timing"
          description: "Information regarding the accepted service times."
          properties:
            timing:
              type: "array"
              description: "Indicates whether the service accepts orders with immediate delivery or scheduled delivery. Please inform all accepted types in the field. \n\nIf not informed, defaults to the `INSTANT` option."
              items:
                type: "string"
                enum:
                  - INSTANT
                  - SCHEDULED
              example: ["INSTANT", "SCHEDULED"]
            schedule:
              type: "object"
              description: "Information regarding the time windows for scheduling."
              required:
                [scheduleTimeWindow, scheduleStartWindow, scheduleEndWindow]
              properties:
                scheduleTimeWindow:
                  type: string
                  description: |-
                    Time window where scheduling will be possible. 
                    
                    > Example: If `15_MINUTES` is chosen, then the available scheduling times will be displayed every 15 minutes (e.g. 9:15, 9:30, 9:45, 10:00).
                  enum:
                    - 15_MINUTES
                    - 30_MINUTES
                    - 45_MINUTES
                    - 60_MINUTES
                    - 90_MINUTES
                    - 120_MINUTES
                scheduleStartWindow:
                  type: string
                  description: |-
                    Informs how long after the merchant has opened (considering the `serviceHours` entity) the first schedule time will be displayed.

                    > Example: Service starts at 9:00 and the option `45_MINUTES` was entered, then the first available time for scheduling will be 9:45.
                  enum:
                    - 15_MINUTES
                    - 30_MINUTES
                    - 45_MINUTES
                    - 60_MINUTES
                    - 90_MINUTES
                    - 120_MINUTES
                scheduleEndWindow:
                  type: string
                  description:  |-
                    Informs how long before the merchant closes (considering the `serviceHours` entity) the last schedule time will be displayed.

                    > Example: Service ends at 23:00 and the option `60_MINUTES` was entered, then the last available time for scheduling will be 22:00.                
                  enum:
                    - 15_MINUTES
                    - 30_MINUTES
                    - 45_MINUTES
                    - 60_MINUTES
                    - 90_MINUTES
                    - 120_MINUTES
        menuId:
          description: "The id value of the `Menu` entity correlated to this `Service` entity."
          type: string
          format: UUID
          example: "f627ccdc-6789-456f-a782-148538d5035b"
        serviceArea:
          type: "object"
          description: "A conditional entity to implement (required if the Service entity associated has serviceType set to `DELIVERY`). Describes the geographical region in which food can be delivered."
          allOf:
            - $ref: "#/components/schemas/ServiceArea"
        serviceHours:
          type: "object"
          description: "A required entity to implement. Describes the time window which users can place orders."
          allOf:
            - $ref: "#/components/schemas/ServiceHours"

    ServiceArea:
      type: "object"
      title: "Service Area"
      required: [id]
      properties:
        id:
          type: "string"
          format: "UUID"
          description: "A unique identifier of the service area."
          example: "01339e6d-520b-429e-bc7c-dcfd2df42278"
        polygon:
          type: "array"
          description: "If the `polygon` is chosen to be used, `geoRadius` is not required.\n\n\n\nA polygon or multipolygon expressed as a series of three or more space delimited points."
          items:
            allOf:
              - $ref: "#/components/schemas/Polygon"
        geoRadius:
          type: "object"
          description: "If the `geoRadius` is chosen to be used, `polygon` is not required. Indicates the approximate radius (in meters) of the CIRCLE area."
          allOf:
            - $ref: "#/components/schemas/GeoRadius"

    Polygon:
      type: "object"
      title: "Polygon"
      required: [geoCoordinates]
      properties:
        geoCoordinates:
          type: "array"
          description: "Coordinates of each point of the polygon. It is recommended that the first and last points be the same, but it is not required.\n\n\n\nEach point in a polygon or multipolygon is defined by a latitude point followed by a longitude point. You also must specify the points in a counter-clockwise direction."
          items:
            type: "object"
            title: "geoCoordinate"
            required: ["latitude", "longitude"]
            properties:
              latitude:
                type: "number"
                format: "float"
                description: "Indicates the latitude coordinate of the polygon point.\n\n\n\nLatitude in degrees. Values are restricted to the range [[-90, 90]].\n\n\n\nThe precision should be **at least 5 decimal places (multipleOf: 0.00001)**."
                example: -23.54809
              longitude:
                type: "number"
                format: "float"
                description: "Indicates the longitude coordinate of the polygon point.\n\n\n\nLongitude in degrees. Values are restricted to the range [[-180, 180]].\n\n\n\nThe precision should be **at least 5 decimal places (multipleOf: 0.00001)**."
                example: -46.63638
        price:
          type: "object"
          description: "Price of the fee for this polygon"
          allOf:
            - $ref: "#/components/schemas/Price"
          example: { value: 5, currency: "BRL" }
        estimateDeliveryTime:
          type: "integer"
          description: "Estimate delivery time for this polygon in minutes"

    GeoRadius:
      type: "object"
      title: "GeoRadius"
      required: [geoMidpointLatitude, geoMidpointLongitude, radius]
      properties:
        geoMidpointLatitude:
          type: "number"
          format: "float"
          description: "Indicates the latitude coordinate at the center of the CIRCLE area.\n\n\n\nLatitude in degrees. Values are restricted to the range [[-90, 90]].\n\n\n\nThe precision should be **at least 5 decimal places (multipleOf: 0.00001)**."
          example: -23.54809
        geoMidpointLongitude:
          type: "number"
          format: "float"
          description: "Indicates the longitude coordinate at the center of the CIRCLE area.\n\n\n\nLongitude in degrees. Values are restricted to the range [[-180, 180]].\n\n\n\nThe precision should be **at least 5 decimal places (multipleOf: 0.00001)**."
          example: -46.63638
        radius:
          type: "array"
          description: "Informations about each radius of the CIRCLE that the merchant serves."
          items:
            type: "object"
            title: "radius"
            required: ["size"]
            properties:
              size:
                type: "integer"
                description: "The size of the CIRCLE radius in meters."
              price:
                type: "object"
                description: "Price of the fee for this CIRCLE size."
                allOf:
                  - $ref: "#/components/schemas/Price"
                example: { value: 5, currency: "BRL" }
              estimateDeliveryTime:
                type: "integer"
                description: "Estimate delivery time for this CIRCLE size in minutes."

    ItemPrice:
      type: "object"
      title: "Item Price"
      required: ["value", "originalValue", "currency"]
      properties:
        value:
          type: "number"
          format: "decimal"
          description: "The actual price value. 4 decimals places are accepted"
          example: 50
        originalValue:
          type: "number"
          format: "decimal"
          description: "The orginal price value. 4 decimals places are accepted"
          example: 50
        currency:
          type: "string"
          pattern: "^[A-Z]{3}$"
          description: "The 3-letter ISO 4217 currency code."
          example: "BRL"

    ServiceHours:
      type: "object"
      title: "Service Hours"
      required: [id, "weekHours"]
      properties:
        id:
          type: "string"
          format: "UUID"
          description: "A unique identifier of the service hours."
          example: "fb093d8c-2ca5-40fb-afcf-472fbdae81cc"
        weekHours:
          type: array
          description: "A list of the day(s) of the week and time periods for which the service is valid."
          items:
            type: "object"
            allOf:
              - $ref: "#/components/schemas/Hours"
        holidayHours:
          type: array
          description: "Map of holiday dates, each with optional `timePeriods`. If a date does not have a time period specified, the restaurant will be closed for that date."
          items:
            type: "object"
            allOf:
              - $ref: "#/components/schemas/HolidayHours"

    Hours:
      type: "object"
      title: "Hours"
      required: ["dayOfWeek", "timePeriods"]
      properties:
        dayOfWeek:
          type: array
          description: "Day of the week for which these service hours are valid"
          items:
            type: "string"
            enum:
              - "MONDAY"
              - "TUESDAY"
              - "WEDNESDAY"
              - "THURSDAY"
              - "FRIDAY"
              - "SATURDAY"
              - "SUNDAY"
          example:
            [
              "MONDAY",
              "TUESDAY",
              "WEDNESDAY",
              "THURSDAY",
              "FRIDAY",
              "SATURDAY",
              "SUNDAY",
            ]
        timePeriods:
          type: "object"
          description: "Time window from which users' orders can be placed."
          allOf:
            - $ref: "#/components/schemas/TimePeriods"

    TimePeriods:
      type: "object"
      title: "Time Periods"
      required: ["startTime", "endTime"]
      properties:
        startTime:
          type: string
          format: time
          description: "Indicates the specific time of day in ISO format starting from which users' orders can be placed."
          example: "10:00:00.000Z"
        endTime:
          type: string
          format: time
          description: "Indicates the specific time of day in ISO format beyond which users' orders cannot be placed."
          example: "18:00:00.000Z"

    HolidayHours:
      type: "object"
      title: "Holiday Hours"
      required: ["date", "timePeriods"]
      properties:
        date:
          type: string
          format: date
          description: "date"
          example: "7/4/2021"
        timePeriods:
          type: "object"
          description: "hours"
          allOf:
            - $ref: "#/components/schemas/TimePeriods"

    Item:
      type: "object"
      title: "Item"
      required: [id, "name", "description", "externalCode", "unit"]
      properties:
        id:
          type: "string"
          format: "UUID"
          description: "A unique identifier of the item."
          example: "732bd31e-77fc-47ee-88ee-a0437f97b198"
        name:
          type: "string"
          description: "Item name"
          maxLength: 150
          example: "1/2 Pepperoni"
        description:
          type: "string"
          description: "Item Description"
          example: "Pepperoni flavored pizza with LOTS of pepperoni."
        externalCode:
          type: "string"
          description: "Item External Code. (Tipically the merchant **Software Service** item code)"
          example: "233467"
        image:
          type: "object"
          description: "Image of the item"
          allOf:
            - $ref: "#/components/schemas/Image"
        nutritionalInfo:
          type: "object"
          description: "Nutrition information for the dish."
          allOf:
            - $ref: "#/components/schemas/NutritionalInfo"
        serving:
          type: "integer"
          description: "Field to show the number of people the portion serves."
          example: 2
        unit:
          type: "string"
          description: "Measure Unit of the Item"
          example: "kg"
        ean:
          type: "string"
          description: "EAN (European Article Number)"
          example: "7896005202074"

    NutritionalInfo:
      type: "object"
      title: "Nutritional Info"
      required: ["description", "calories"]
      properties:
        description:
          type: "string"
          description: 'Nutrition information in free text. For example "Contains preservatives".'
          example: "Contains preservatives"
        calories:
          type: "string"
          description: "The number of calories in Cal, kcal, or kJ, using the following format: value Cal or min-max Cal"
          pattern: "^[0-9]+(\\.[0-9]+)? ?(- ?[0-9]+(\\.[0-9]+)?)? [a-zA-Z]+$"
          example: "2000 Cal"
        allergen:
          type: "array"
          description: "Allergens of this Item"
          items:
            type: "string"
            enum:
              - "ALMONDS"
              - "ALPHA_ISOMETHYL_IONONE"
              - "ALCOHOL"
              - "AMYL_CINNAMAL"
              - "ANISE_ALCOHOL"
              - "BARLEY"
              - "BENZYL_ALCOHOL"
              - "BENZYL_BENZOATE"
              - "BENZYL_CINNAMATE"
              - "BENZYL_SALICYLATE"
              - "BRAZIL_NUTS"
              - "BUTYLPHENYL_METHYLPROPIONATE"
              - "CARROTS"
              - "CASHEW_NUTS"
              - "CELERY"
              - "CEREALS_CONTAINING_GLUTEN"
              - "CINNAMAL"
              - "CINNAMYL_ALCOHOL"
              - "CITRAL"
              - "CITRONELLOL"
              - "COCOA"
              - "CORIANDER"
              - "CORN"
              - "COUMARIN"
              - "CRUSTACEANS"
              - "EGGS"
              - "EUGENOL"
              - "EVERNIA_FURFURACEA"
              - "EVERNIA_PRUNASTRI"
              - "FARNESOL"
              - "FISH"
              - "GERANIOL"
              - "GLUTEN"
              - "HAZELNUTS"
              - "HEXYL_CINNAMAL"
              - "HYDROXYCITRONELLAL"
              - "KAMUT"
              - "LACTOSE"
              - "LUPINE"
              - "MACADAMIA_NUTS"
              - "METHYL_2_OCTYNOATE"
              - "MILK"
              - "MOLLUSCS"
              - "MUSTARD"
              - "NO_DECLARED_ALLERGENS"
              - "OAT"
              - "PEANUTS"
              - "PEAS"
              - "PECAN_NUTS"
              - "PISTACHIOS"
              - "POD_FRUITS"
              - "QUEENSLAND_NUTS"
              - "RYE"
              - "SESAME_SEEDS"
              - "SOYBEANS"
              - "SPELT"
              - "SULPHUR_DIOXIDE"
              - "TREE_NUTS"
              - "TREE_NUT_TRACES"
              - "WALNUTS"
              - "WHEAT"
            example: "GLUTEN"
        additives:
          type: "array"
          description: "Additives of this Item"
          items:
            type: "string"

        suitableDiet:
          type: "array"
          description: "The dish complies with the described dietary restriction"
          items:
            type: "string"
            enum:
              - "DIABETIC"
              - "GLUTEN_FREE"
              - "HALAL"
              - "HINDU"
              - "KOSHER"
              - "LOW_CALORIE"
              - "LOW_FAT"
              - "LOW_LACTOSE"
              - "LOW_SALT"
              - "VEGAN"
              - "VEGETARIAN"
        isAlcoholic:
          type: "boolean"
          description: "Indicates if an item is alcoholic."
          example: false

    Menu:
      type: "object"
      title: "Menu"
      required: [id, "name", "externalCode", "categoryId"]
      properties:
        id:
          type: "string"
          format: "UUID"
          description: "A unique identifier of the menu."
          example: "f627ccdc-6789-456f-a782-148538d5035b"
        name:
          type: "string"
          description: "Menu name"
          maxLength: 500
          example: "Pizzas"
        description:
          type: "string"
          description: "Menu Description"
          example: "Pizza menu"
        externalCode:
          type: "string"
          description: "Menu External Code. (Tipically the merchant **Software Service** menu code)"
          example: "123"
        disclaimer:
          type: "string"
          description: "Disclaimer"
          example: "Lorem Ipsum is simply dummy text of the printing and typesetting industry."
        disclaimerURL:
          type: "string"
          format: "uri"
          description: "Disclaimer URL"
        categoryId:
          type: "array"
          description: "A list of the id values of the child `Category` entities that correspond to this `Menu` entity. Default assumes all `Category` entities are available in this menu."
          items:
            type: "string"
            format: "UUID"
          example:
            [
              "92fad022-2c28-4239-a026-989f5b555cb7",
              "6bb71850-1d40-49f9-8046-b13e068c0cca",
            ]

    Category:
      type: "object"
      title: "Category"
      required:
        [id, "index", "name", "externalCode", "status", "availabilityId"]
      properties:
        id:
          type: "string"
          format: "UUID"
          description: "A unique identifier of the category."
          example: "92fad022-2c28-4239-a026-989f5b555cb7"
        index:
          type: "integer"
          description: "Category display index."
          example: 0
        name:
          type: "string"
          description: "Category name."
          maxLength: 150
          example: "Salted Pizza"
        description:
          type: "string"
          description: "Category description."
          example: "Salted pizza flavors."
        image:
          type: "object"
          description: "Image of the category (the category image display depends on the client application interface)"
          allOf:
            - $ref: "#/components/schemas/Image"
        externalCode:
          type: "string"
          description: "Category External Code. (Tipically the merchant **Software Service** category code)"
          example: "13"
        status:
          type: "string"
          description: "Indicates if the entity is Avaliable or Unavaliable. Only use this type when you must disable the entity due to an unexpected event and you don't know when the service will be re-established (e.g. do not use for holidays)."
          enum:
            - AVAILABLE
            - UNAVAILABLE
          example: "AVAILABLE"
        availabilityId:
          type: "array"
          description: "The id values of `Availability` entities which provide details on when the category is available. Default assumes a `Category` is available at all times."
          items:
            allOf:
              - $ref: "#/components/schemas/Availability/properties/id"
          example: ["11d063c4-73a7-4f87-a0eb-71636cc02029"]
        itemOfferId:
          type: array
          description: "A list of the id values of the child `ItemOffer` entities that correspond to this `Category` entity. Default assumes all `ItemOffer` entities are available in this category."
          items:
            allOf:
              - $ref: "#/components/schemas/ItemOffer/properties/id"
          example: ["f080cfb3-5c4a-4eb7-907d-2de3bbb5dfb9"]

    ItemOffer:
      type: "object"
      title: "ItemOffer"
      required: [id, "itemId", "index", "price", "availabilityId"]
      properties:
        id:
          type: "string"
          format: "UUID"
          description: "A unique identifier of the item offer."
          example: "f080cfb3-5c4a-4eb7-907d-2de3bbb5dfb9"
        itemId:
          type: "string"
          description: "The id value of the `Item` entity correlated to this `ItemOffer` entity."
          example: "732bd31e-77fc-47ee-88ee-a0437f97b198"
        index:
          type: integer
          description: "ItemOffer display index."
          example: 0
        status:
          type: "string"
          description: "Indicates if the entity is Avaliable or Unavaliable. Only use this type when you must disable the entity due to an unexpected event and you don't know when the service will be re-established (e.g. do not use for holidays). Default is AVAILABLE."
          enum:
            - AVAILABLE
            - UNAVAILABLE
          example: "AVAILABLE"
        price:
          type: "object"
          description: "Price of the menu item offer. Original and actual values can be informed, for showing discounts."
          allOf:
            - $ref: "#/components/schemas/ItemPrice"
          example: { value: 43, originalValue: 43, currency: "BRL" }
        availabilityId:
          type: "array"
          description: "The id values of `Availability` entities which provide details on when the menu item offer is available. Default assumes an `ItemOffer` is available at all times."
          items:
            allOf:
              - $ref: "#/components/schemas/Availability/properties/id"
          example: ["11d063c4-73a7-4f87-a0eb-71636cc02029"]
        optionGroupsId:
          type: "array"
          description: "A list of the id values of the child `OptionGroup` entities that correspond to this `ItemOffer` entity."
          items:
            allOf:
              - $ref: "#/components/schemas/OptionGroup/properties/id"
          example: ["fe67e551-f42f-499a-8afb-0ed893c71fa3"]

    OptionGroup:
      type: "object"
      title: "Option Group"
      required:
        [
          id,
          "index",
          "name",
          "externalCode",
          "status",
          "minPermitted",
          "maxPermitted",
        ]
      properties:
        id:
          type: "string"
          format: "UUID"
          description: "A unique identifier of the option group."
          example: "fe67e551-f42f-499a-8afb-0ed893c71fa3"
        index:
          type: integer
          description: "Option Group display index."
          example: 0
        name:
          type: "string"
          description: "Option Group Name."
          maxLength: 150
          example: "Choose your salted pizza flavor"
        description:
          type: "string"
          description: "Option Group Description."
          example: "Choose your salted pizza flavor."
        externalCode:
          type: "string"
          description: "Option External Code. (Tipically the merchant **Software Service** option group code)"
          example: "12"
        status:
          type: "string"
          description: "Indicates if the entity is Avaliable or Unavaliable. Only use this type when you must disable the entity due to an unexpected event and you don't know when the service will be re-established (e.g. do not use for holidays)."
          enum:
            - AVAILABLE
            - UNAVAILABLE
          example: "AVAILABLE"
        minPermitted:
          type: integer
          description: "The minimum number of options which should be selected in the option group."
          example: 2
        maxPermitted:
          type: integer
          description: "The maximum number of options which should be selected in the option group."
          example: 2
        options:
          type: array
          description: "A list of `Option` entities that correspond to this option group"
          items:
            type: "object"
            description: "options"
            allOf:
              - $ref: "#/components/schemas/Option"

    Option:
      type: "object"
      title: "Option"
      required: [id]
      properties:
        id:
          type: "string"
          format: "UUID"
          description: "A unique identifier of the option."
          example: "e5232f14-430c-4a94-8ff6-289d5a16a87a"
        itemId:
          type: "string"
          description: "The id value of the `Item` entity correlated to this `Option` entity."
          example: "502ecf11-0509-48ed-b63c-6211c48fd9b9"
        index:
          type: integer
          description: "Option display index."
          example: 0
        status:
          type: "string"
          description: "Indicates if the entity is Avaliable or Unavaliable. Only use this type when you must disable the entity due to an unexpected event and you don't know when the service will be re-established (e.g. do not use for holidays). Default is AVAILABLE."
          enum:
            - AVAILABLE
            - UNAVAILABLE
          example: "AVAILABLE"
        price:
          type: "object"
          description: "Price of the option. Original and actual values can be informed, for showing discounts."
          allOf:
            - $ref: "#/components/schemas/ItemPrice"
        maxPermitted:
          type: integer
          description: "The maximum quantity of this option which can be selected in the option group."
          example: 1

    Availability:
      type: "object"
      title: "Availability"
      required: [id, "hours"]
      properties:
        id:
          type: "string"
          format: "UUID"
          description: "A unique identifier of the availability."
          example: "11d063c4-73a7-4f87-a0eb-71636cc02029"
        startDate:
          type: "string"
          description: "Availability start date. If not informed, the availabilty is already avaliable."
          example: "05/01/2021"
        endDate:
          type: "string"
          description: "Availability end date. If not informed, the availabilty is always avaliable."
          example: "05/30/2021"
        hours:
          type: "array"
          description: "Hours"
          items:
            allOf:
              - $ref: "#/components/schemas/Hours"

    MerchantStatus:
      type: "object"
      title: "Merchant Status"
      required: ["lastRead", "status"]
      properties:
        lastRead:
          type: "string"
          format: "date-time"
          description: "Date of last attempt to read merchant information. \n\n(UTC date-time in ISO timestamp format)."
        status:
          type: "string"
          description: "Reading attempt status"
          enum:
            - SUCCESS
            - PROCESSING
            - FAIL
        moreInfo:
          type: "string"
          description: "Open field to provide any relevant information to the caller. Eg: Error messages or causes."

    MerchantUpdate:
      type: object
      required: [""]
      discriminator:
        propertyName: entityType
        mapping:
          SERVICE: "#/components/schemas/ServiceUpdate"
          MENU: "#/components/schemas/MenuUpdate"
          CATEGORY: "#/components/schemas/CategoryUpdate"
          ITEM: "#/components/schemas/ItemUpdate"
          ITEM_OFFER: "#/components/schemas/ItemOfferUpdate"
          OPTION_GROUP: "#/components/schemas/OptionGroupUpdate"
          OPTION: "#/components/schemas/OptionUpdate"
          AVAILABILITY: "#/components/schemas/AvailabilityUpdate"
      properties:
        merchantStatus:
          allOf:
            - $ref: "#/components/schemas/Merchant/properties/status"
        entityType:
          type: "string"
          description: "The entity type of the updated object."

    ServiceUpdate:
      description: Updated Service Object
      allOf:
        - $ref: "#/components/schemas/MerchantUpdate"
        - type: object
          properties:
            updatedObjects:
              description: "Updated `Service` entity objects"
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/Service"

    MenuUpdate:
      description: Updated Menu Object
      allOf:
        - $ref: "#/components/schemas/MerchantUpdate"
        - type: object
          properties:
            updatedObjects:
              description: "Updated `Menu` entity objects"
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/Menu"

    CategoryUpdate:
      description: Updated `Category` Object
      allOf:
        - $ref: "#/components/schemas/MerchantUpdate"
        - type: object
          properties:
            updatedObjects:
              description: "Updated `Category` entity objects"
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/Category"

    ItemUpdate:
      description: Updated `Item` Object
      allOf:
        - $ref: "#/components/schemas/MerchantUpdate"
        - type: object
          properties:
            updatedObjects:
              description: "Updated `Item` entity objects"
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/Item"

    ItemOfferUpdate:
      description: Updated `ItemOffer` Object
      allOf:
        - $ref: "#/components/schemas/MerchantUpdate"
        - type: object
          properties:
            updatedObjects:
              description: "Updated `ItemOffer` entity objects"
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/ItemOffer"

    OptionGroupUpdate:
      description: Updated `OptionGroup` Object
      allOf:
        - $ref: "#/components/schemas/MerchantUpdate"
        - type: object
          properties:
            updatedObjects:
              description: "Updated `OptionGroup` entity objects"
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/OptionGroup"

    OptionUpdate:
      description: Updated `Option` Object
      allOf:
        - $ref: "#/components/schemas/MerchantUpdate"
        - type: object
          properties:
            updatedObjects:
              description: "Updated `Option` entity objects"
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/Option"

    AvailabilityUpdate:
      description: Updated `Availability` Object
      allOf:
        - $ref: "#/components/schemas/MerchantUpdate"
        - type: object
          properties:
            updatedObjects:
              description: "Updated `Availability` entity objects"
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/Availability"

    #Orders

    AckEvents:
      type: "object"
      title: "Ack Events"
      required: [id, "orderId", "eventType"]
      properties:
        id:
          type: "string"
          format: "UUID"
          description: "A unique identifier of the event."
        orderId:
          $ref: "#/components/schemas/Order/properties/id"
        eventType:
          $ref: "#/components/schemas/Event/properties/eventType"

    Order:
      type: "object"
      title: "Order"
      required:
        [
          id,
          "type",
          "displayId",
          "createdAt",
          "orderTiming",
          "preparationStartDateTime",
          "merchant",
          "items",
          "total",
          "payments",
          "customer",
        ]
      # example:
      #   $ref: "#/components/examples/orderExample"
      properties:
        id:
          type: "string"
          format: "UUID"
          description: "A unique identifier of the order."
        "type":
          type: "string"
          enum:
            - "DELIVERY"
            - "TAKEOUT"
        displayId:
          type: "string"
          description: "Order Id shown in the **Ordering Application** interface for the customer."
        sourceAppId:
          type: "string"
          format: UUID
          description: "This field must be filled in with the AppId of the **Ordering Application** that originated the order. This field is to help the applications that will work as a Hub, intermediating the requests from the **Ordering Application** with the **Software Service**."
        createdAt:
          type: "string"
          format: date-time
          description: "Order creation date and time. \n\n(UTC date-time in ISO timestamp format)."
        orderTiming:
          type: "string"
          description: "Order Timing. Indicates whether the ORDER will have immediate or scheduled delivery."
          enum:
            - "INSTANT"
            - "SCHEDULED"
        preparationStartDateTime:
          type: "string"
          format: "date-time"
          description:
            "Suggestion for the preparation start time after Order creation. This can be used by the **Ordering Application** to inform the merchant to delay the start of the preparation for any reason. Default is the same time as the order creation time.
            \n\n(UTC date-time in ISO timestamp format)."
        merchant:
          type: "object"
          required: [id, "name"]
          description: "Merchant information."
          properties:
            id:
              allOf:
                - $ref: "#/components/schemas/Merchant/properties/id"
            name:
              allOf:
                - $ref: "#/components/schemas/BasicInfo/properties/name"
        items:
          type: "array"
          description: "Order items."
          items:
            type: "object"
            required:
              [
                id,
                "name",
                "unit",
                "quantity",
                "unitPrice",
                "totalPrice",
                "externalCode",
              ]
            properties:
              id:
                type: "string"
                format: "UUID"
                description: "A unique identifier of the item."
              index:
                type: "integer"
                description: "Item's position."
              name:
                type: "string"
                description: "Product name"
              externalCode:
                type: "string"
                description: "External product code."
              unit:
                type: "string"
                description: "Measure unit of the item."
                enum:
                  - "UNIT"
              ean:
                type: "string"
                description: "EAN is the barcode standard used on items."
              quantity:
                type: "number"
                format: "decimal"
                description: "Amount of items."
              specialInstructions:
                type: "string"
                description: "Special instructions about the items."
              unitPrice:
                type: "object"
                allOf:
                  - $ref: "#/components/schemas/Price"
                description: "Price per unit."
              optionsPrice:
                type: "object"
                allOf:
                  - $ref: "#/components/schemas/Price"
                description: "Pricing options."
              totalPrice:
                type: "object"
                description: Total Price of the item. (quantity * unitPrice + optionsPrice)
                allOf:
                  - $ref: "#/components/schemas/Price"
              options:
                type: "array"
                description: "Options related to the item."
                items:
                  type: "object"
                  required:
                    [
                      id,
                      "name",
                      "externalCode",
                      "unit",
                      "quantity",
                      "unitPrice",
                      "price",
                    ]
                  properties:
                    index:
                      type: "integer"
                      description: "Option's position."
                    id:
                      type: "string"
                      format: "UUID"
                      description: "A unique identifier of the item."
                    name:
                      type: "string"
                      description: "Options name"
                    externalCode:
                      type: "string"
                      description: "External product code."
                    unit:
                      type: "string"
                      description: "Measure unit of the item."
                    ean:
                      type: "string"
                      description: "EAN is the barcode standard used on items."
                    quantity:
                      type: "number"
                      format: "decimal"
                    unitPrice:
                      type: "object"
                      allOf:
                        - $ref: "#/components/schemas/Price"
                      description: "Price per unit."
                    totalPrice:
                      type: "object"
                      description: Total Price of the option. (quantity * unitPrice)
                      allOf:
                        - $ref: "#/components/schemas/Price"
                    specialInstructions:
                      type: "string"
                      description: "More instructions, if needed."
        otherFees:
          type: "array"
          description: "Other fees that may apply."
          items:
            type: "object"
            required: ["name", "type", "receivedBy", "price"]
            properties:
              name:
                type: "string"
                description: "Name related to the other fees."
              type:
                type: "string"
                enum:
                  - "DELIVERY_FEE"
                  - "SERVICE_FEE"
                  - "TIP"
              receivedBy:
                type: "string"
                enum:
                  - "MARKETPLACE"
                  - "MERCHANT"
                  - "LOGISTIC_SERVICES"
              receiverDocument:
                type: "string"
                description: "Mandatory for marketplace."
              price:
                type: "object"
                description: "The fee price"
                allOf:
                  - $ref: "#/components/schemas/Price"
              observation:
                type: "string"
                description: "Any extra comments."
        discounts:
          type: "array"
          description: "Any discounts that may apply."
          items:
            type: "object"
            required: ["value", "target", "sponsorshipValues"]
            properties:
              amount:
                type: "object"
                description: Amount value of the discount.
                allOf:
                  - $ref: "#/components/schemas/Price"
              target:
                type: "string"
                enum:
                  - "CART"
                  - "DELIVERY_FEE"
                  - "ITEM"
              targetId:
                type: "string"
                description: "Only mandatory for `target` = `ITEM`."
              sponsorshipValues:
                description: "Values sponsored by either party. The sum of the amounts listed in this atribute must match the value informed in the `amount` atribute above."
                type: "array"
                items:
                  type: "object"
                  required: ["name", "value"]
                  properties:
                    name:
                      type: "string"
                      enum:
                        - "MARKETPLACE"
                        - "MERCHANT"
                    amount:
                      type: "object"
                      description: Discount amount given by the sponsor.
                      allOf:
                        - $ref: "#/components/schemas/Price"
        total:
          type: "object"
          required: ["items", "otherFees", "orderAmount", "discount"]
          description: "Set of fields with the sum of the values previously described in the order."
          properties:
            itemsPrice:
              type: "object"
              description: "Sum of the total price of the items listed in the `items` attribute."
              allOf:
                - $ref: "#/components/schemas/Price"
            otherFees:
              type: "object"
              description: "Sum of the total value of other fees listed in the `otherFees` attribute. If there isn't one, use 0."
              allOf:
                - $ref: "#/components/schemas/Price"
            discount:
              type: "object"
              description: "Sum of any discounts that may be listed in the `discounts` attribute. If there isn't one, use 0."
              allOf:
                - $ref: "#/components/schemas/Price"
            orderAmount:
              type: "object"
              description: "The final value of the order (itemsPrice + otherFees - discounts). "
              allOf:
                - $ref: "#/components/schemas/Price"
        payments:
          type: "object"
          required: ["prepaid", "pending", "methods"]
          description: "All the description of the payment, such as methods, pre-payments, change, etc."
          properties:
            prepaid:
              type: "number"
              format: "decimal"
              description: "Amount paid in advance."
            pending:
              type: "number"
              format: "decimal"
              description: "Amount that is still to be paid."
            methods:
              type: "array"
              description: "The payment method used. Whether it was online, on delivery, credit card, voucher, cash, etc."
              items:
                type: "object"
                required: ["value", "currency", "type", "method"]
                properties:
                  value:
                    type: "number"
                    format: "decimal"
                    description: "Price value. 4 decimals places are accepted"
                  currency:
                    allOf:
                      - $ref: "#/components/schemas/Price/properties/currency"
                  type:
                    type: "string"
                    description: "`PREPAID` if the payment was made through some platform, or `PENDING` if it going to be paid on delivery or in cash, for example."
                    enum:
                      - "PREPAID"
                      - "PENDING"
                  method:
                    type: "string"
                    enum:
                      - "CREDIT"
                      - "DEBIT"
                      - "MEAL_VOUCHER"
                      - "FOOD_VOUCHER"
                      - "DIGITAL_WALLET"
                      - "PIX"
                      - "CASH"
                      - "CREDIT_DEBIT"
                      - "COUPON"
                      - "REDEEM"
                      - "PREPAID_REDEEM"
                      - "OTHER"
                  methodInfo:
                    type: "string"
                    description:
                      "Additional information regarding the payment method.
                      \nRecommended if `method` is `OTHER`."
                  changeFor:
                    type: "number"
                    format: "decimal"
                    description: "Only mandatory for `CASH` method."
        customer:
          type: "object"
          required:
            [id, "phone", "documentNumber", "name", "ordersCountOnMerchant"]
          description: "Customer related information."
          properties:
            id:
              type: "string"
              format: "UUID"
              description: "A unique identifier related to the consumer. If the Ordering Application does not have an Id for the customer, this Id can be generated when creating the order. "
            phone:
              type: "object"
              description: "Customer's phone. Here you can enter the customer's phone number directly (provided that the customer has given permission for this data to be shared, according to local policies) or another phone number (such as the ordering application's call center phone number) where the merchant can communicate about order issues that affect the customer (such as health issues)."
              required: ["number"]
              properties:
                number:
                  type: "string"
                extension:
                  type: "string"
            documentNumber:
              description: "Customer document. This document is mandatory for dealing with tax issues."
              type: "string"
            name:
              type: "string"
              description: "Customer's name."
            ordersCountOnMerchant:
              description: "Total number of orders that the customer already placed within the merchant."
              type: "number"
              format: "decimal"
        schedule:
          type: "object"
          description: "Information for indoor orders. Required if the chosen `type` is `INDOOR`."
          required: ["scheduledDateTimeStart", "scheduledDateTimeEnd"]
          properties:
            scheduledDateTimeStart:
              type: "string"
              format: date-time
              description: "Date and time for when the order is ready. It can be calculated by the **Ordering Application** using the average preparation time of the dishes. Default is the same time as order creation time. \n\n(UTC date-time in ISO timestamp format)."
            scheduledDateTimeEnd:
              type: "string"
              format: date-time
              description: "Date and time for when the order is ready. It can be calculated by the **Ordering Application** using the average preparation time of the dishes. Default is the same time as order creation time. \n\n(UTC date-time in ISO timestamp format)."
        delivery:
          type: "object"
          description: "If the chosen `type` is `DELIVERY`, then `TAKEOUT` is not required."
          required:
            ["deliveredBy", "deliveryAddress", "estimatedDeliveryDateTime"]
          properties:
            deliveredBy:
              type: "string"
              enum:
                - "MERCHANT"
                - "MARKETPLACE"
            deliveryAddress:
              type: "object"
              description: "The address to which the order will be delivered."
              required:
                [
                  "country",
                  "street",
                  "formattedAddress",
                  "number",
                  "city",
                  "postalCode",
                  "coordinates",
                  "district",
                  "state",
                ]
              properties:
                country:
                  type: "string"
                  pattern: "^[A-Z]{2}$"
                  description: "Two-letter [ISO 3166-1 alpha-2](https://www.iso.org/standard/72482.html) country code."
                  example: "BR"
                state:
                  type: "string"
                  description: "State or country subdivision. It is recommended (but not required) that you use the [ISO 3166-2](https://www.iso.org/standard/72483.html) representation. "
                  example: "BR-SP"
                city:
                  type: "string"
                  description: "City name."
                  example: "São Paulo"
                district:
                  type: "string"
                  description: "Neighborhood or District."
                  example: "Moema"
                street:
                  type: "string"
                  description: "Street name."
                  example: "Plaza Avenue"
                number:
                  type: "string"
                  description: "Street number."
                  example: "100"
                complement:
                  type: "string"
                  description: "Address complement."
                  example: "BL 02 AP 31"
                reference:
                  type: "string"
                  description: "Address reference."
                  example: "Yellow House"
                formattedAddress:
                  type: "string"
                  description: "Full Formated Address Text"
                  example: "Plaza Avenue, 100, BL 02 AP 31, Moema - São Paulo, SP - Brazil"
                postalCode:
                  type: "string"
                  description: "Postal Code"
                  example: "20111-000"
                coordinates:
                  type: "object"
                  required: ["latitude", "longitude"]
                  properties:
                    latitude:
                      type: "number"
                      format: "float"
                      description: "Latitude in degrees. Values are restricted to the range [[-90, 90]].\n\n\n\nThe precision should be **at least 5 decimal places (multipleOf: 0.00001)**."
                      example: -23.54823
                    longitude:
                      type: "number"
                      format: "float"
                      description: "Longitude in degrees. Values are restricted to the range [[-180, 180]].\n\n\n\nThe precision should be **at least 5 decimal places (multipleOf: 0.00001)**."
                      example: -46.63632
            estimatedDeliveryDateTime:
              type: "string"
              format: date-time
              description: "Estimated delivery date and time. The same date showed to the customer, in the **Ordering Application** interface. \n\n(UTC date-time in ISO timestamp format)."
            deliveryDateTime:
              type: "string"
              format: date-time
              description: "Delivery date. The date time that the delivery actually took place. \n\n(UTC date-time in ISO timestamp format)."
        takeout:
          type: "object"
          description: "If the chosen `type` is `TAKEOUT`, `DELIVERY` is not required."
          required: ["mode", "takeoutDateTime"]
          properties:
            mode:
              type: "string"
              enum:
                - "DEFAULT"
                - "PICKUP_AREA"
            takeoutDateTime:
              type: "string"
              format: date-time
              description: "Takeout date and time. It can be calculated by the **Ordering Application** using the average preparation time of the dishes. Default is the same time as order creation time. \n\n(UTC date-time in ISO timestamp format)."
        indoor:
          type: "object"
          description: "Information for indoor orders. Required if the chosen `type` is `INDOOR`."
          required: ["mode", "indoorDateTime"]
          properties:
            mode:
              type: "string"
              description: |-
                Indoor mode identifier:

                - `DEFAULT`: Used for orders placed in the **Ordering Application** to be consumed inside the merchant without a specific location.

                - `PLACE`: Used for orders placed in the **Ordering Application** to be consumed inside the merchant at a specific location already specified, such as a **table** or a **counter**.
              enum:
                - "DEFAULT"
                - "PLACE"
            indoorDateTime:
              type: "string"
              format: date-time
              description: "Date and time for when the order is ready. It can be calculated by the **Ordering Application** using the average preparation time of the dishes. Default is the same time as order creation time. \n\n(UTC date-time in ISO timestamp format)."
            place:
              type: "string"
              description: "Place identifier (Required if mode is `PLACE`)"
        extraInfo:
          type: "string"
          description: "Extra information, if necessary."

    OrderConfirmed:
      type: "object"
      title: "Order Confirmed"
      required: ["createdAt", "orderExternalCode"]
      properties:
        reason:
          type: "string"
          description: "Free field for more information about the order confirmation, such as which employee accepted the order, for example."
        createdAt:
          type: "string"
          format: date-time
          description: "Order creation date and time. \n\n(UTC date-time in ISO timestamp format)."
        orderExternalCode:
          type: "string"
          description: "External order code, which can be used by merchant or marketplace."

    RequestCancelled:
      type: "object"
      title: "Request Cancelled"
      required: ["reason", "code", "mode"]
      properties:
        reason:
          type: "string"
          description: "Open text field indicating the reason for the cancellation."
        code:
          type: "string"
          enum:
            - SYSTEMIC_ISSUES
            - DUPLICATE_APPLICATION
            - UNAVAILABLE_ITEM
            - RESTAURANT_WITHOUT_DELIVERY_MAN
            - OUTDATED_MENU
            - ORDER_OUTSIDE_THE_DELIVERY_AREA
            - BLOCKED_CUSTOMER
            - OUTSIDE_DELIVERY_HOURS
            - INTERNAL_DIFFICULTIES_OF THE RESTAURANT
            - RISK_AREA
        mode:
          type: "string"
          enum:
            - "AUTO"
            - "MANUAL"
        outOfStockItems:
          type: "array"
          description: "Items that are not in the merchant's inventory."
          items:
            format: UUID
            type: string
        invalidItems:
          type: "array"
          description: "Items that do not exist in the merchant's inventory."
          items:
            format: "UUID"
            type: string

    RequestDenied:
      type: "object"
      title: "Request Cancelled"
      required: ["reason", "code"]
      properties:
        reason:
          type: "string"
          description: "Open text field indicating the reason for the cancellation."
        code:
          type: "string"
          enum:
            - "DISH_ALREADY_DONE"
            - "OUT_FOR_DELIVERY"

    Event:
      type: "object"
      title: "Event"
      required: ["eventId", "eventType", "orderId", "orderURL", "createdAt"]
      discriminator:
        propertyName: eventType
        mapping:
          CREATED: "#/components/schemas/EventMetadata"
          CONFIRMED: "#/components/schemas/EventMetadataConfirm"
          READY_FOR_PICKUP: "#/components/schemas/EventMetadata"
          DISPATCHED: "#/components/schemas/EventMetadata"
          PICKUP_AREA_ASSIGNED: "#/components/schemas/EventMetadataPickup"
          CONCLUDED: "#/components/schemas/EventMetadata"
          ORDER_CANCELLATION_REQUESTED: "#/components/schemas/EventMetadataCancel"
          CANCELLATION_REQUESTED: "#/components/schemas/EventMetadataCancel"
          CANCELLATION_REQUEST_DENIED: "#/components/schemas/EventMetadataCancel"
          CANCELLED: "#/components/schemas/EventMetadataCancel"
      properties:
        eventId:
          type: "string"
          format: "UUID"
          description: "A unique identifier of the event."
        eventType:
          type: "string"
          description: "The event type. **[Click here](#operation/pollingEvents)** for definitions of each type."
          enum:
            - "CREATED"
            - "CONFIRMED"
            - "DISPATCHED"
            - "READY_FOR_PICKUP"
            - "PICKUP_AREA_ASSIGNED"
            - "CONCLUDED"
            - "CANCELLATION_REQUESTED"
            - "CANCELLATION_REQUEST_DENIED"
            - "CANCELLED"
            - "ORDER_CANCELLATION_REQUEST"
        orderId:
          allOf:
            - $ref: "#/components/schemas/Order/properties/id"
        orderURL:
          type: "string"
          format: "uri"
          description: "The URL to get the order details"
        createdAt:
          type: "string"
          format: date-time
          description: "Order creation date and time. \n\n(UTC date-time in ISO timestamp format)."
        sourceAppId:
          type: "string"
          format: UUID
          description: "This field must be filled in with the AppId of the **Ordering Application** that originated the order. This field is to help the applications that will work as a Hub, intermediating the requests from the **Ordering Application** with the **Software Service**."

    EventMetadataCancel:
      description: Metadata
      required: ["metadata"]
      allOf:
        - $ref: "#/components/schemas/Event"
        - type: object
        - properties:
            metadata:
              required: ["reason", "code"]
              type: object
              description: "Information related to the Event Type"
              properties:
                reason:
                  type: "string"
                  description: "Reason for the cancellation"
                code:
                  type: "string"
                  description: "Cancelation reason code"
                  enum:
                    - CONSUMER_CANCELLATION_REQUESTED
                    - OTHER_CANCELLATION_REASON
                clientId:
                  type: "string"
                  description: "The ID of the client system that generated the action that resulted in this event (to be used with application with multiple stations)."

    EventMetadata:
      description: Metadata
      allOf:
        - $ref: "#/components/schemas/Event"

    EventMetadataPickup:
      description: Metadata
      allOf:
        - $ref: "#/components/schemas/Event"
        - type: object
        - properties:
            metadata:
              type: object
              description: "Information related to the Event Type"
              required: ["pickupArea"]
              properties:
                pickupArea:
                  type: "string"
                  description: "Information about the pickup area that the merchant needs to deliver the order. Eg: Parking Lot Number"

    EventMetadataConfirm:
      description: Metadata
      required: ["metadata"]
      allOf:
        - $ref: "#/components/schemas/Event"
        - type: object
        - properties:
            metadata:
              type: object
              description: "Information related to the Event Type"
              properties:
                # expectedPreparationStartTime: Removed field. See Issue (https://github.com/Abrasel-Nacional/Open-Delivery-Beta-Test/issues/7)
                #   type: "string"
                #   format: "date-time"
                #   description: "Expected preparation start time after Order Confirmation. This can be used by the **Ordering Application** to inform the merchant to delay the start of the preparation for any reason."
                clientId:
                  type: "string"
                  description: "The ID of the client system that generated the action that resulted in this event (to be used with application with multiple stations)"

    #Common

    Address:
      type: "object"
      title: "Address"
      required:
        [
          "country",
          "state",
          "city",
          "district",
          "street",
          "number",
          "postalCode",
          "complement",
          "latitude",
          "longitude",
        ]
      properties:
        "country":
          type: "string"
          pattern: "^[A-Z]{2}$"
          description: "Two-letter [ISO 3166-1 alpha-2](https://www.iso.org/standard/72482.html) country code."
          example: "BR"
        state:
          type: "string"
          description: "State or country subdivision. It is recommended (but not required) that you use the [ISO 3166-2](https://www.iso.org/standard/72483.html) representation. "
          example: "BR-SP"
        "city":
          type: "string"
          description: "City name."
          example: "São Paulo"
        "district":
          type: "string"
          description: "District or Neighborhood name."
          example: "Moema"
        "street":
          type: "string"
          description: "Street Name."
          example: "Plaza Avenue"
        "number":
          type: "string"
          description: "Street Number."
          example: "100"
        "postalCode":
          type: "string"
          description: "Postal Code"
          example: "20111-000"
        "complement":
          type: "string"
          description: "Address complement."
          example: "BL 02 AP 31"
        "reference":
          type: "string"
          description: "Address reference."
          example: "Yellow House"
        "latitude":
          type: "number"
          format: "float"
          description: "Latitude in degrees. Values are restricted to the range [[-90, 90]].\n\n\n\nThe precision should be **at least 5 decimal places (multipleOf: 0.00001)**."
          example: -23.54809
        "longitude":
          type: "number"
          format: "float"
          description: "Longitude in degrees. Values are restricted to the range [[-180, 180]].\n\n\n\nThe precision should be **at least 5 decimal places (multipleOf: 0.00001)**."
          example: -46.63638

    AddressLogistics:
      type: "object"
      title: "Address"
      required:
        [
          "country",
          "state",
          "city",
          "district",
          "street",
          "number",
          "postalCode",
          "complement",
        ]
      properties:
        "country":
          type: "string"
          pattern: "^[A-Z]{2}$"
          description: "Two-letter [ISO 3166-1 alpha-2](https://www.iso.org/standard/72482.html) country code."
          example: "BR"
        state:
          type: "string"
          description: "State or country subdivision. It is recommended (but not required) that you use the [ISO 3166-2](https://www.iso.org/standard/72483.html) representation. "
          example: "BR-SP"
        "city":
          type: "string"
          description: "City name."
          example: "São Paulo"
        "district":
          type: "string"
          description: "District or Neighborhood name."
          example: "Moema"
        "street":
          type: "string"
          description: "Street Name."
          example: "Plaza Avenue"
        "number":
          type: "string"
          description: "Street Number."
          example: "100"
        "postalCode":
          type: "string"
          description: "Postal Code"
          example: "20111-000"
        "complement":
          type: "string"
          description: "Address complement."
          example: "BL 02 AP 31"
        "reference":
          type: "string"
          description: "Address reference."
          example: "Yellow House"
        "latitude":
          type: "number"
          format: "float"
          description: "Latitude in degrees. Values are restricted to the range [[-90, 90]].\n\n\n\nThe precision should be **at least 5 decimal places (multipleOf: 0.00001)**."
          example: -23.54809
        "longitude":
          type: "number"
          format: "float"
          description: "Longitude in degrees. Values are restricted to the range [[-180, 180]].\n\n\n\nThe precision should be **at least 5 decimal places (multipleOf: 0.00001)**."
          example: -46.63638

    AddressContract:
      type: "object"
      title: "Address"
      required:
        [
          "country",
          "state",
          "city",
          "district",
          "street",
          "number",
          "postalCode",
          "complement",
        ]
      properties:
        "country":
          type: "string"
          pattern: "^[A-Z]{2}$"
          description: "Two-letter [ISO 3166-1 alpha-2](https://www.iso.org/standard/72482.html) country code."
          example: "BR"
        state:
          type: "string"
          description: "State or country subdivision. It is recommended (but not required) that you use the [ISO 3166-2](https://www.iso.org/standard/72483.html) representation. "
          example: "BR-SP"
        "city":
          type: "string"
          description: "City name."
          example: "São Paulo"
        "district":
          type: "string"
          description: "District or Neighborhood name."
          example: "Moema"
        "street":
          type: "string"
          description: "Street Name."
          example: "Plaza Avenue"
        "number":
          type: "string"
          description: "Street Number."
          example: "100"
        "postalCode":
          type: "string"
          description: "Postal Code"
          example: "20111-000"
        "complement":
          type: "string"
          description: "Address complement."
          example: "BL 02 AP 31"
        "reference":
          type: "string"
          description: "Address reference."
          example: "Yellow House"

    ContactPhones:
      type: "object"
      title: "Contact Phones"
      required: ["commercialNumber"]
      properties:
        "commercialNumber":
          type: "string"
          description: "Telephone number of the merchant"
          example: "11999999999"
        "whatsappNumber":
          type: "string"
          description: "Whatsapp number of the merchant"
          example: "11998888888"

    Price:
      type: "object"
      title: "Price"
      required: ["value", "currency"]
      properties:
        value:
          type: "number"
          format: "decimal"
          description: "Price value. 4 decimals places are accepted"
          example: 40
        currency:
          type: "string"
          pattern: "^[A-Z]{3}$"
          description: "The 3-letter ISO 4217 currency code."
          example: "BRL"

    Repository:
      type: "object"
      title: "Repository"
      required:
        [
          "document",
          "corporateName",
          "postalCode",
          "email",
          "website",
          "baseApiUrl",
          "TTL",
          "hostCompanyDocument",
        ]
      properties:
        document:
          type: "string"
          description: "Company registration document"
          pattern: "/^\\d{14}$/"
        corporateName:
          type: "string"
          description: "Corporate Name"
          maxLength: 500
        postalCode:
          type: "string"
          description: "Postal Code"
        email:
          type: "string"
          description: "Contact Email. It is recommended that a contact be made available to deal with specific **Open Delivery** issues."
        website:
          type: "string"
          format: "URL"
          description: "Company Website. It is recommended to have a website (or landing page) with information about how the company works with Open Delivery."
        baseApiUrl:
          type: "string"
          format: "URL"
          description: "Base URL of the endpoints with the company's data. It will be used by the indexing system to search the establishments under the responsibility of the menu software (see endpoint) and to search public menus (see endpoint)."
        hostCompanyDocument:
          type: "string"
          description: "**Software Service** registration document that provides the merchant information."
          pattern: "/^\\d{14}$/"
        TTL:
          type: "integer"
          description: "Time to Live (in seconds).
            \nA new request must be done when the TTL expires."

    Error:
      type: object
      required: ["title", "status"]
      properties:
        title:
          type: string
          description: "Short description of the problem."
          example: "Unexpected error"
        status:
          type: integer
          description: "HTTP code of the returned status."
          example: 500

    Image:
      description: Image Object
      type: object
      required: ["URL", "CRC"]
      properties:
        URL:
          type: "string"
          format: "uri"
          description:
            "URL pointing to an image of the merchant logo.\n\n Image requirements:
            \n - Hosted on a secure connection (SSL).
            \n - File size must be less than 10MB.
            \n - Image must be in JPEG, PNG or GIF format.
            \n - Both width and height must be between 320px and 1144px."
          example: "https://food-company.com/image.jpg"
        CRC-32:
          type: string
          format: "CRC32"
          description: "CRC-32 of the image file. This field can be used to check for changes in the image file."
          example: "96b41025"

    #Logistic

    DeliveryOrder:
      description: Delivery Order Object.
      type: object
      required:
        [
          orderId,
          orderDisplayId,
          merchant,
          pickupAddress,
          returnToMerchant,
          canCombine,
          deliveryAddress,
          customerName,
          vehicle,
          limitTimes,
          totalOrderPrice,
          totalWeight,
          payments,
        ]
      properties:
        orderId:
          type: string
          format: "UUID"
          description: "The orderId generated by the **`Ordering Application`**."
        orderDisplayId:
          type: string
          description: "Order Id shown in the **`Ordering Application`** interface for the customer."
          example: "96b41025"
        merchant:
          type: "object"
          required: [id, "name"]
          description: "Merchant information."
          properties:
            id:
              allOf:
                - $ref: "#/components/schemas/Merchant/properties/id"
            name:
              allOf:
                - $ref: "#/components/schemas/BasicInfo/properties/name"
        pickupAddress:
          description: "Pickup Address."
          allOf:
            - $ref: "#/components/schemas/AddressLogistics"
            - type: object
              properties:
                pickupLocation:
                  type: string
                  description: "Pickup Location"
                parkingSpace:
                  type: boolean
                  description: "Parking Space"
                instructions:
                  type: string
                  description: "Any instructions that may help the delivery."
        notifyPickup:
          type: boolean
          description: "Inform whether the **`Logistic Service`** to wait for a notification that the order has actually been picked. This notification happens via the endpoint: [POST /logistics/orderPicked/{orderId}](#operation/logisticsPicked)"
        notifyConclusion:
          type: boolean
          description: "Inform whether the **`Logistic Service`** to wait for a delivery finish notification from the requester, before actually finalizing the delivery in its system. This notification is made via the endpoint: [POST /logistics/finishDelivery/{orderId}](#operation/logisticsFinish)"
        returnToMerchant:
          type: boolean
          description: "Inform whether the delivery man should return to the pickup address after the delivery has been made."
        canCombine:
          type: boolean
          description: "Inform whether the **`Logistic Service`** can combine this order with other orders in the same delivery."
        deliveryAddress:
          description: "Delivery Address"
          allOf:
            - $ref: "#/components/schemas/AddressLogistics"
            - type: object
              properties:
                instructions:
                  type: string
                  description: "Instructions"
        customerName:
          type: "string"
          description: "Customer Name."
        vehicle:
          description: "Vehicle Info. informs which vehicle options are to be used for delivery. More than one can be informed, but the logistics service must choose only one of the types of vehicles informed."
          allOf:
            - $ref: "#/components/schemas/Vehicle"
        limitTimes:
          type: object
          description: "Limit Times. Informs the maximum pickup and delivery times that must be met by the `Logistics Service`."
          properties:
            pickupLimit:
              type: integer
              description: "Pickup Limit in **minutes**. It should be used to inform the maximum amount of minutes from the time the request was made to which the order should be collected at the merchant."
              example: 23
            deliveryLimit:
              type: integer
              description: "Delivery Limit in **minutes**. It should be used to inform the maximum amount of minutes from the time the request was made to which the order should be delivered at the consumer's address."
              example: 48
            orderCreatedAt:
              type: string
              format: date-time
              description: "The date and time that the Order was created at the **Ordering Application**. \n\n(UTC date-time in ISO timestamp format)."
        totalOrderPrice:
          description: "Total order price that was calculated and displayed for the final consumer in the **`Ordering Application`**. This value may already contain taxes and shipping in addition to the value of the items purchased."
          allOf:
            - $ref: "#/components/schemas/Price"
        totalWeight:
          type: integer
          description: "Total packaging weight in **grams**"
        packageVolume:
          type: number
          description: "The cubage of the packaging in **cubic meters (m³)**."
        packageQuantity:
          type: integer
          description: |-
            Number of packages that will be transported in this order. For example: 1 bag, 2 packages or 3 boxes. 
            > The unit of measure will not be considered, only the quantity.
        specialInstructions:
          type: string
          description: "Free text to describe special instructions that may apply. These instructions can be used to give some special guidance to the delivery person at the time of the pickup or delivery."
        additionalPricePercentual:
          type: integer
          description: |-
            Indicates to the **`Logistic Service`** an additional percentage to the list price that the requester agrees to pay for the delivery.
            > The delivery request will be refused if the delivery price exceeds this value.

            Example: List Price = $10  
                     Actual calculated price = $15  
                     Additonal price percentage = **50**


            In this case, any value informed below 50, would result in the order being rejected.
        payments:
          type: object
          description: "Payments Info. It informs the payment methods chosen by the consumer in the **`Ordering Application`**. This section should be used by the `Logistics Service` to check how much the delivery man should receive from the consumer when delivering the order."
          properties:
            method:
              type: string
              description: |-
                OFFLINE - The order will be paid by the consumer at the time the order is received.  
                ONLINE - The order has already been paid through the order application.
              enum:
                - OFFLINE
                - ONLINE
            wirelessPos:
              type: boolean
              description: "Indicates whether the delivery man should take the wireless payment device with him."
            offlineMethod:
              type: array
              description: "If the method is `OFFLINE`, the payment information should be provided."
              items:
                type: object
                description: ""
                properties:
                  type:
                    type: "string"
                    enum:
                      - "CREDIT"
                      - "DEBIT"
                      - "MEAL_VOUCHER"
                      - "FOOD_VOUCHER"
                      - "PIX"
                      - "CASH"
                      - "CREDIT_DEBIT"
                      - "OTHER"
                  amount:
                    allOf:
                      - $ref: "#/components/schemas/Price"
            change:
              description: If type is `CASH`, tells how much change will be needed.
              allOf:
                - $ref: "#/components/schemas/Price"
        combinedOrdersIds:
          type: "array"
          description: "Combined Orders Ids. Informs the logistics service of the Id of other orders already in progress so that the operator can combine these orders. This combination may or may not be accepted by the logistic service, respecting the contracted policies."
          items:
            type: string
            format: UUID

    Vehicle:
      description: Vehicle Object.
      type: object
      required: [type, container]
      properties:
        type:
          type: "array"
          description: "Vehicle Type"
          items:
            type: string
            enum:
              - "MOTORBIKE_BAG"
              - "MOTORBIKE_BOX"
              - "CAR"
              - "BYCICLE"
              - "SCOOTER"
              - "VUC"
        container:
          type: "string"
          description: "Vehicle container (bag) type."
          enum:
            - "NORMAL"
            - "THERMIC"
        containerSize:
          type: string
          description: "Vehicle container (bag) size."
          enum:
            - "SMALL"
            - "MEDIUM"
            - "LARGE"
            - "EXTRA_LARGE"
        instruction:
          type: "string"
          description: "Free text to describe special instructions that may apply. These instructions can be used to give some special guidance to the delivery person at the time of the pickup or delivery."

    DeliveryOrderResponse:
      description: Delivery Order Response Object.
      type: object
      required: [deliveryId, event, completion]
      properties:
        deliveryId:
          type: "string"
          format: "UUID"
          description: "The delivery Id generated by the **`Logistic Service`**."
        event:
          description: "Current event of the order. It is expected to be sent with the value **`PENDING`** at this moment, since the acceptance or rejection of the request will be processed asynchronously."
          allOf:
            - $ref: "#/components/schemas/DeliveryEvent/properties/type"
        completion:
          type: "object"
          description: "Informs the expected date and time for sending the acceptance or refusal of the delivery order."
          properties:
            estimate:
              type: string
              format: date-time
              description: "Expected date and time for completion. \n\n(UTC date-time in ISO timestamp format)."
            rejectAfter:
              type: string
              format: date-time
              description: "Maximum date and time to wait for the acceptance or refusal of the order. After this time the delivery request should be disregarded and a new request should be made. \n\n(UTC date-time in ISO timestamp format)."
        deliveryDetailsURL:
          type: "string"
          format: "URI"
          description: |-
            It is the URL where the delivery information can be found. 
            It should return the [GET /logistics/delivery/{orderId}](#operation/logisticDetails) route for this order."

    DeliveryOrderEvent:
      description: Delivery Order Event Object.
      type: object
      required:
        [
          deliveryId,
          orderId,
          orderDisplayId,
          merchant,
          event,
          customerName,
          vehicle,
          deliveryPrice,
          eta,
          deliveryMan,
        ]
      properties:
        deliveryId:
          type: "string"
          format: "UUID"
          description: "The delivery ID generated by the `Logistics Service`."
        orderId:
          type: "string"
          format: "UUID"
          description: "The orderId generated by the **`Ordering Application`**."
        orderDisplayId:
          type: string
          description: "Order Id shown in the **`Ordering Application`** interface for the customer."
          example: "96b41025"
        merchant:
          type: "object"
          required: [id, "name"]
          description: "Merchant information."
          properties:
            id:
              allOf:
                - $ref: "#/components/schemas/Merchant/properties/id"
            name:
              allOf:
                - $ref: "#/components/schemas/BasicInfo/properties/name"
        event:
          description: "Current Event Info."
          allOf:
            - $ref: "#/components/schemas/DeliveryEvent"
        problem:
          type: array
          description: "List of problems that may occur."
          items:
            allOf:
              - $ref: "#/components/schemas/DeliveryProblem"
        customerName:
          type: "string"
          description: "Customer Name."
        vehicle:
          description: "Chosen Vehicle Info."
          allOf:
            - $ref: "#/components/schemas/ChosenVehicle"
        deliveryPrice:
          description: "Delivery Pricing Info."
          allOf:
            - $ref: "#/components/schemas/DeliveryPrice"
        eta:
          description: "ETA Times."
          allOf:
            - $ref: "#/components/schemas/ETA"
        deliveryMan:
          description: "Delivery Man Info."
          allOf:
            - $ref: "#/components/schemas/DeliveryMan"
        geoLocalization:
          description: "Geo Localization."
          allOf:
            - $ref: "#/components/schemas/GeoLocalization"
        externalTrackingURL:
          type: string
          format: "URI"
          description: "External URL, provided by the logistics service to track the delivery on a specific page. Example: Real-time map view, or delivery timeline."
        combinedOrdersIds:
          type: "array"
          description: "Combined Orders Ids. Informs which other orders from the same merchant are being carried by the same delivery man, with the same `deliveryId`."
          items:
            type: string
            format: UUID

    DeliveryEvent:
      description: Delivery Event Object.
      type: object
      required: [type, datetime]
      properties:
        type:
          type: string
          description: "The current delivery event."
          enum:
            - PENDING
            - ACCEPTED
            - REJECTED
            - PICKUP_ONGOING
            - ARRIVED_AT_MERCHANT
            - ORDER_PICKED
            - DELIVERY_ONGOING
            - ARRIVED_AT_CUSTOMER
            - ORDER_DELIVERED
            - RETURNING_TO_MERCHANT
            - RETURNED_TO_MERCHANT
            - DELIVERY_FINISHED
            - CANCELLED
        message:
          type: string
          description: "Free message. It should be used to provide more detailed information."
        datetime:
          type: string
          format: date-time
          description: "Date and time when the event ocurred. \n\n(UTC date-time in ISO timestamp format)."
        rejectionInfo:
          description: "Rejection Info. It should be informed to provide more information when the event type is `REJECTED`."
          allOf:
            - $ref: "#/components/schemas/DeliveryEventDenied"

    DeliveryEventDenied:
      description: Delivery Event Denied Object.
      type: object
      required: [reason]
      discriminator:
        propertyName: reason
        mapping:
          PRICE_EXCEEDED: "#/components/schemas/DeliveryEventDeniedPrice"
          VEHICLE_NOT_AVAILABLE: "#/components/schemas/DeliveryEventDeniedVehicle"
          NO_DELIVERYMAN_AVAILABLE: "#/components/schemas/DeliveryEventDeniedNoDeliveryMan"
          DOES_NOT_MEET_REQUESTED_TIMES: "#/components/schemas/DeliveryEventDeniedEta"
          REGION_NOT_SERVED: "#/components/schemas/DeliveryEventDenied"
          INVALID_ADDRESS: "#/components/schemas/DeliveryEventDenied"
          OTHER: "#/components/schemas/DeliveryEventDenied"
      properties:
        reason:
          type: string
          description: Rejection reason.
          enum:
            - "PRICE_EXCEEDED"
            - "VEHICLE_NOT_AVAILABLE"
            - "NO_DELIVERYMAN_AVAILABLE"
            - "DOES_NOT_MEET_REQUESTED_TIMES"
            - "REGION_NOT_SERVED"
            - "OTHER"

    DeliveryEventDeniedVehicle:
      description: Metadata
      allOf:
        - $ref: "#/components/schemas/DeliveryEventDenied"
        - type: object
        - properties:
            metadata:
              type: object
              description: "Information about vehicles availability at the moment."
              properties:
                availableVehicles:
                  type: integer
                  description: "Informs how many vehicles are available at the moment."
                vehiclesAvailable:
                  description: "List of currently available vehicles."
                  allOf:
                    - $ref: "#/components/schemas/Vehicle"
                nextAvailableVehicle:
                  type: integer
                  description: "Informs how soon the next vehicle will be available in **minutes**."

    DeliveryEventDeniedPrice:
      description: Metadata
      allOf:
        - $ref: "#/components/schemas/DeliveryEventDenied"
        - type: object
        - properties:
            metadata:
              type: object
              description: "The actual delivery price calculated according to the data given in the request."
              allOf:
                - $ref: "#/components/schemas/DeliveryPrice"

    DeliveryEventDeniedNoDeliveryMan:
      description: Metadata
      allOf:
        - $ref: "#/components/schemas/DeliveryEventDenied"
        - type: object
        - properties:
            metadata:
              type: object
              description: "Information about delivery man availability."
              properties:
                nextAvailableVehicle:
                  type: integer
                  description: "Informs how soon the next delivery man will be available in **minutes**."

    DeliveryEventDeniedEta:
      description: Metadata
      allOf:
        - $ref: "#/components/schemas/DeliveryEventDenied"
        - type: object
        - properties:
            metadata:
              type: object
              description: "The actual ETAs calculated according to the data given in the request."
              allOf:
                - $ref: "#/components/schemas/ETA"

    DeliveryProblem:
      description: Delivery Problem Object.
      type: object
      required: [reason, datetime, canFinishDeliver, needMerchantAction]
      properties:
        reason:
          type: string
          description: "Problem reason."
          enum:
            - DELIVERY_MAN_OCCURRENCE
            - PAYMENT_PROBLEMS
            - WRONG_PRODUCT_OR_ITEM
            - ORDER_DELAYED
            - ORDER_DAMAGED_OR_VIOLATED
            - CUSTOMER_DID_NOT_PLACE_ORDER
            - CUSTOMER_ADDRESS_UNKNOWN
            - ORDER_MISSING_ITEMS
            - NOBODY_TO_RECEIVE
            - DELIVERY_MAN_WAITING_PAYMENT_FOR_ALREADY_PAID_ORDER
            - ORDER_DELIVERED_WITHOUT_PAYMENT
            - FRAUD_OR_THEFT
            - OTHER
        message:
          type: string
          description: "Free message. It should be used to provide more detailed information."
        datetime:
          type: string
          format: date-time
          description: "Date and time when the problem ocurred. \n\n(UTC date-time in ISO timestamp format)."
        canFinishDeliver:
          type: boolean
          description: "Informs whether or not it is still possible to finish the delivery."
        needMerchantAction:
          type: boolean
          description: "Informs whether or not the merchant needs to perform some action in order for delivery to continue."

    DeliveryProblemHistory:
      description: Delivery Event.
      type: object
      required: [reason, datetime, resolved]
      properties:
        reason:
          type: string
          description: "Problem reason."
          enum:
            - DELIVERY_MAN_OCCURRENCE
            - PAYMENT_PROBLEMS
            - WRONG_PRODUCT_OR_ITEM
            - ORDER_DELAYED
            - ORDER_DAMAGED_OR_VIOLATED
            - CUSTOMER_DID_NOT_PLACE_ORDER
            - CUSTOMER_ADDRESS_UNKNOWN
            - ORDER_MISSING_ITEMS
            - NOBODY_TO_RECEIVE
            - DELIVERY_MAN_WAITING_PAYMENT_FOR_ALREADY_PAID_ORDER
            - ORDER_DELIVERED_WITHOUT_PAYMENT
            - FRAUD_OR_THEFT
            - OTHER
        message:
          type: string
          description: "Free message. It should be used to provide more detailed information."
        datetime:
          type: string
          format: date-time
          description: "Date and time when the problem ocurred. \n\n(UTC date-time in ISO timestamp format)."
        resolved:
          type: boolean
          description: "Informs if the problem was resolved or not."
        actionTaken:
          type: boolean
          description: "Action taken by the requester."
          enum:
            - RETURN_TO_STORE
            - DELIVER_PRODUCT
            - CANCEL_DELIVERY
        resolutionDate:
          type: string
          format: date-time
          description: "Date and time when the problem was resolved. \n\n(UTC date-time in ISO timestamp format)."

    ChosenVehicle:
      description: Delivery Order Response Object
      type: object
      required: [type, container]
      properties:
        type:
          type: string
          description: "Vehicle Type."
          enum:
            - "MOTORBIKE_BAG"
            - "MOTORBIKE_BOX"
            - "CAR"
            - "BYCICLE"
            - "SCOOTER"
            - "VUC"
        container:
          type: "string"
          description: "The veichle container (bag) type."
          enum:
            - "NORMAL"
            - "THERMIC"
        containerSize:
          type: string
          description: "Vehicle container (bag) size."
          enum:
            - "SMALL"
            - "MEDIUM"
            - "LARGE"
            - "EXTRA_LARGE"
        instruction:
          type: "string"
          description: "Special Instructions."

    DeliveryPrice:
      description: Delivery Pricing
      type: object
      required: [price, pricingList, additionalPricePercentual]
      properties:
        price:
          description: "The calculated price of the delivery. It may be 0. The price shall be calculated according to the Price List being used, as well as previously established commercial agreements."
          allOf:
            - $ref: "#/components/schemas/Price"
        pricingList:
          type: string
          description: "Indicates what list was used to calculate the delivery price."
          enum:
            - "NORMAL"
            - "DYNAMIC"
        additionalPricePercentual:
          type: integer
          description: |-
            Indicates the additional percentage to the list price that was calculated for this delivery.

            Example: List Price = $10  
                     Actual calculated price = $15  
                     Additonal price percentage = **50**

    DeliveryAvailabilityPrice:
      description: Delivery Order Object
      type: object
      required:
        [
          pickupAddress,
          returnToMerchant,
          canCombine,
          deliveryAddress,
          vehicle,
          limitTimes,
          totalOrderPrice,
          totalWeight,
        ]
      properties:
        merchant:
          type: "object"
          required: [id, "name"]
          description: "Merchant information."
          properties:
            id:
              allOf:
                - $ref: "#/components/schemas/Merchant/properties/id"
            name:
              allOf:
                - $ref: "#/components/schemas/BasicInfo/properties/name"
        pickupAddress:
          description: "Pickup Address."
          allOf:
            - $ref: "#/components/schemas/AddressLogistics"
            - type: object
              properties:
                pickupLocation:
                  type: string
                  description: "Pickup Location"
                parkingSpace:
                  type: boolean
                  description: "Parking Space"
                instructions:
                  type: string
                  description: "Instructions"
        returnToMerchant:
          type: boolean
          description: "Inform whether the delivery man should return to the pickup address after the delivery has been made."
        canCombine:
          type: boolean
          description: "Inform whether the **`Logistic Service`** can combine this order with other orders in the same delivery."
        deliveryAddress:
          description: "Delivery Address"
          allOf:
            - $ref: "#/components/schemas/AddressLogistics"
            - type: object
              properties:
                instructions:
                  type: string
                  description: "Instructions"
        vehicle:
          description: "Vehicle Info. informs which vehicle options are to be used for delivery. More than one can be informed, but the logistics service must choose only one of the types of vehicles informed."
          allOf:
            - $ref: "#/components/schemas/Vehicle"
        limitTimes:
          type: object
          description: "Limit Times. Informs the maximum pickup and delivery times that must be met by the `Logistics Service`."
          properties:
            pickupLimit:
              type: integer
              description: "Pickup Limit in **minutes**. It should be used to inform the maximum amount of minutes from the time the request was made to which the order should be collected at the merchant."
              example: 23
            deliveryLimit:
              type: integer
              description: "Delivery Limit in **minutes**. It should be used to inform the maximum amount of minutes from the time the request was made to which the order should be delivered at the consumer's address."
              example: 48
            orderCreatedAt:
              type: string
              format: date-time
              description: "The date and time that the Order was created at the **Ordering Application**. \n\n(UTC date-time in ISO timestamp format)."
        totalOrderPrice:
          description: "Total order price that was calculated and displayed for the final consumer in the **`Ordering Application`**. This value may already contain taxes and shipping in addition to the value of the items purchased."
          allOf:
            - $ref: "#/components/schemas/Price"
        totalWeight:
          type: integer
          description: "Total Weight in **grams**"
        packageVolume:
          type: number
          description: "The cubage of the packaging in **cubic meters (m³)**."
        volumes:
          type: integer
          description: |-
            Number of volumes that will be transported in this order. For example, 2 packages, or 3 boxes. 
            > The unit of measure will not be considered, only the quantity.
        specialInstructions:
          type: string
          description: "Free text to describe special instructions that may apply."
        additionalPricePercentual:
          type: integer
          description: |-
            Indicates to the **`Logistic Service`** an additional percentage to the list price that the requester agrees to pay for the delivery.
            > The delivery request will be refused if the delivery price exceeds this value.

            Example: List Price = $10  
                     Actual calculated price = $15  
                     Additonal price percentage = **50**


            In this case, any value informed below 50, would result in the order being rejected.
        onlinePayment:
          type: boolean
          description: "Informs whether or not the payment has already been made in the **`Ordering Application`**"

    DeliveryAvailabilityPriceResponse:
      description: Delivery Order Response Object
      type: object
      properties:
        deliveryPrice:
          description: "Delivery Pricing Info."
          allOf:
            - $ref: "#/components/schemas/DeliveryPrice"
        vehicles:
          type: object
          description: "Chosen Vehicle Info."
          properties:
            availableVehicles:
              type: integer
              description: "Informs how many vehicles are available at the moment."
            vehiclesAvailable:
              description: "List of currently available vehicles."
              allOf:
                - $ref: "#/components/schemas/Vehicle"
            nextAvailableVehicle:
              type: integer
              description: "Informs how soon the next vehicle will be available in **minutes**."
        ETAs:
          description: "ETAs"
          allOf:
            - $ref: "#/components/schemas/ETA"

    ETA:
      description: ETA
      type: object
      required:
        [
          pickupEtaMinutes,
          pickupEtaDatetime,
          deliveryEtainMinutes,
          deliveryEtaDatetime,
          maxDeliveryTime,
        ]
      properties:
        updateMethod:
          type: string
          description: |-
            Update Method: Indicates how the times will be updated in the events.

            `OFFLINE`: The time will be calculated in the event `ACCEPTED` and will no longer be updated in the following events.  

            `ONLINE`: The time will be updated in all events. In this case, when the collection has already occurred, the `pickupEtaMinutes` property will be set to **0** and the `pickupEtaDatetime` property will be the time when the collection occurred.
          enum:
            - OFFLINE
            - ONLINE
        pickupEtaMinutes:
          type: integer
          description: "Pickup Eta in **minutes**. Informs how many minutes it will take the delivery man to arrive at the merchant for order pickup."
        pickupEtaDatetime:
          type: string
          format: date-time
          description: "Pickup Eta Datetime. Informs the date and time the delivery man is expected to arrive at the merchant for order pickup. \n\n(UTC date-time in ISO timestamp format)."
        deliveryEtainMinutes:
          type: integer
          description: "Delivery Eta in **minutes**. Informs how many minutes it will take the delivery man to arrive at the consumer's address for order delivery."
        deliveryEtaDatetime:
          type: string
          format: date-time
          description: "Delivery Eta Datetime. Informs the date and time the delivery man is expected to arrive at the consumer's address for order delivery. \n\n(UTC date-time in ISO timestamp format)."
        maxDeliveryTime:
          type: string
          format: date-time
          description: "Maximum Date and Time for delivery. This time should not exceed the delivery time limit given in the order request. \n\n(UTC date-time in ISO timestamp format)."

    DeliveryMan:
      description: Delivery Man
      type: object
      required: [id, name]
      properties:
        id:
          type: string
          description: "Delivery Man Id generated at the `Logistics Service`."
        name:
          type: string
          description: "Delivery Man Name."
        pictureURL:
          type: string
          format: "URI"
          description: "URL to access the photo of the delivery man. Before entering this field, check that the parties allow data to be shared according to data disclosure laws and rules."
        phone:
          type: string
          description: "Delivery Man Phone. Before entering this field, check that the parties allow data to be shared according to data disclosure laws and rules."

    GeoLocalization:
      description: Delivery Event
      type: object
      required:
        [latitude, longitude, distanceToPickup, distanceToDelivery, timestamp]
      properties:
        latitude:
          type: "number"
          format: "float"
          description: "Indicates the latitude coordinate of the actual position of the delivery man.\n\n\n\nLatitude in degrees. Values are restricted to the range [[-90, 90]].\n\n\n\nThe precision should be **at least 5 decimal places (multipleOf: 0.00001)**."
          example: -23.54809
        longitude:
          type: "number"
          format: "float"
          description: "Indicates the longitude coordinate of the actual position of the delivery man.\n\n\n\nLongitude in degrees. Values are restricted to the range [[-180, 180]].\n\n\n\nThe precision should be **at least 5 decimal places (multipleOf: 0.00001)**."
          example: -46.63638
        lastAddress:
          description: The last known address that the delivery man was when the event was sent.
          type: object
          required: [id, orderId, orderDisplayId]
          properties:
            "country":
              type: "string"
              pattern: "^[A-Z]{2}$"
              description: "Two-letter [ISO 3166-1 alpha-2](https://www.iso.org/standard/72482.html) country code."
              example: "BR"
            state:
              type: "string"
              description: "State or country subdivision. It is recommended (but not required) that you use the [ISO 3166-2](https://www.iso.org/standard/72483.html) representation. "
              example: "BR-SP"
            "city":
              type: "string"
              description: "City name."
              example: "São Paulo"
            "district":
              type: "string"
              description: "District or Neighborhood name."
              example: "Moema"
            "street":
              type: "string"
              description: "Street Name."
              example: "Plaza Avenue"
            "postalCode":
              type: "string"
              description: "Postal Code."
              example: "20111-000"
            distanceToPickup:
              type: string
              description: "Distance To Pickup in **meters**."
            distanceToDelivery:
              type: string
              description: "Distance To Delivery in **meters**."
            timestamp:
              type: string
              format: date-time
              description: "Date and time when this information is valid. \n\n(UTC date-time in ISO timestamp format)."

    DeliveryCancel:
      description: Delivery Cancel
      type: object
      required: [reason]
      properties:
        reason:
          type: string
          description: "Cancel Reason."
          enum:
            - CONSUMER_CANCELLATION_REQUESTED
            - NO_SHOW
            - PROBLEM_AT_MERCHANT
            - HIGH_ACCEPTANCE_TIME
            - INCORRECT_ORDER_OR_PRODUCT_PICKUP
            - PROBLEM_RESOLUTION
            - DISCOMBINE_ORDER
            - OTHER
        action:
          type: string
          description: "Action to be taken by the delivery man, after the cancellation."
          enum:
            - RETURN_TO_STORE
            - CANCEL_DELIVERY
        message:
          type: string
          description: "Free message. It should be used to provide more detailed information."

    DeliveryCancelResponse:
      type: object
      required: [additionalCharges]
      properties:
        additionalCharges:
          type: boolean
          description: "Informs whether or not the cancellation will cause an additional charge to the delivery."

    DeliveryHandleProblem:
      description: Delivery Cancel
      type: object
      required: [reason, action]
      properties:
        reason:
          type: string
          description: "Problem Reason."
          enum:
            - DELIVERY_MAN_OCCURRENCE
            - PAYMENT_PROBLEMS
            - WRONG_PRODUCT_OR_ITEM
            - ORDER_DELAYED
            - ORDER_DAMAGED_OR_VIOLATED
            - CUSTOMER_DID_NOT_PLACE_ORDER
            - CUSTOMER_ADDRESS_UNKNOWN
            - ORDER_MISSING_ITEMS
            - NOBODY_TO_RECEIVE
            - DELIVERY_MAN_WAITING_PAYMENT_FOR_ALREADY_PAID_ORDER
            - ORDER_DELIVERED_WITHOUT_PAYMENT
            - FRAUD_OR_THEFT
            - OTHER
        action:
          type: string
          description: "The action that the delivery man should take to solve this problem."
          enum:
            - RETURN_TO_STORE
            - DELIVER_PRODUCT
            - CANCEL_DELIVERY
        message:
          type: string
          description: "Free message. It should be used to provide more detailed information."

    DeliveryOrderPicked:
      type: "object"
      title: "Order Picked"
      properties:
        pickupDate:
          type: "string"
          format: date-time
          description: "Date and time when the order pickup occurred. \n\n(UTC date-time in ISO timestamp format)."
        volumePicked:
          type: "integer"
          description: "Number of volumes picked up."
        observation:
          type: string
          description: "Free text. It should be used to provide more detailed information."

    DeliveryOrderFinish:
      type: "object"
      title: "Order Picked"
      required: ["finishDate"]
      properties:
        finishDate:
          type: "string"
          format: date-time
          description: "Date and time when delivery completion occurred. \n\n(UTC date-time in ISO timestamp format)."
        observation:
          type: string
          description: "Free text. It should be used to provide more detailed information."

    DeliveryOrderDetails:
      description: Delivery Order Details Object
      type: object
      required:
        [
          deliveryId,
          orderId,
          orderDisplayId,
          merchant,
          customerName,
          events,
          vehicle,
          deliveryPrice,
          times,
        ]
      properties:
        deliveryId:
          type: "string"
          format: "UUID"
          description: "The delivery ID generated by the `Logistics Service`."
        orderId:
          type: "string"
          format: "UUID"
          description: "The orderId generated by the **`Ordering Application`**."
        orderDisplayId:
          type: string
          description: "Order Id shown in the **`Ordering Application`** interface for the customer."
          example: "96b41025"
        merchant:
          type: "object"
          required: [id, "name"]
          description: "Merchant information."
          properties:
            id:
              allOf:
                - $ref: "#/components/schemas/Merchant/properties/id"
            name:
              allOf:
                - $ref: "#/components/schemas/BasicInfo/properties/name"
        customerName:
          type: "string"
          description: "Customer Name."
        events:
          type: array
          description: "Events History."
          items:
            allOf:
              - $ref: "#/components/schemas/DeliveryEvent"
        problem:
          type: array
          description: "History of problems that occuried during delivery."
          items:
            allOf:
              - $ref: "#/components/schemas/DeliveryProblemHistory"
        vehicle:
          description: "Chosen Vehicle Info."
          allOf:
            - $ref: "#/components/schemas/ChosenVehicle"
        deliveryPrice:
          description: "Delivery Pricing Info."
          allOf:
            - $ref: "#/components/schemas/DeliveryPrice"
        times:
          description: "ETA Times."
          allOf:
            - $ref: "#/components/schemas/DeliveryTimes"
        deliveryMan:
          description: "Delivery Man Info."
          allOf:
            - $ref: "#/components/schemas/DeliveryMan"
        combinedOrdersIds:
          type: "array"
          description: "Combined Orders Ids. Informs which other orders from the same merchant are being carried by the same delivery man, with the same `deliveryId`."
          items:
            type: string
            format: UUID
        externalTrackingURL:
          type: string
          format: "URI"
          description: "External URL, provided by the logistics service to track the delivery on a specific page. Example: Real-time map view, or delivery timeline."

    DeliveryTimes:
      description: ETA
      type: object
      required: [deliveryEtaDate, maxDeliveryTime, isDeliveryFinished]
      properties:
        deliveryEtaDate:
          type: string
          format: date-time
          description: "Delivery Eta Datetime. Informs the date and time the delivery man is expected to arrive at the consumer's address for order delivery. \n\n(UTC date-time in ISO timestamp format)."
        maxDeliveryTime:
          type: string
          format: date-time
          description: "Maximum Date and Time for delivery. This time should not exceed the delivery time limit given in the order request. \n\n(UTC date-time in ISO timestamp format)."
        isDeliveryFinished:
          type: boolean
          description: "Informs whether or not the delivery is finished."
        deliveryFinishDate:
          type: string
          format: date-time
          description: "Date and time when the delivery finished. \n\n(UTC date-time in ISO timestamp format)."

    #Financial Report

    PaymentsByBatchId:
      type: "array"
      items:
        type: "object"
        required:
          [
            "batchId",
            "batchStatus",
            "createdAt",
            "orderStatus",
            "totals",
            "ordersPeriod",
            "batchPaymentInfo",
            "charges",
          ]
        properties:
          batchId:
            type: "string"
            format: "UUID"
            description: "Unique Payment Batch Identification."
          batchStatus:
            type: "string"
            description: "Payment Batch Status. This status refers only to the order period, not to the batch payment."
            enum:
              - "OPEN"
              - "CLOSED"
          createdAt:
            type: "string"
            format: "date-time"
            description: "Date and time of the payment batch creation. \n\n(UTC date-time in ISO timestamp format)."
          totals:
            type: object
            required: ["orders", "extras", "batchTotal"]
            description: "Contains the total amounts that make up the batch payment."
            properties:
              orders:
                description: "This is the total amount for the values related to completed orders."
                allOf:
                  - $ref: "#/components/schemas/Price"
              extras:
                description: "This is the total amount referring to extra values, such as monthly fees, chargebacks and cancellations."
                allOf:
                  - $ref: "#/components/schemas/Price"
              batchTotal:
                description: "This value refers to the sum of the `orders` and `extras`."
                allOf:
                  - $ref: "#/components/schemas/Price"
          ordersPeriod:
            type: object
            required: ["startDate", "endDate"]
            description: "Period in which the orders were considered to be included in this batch."
            properties:
              startDate:
                type: "string"
                format: "date-time"
                description: "Date and time of the start of the period where orders are being considered within this payment batch. \n\n(UTC date-time in ISO timestamp format)."
              endDate:
                type: "string"
                format: "date-time"
                description: "Date and time of the end of the period where orders are being considered within this payment batch. \n\n(UTC date-time in ISO timestamp format)."
          batchPaymentInfo:
            description: "It contains Information related to the payment of this batch."
            allOf:
              - $ref: "#/components/schemas/BatchPaymentInfo"
          charges:
            description: "Breakdown of all the values that make up the total values of the batch."
            allOf:
              - $ref: "#/components/schemas/PaymentBatchDetails"

    PaymentsByBatchDate:
      type: "object"
      required: [summary]
      properties:
        summary:
          type: object
          description: "Summary of the response results."
          properties:
            searchedPeriod:
              type: object
              description: "Filtered period."
              properties:
                startDate:
                  type: "string"
                  format: "date-time"
                  description: "Initial date of the period. You must consider the most distant date informed in the requisition filters.  \n\n(UTC date-time in ISO timestamp format)."
                endDate:
                  type: "string"
                  format: "date-time"
                  description: "Final date of the period. The most current date entered in the requisition filters should be considered. \n\n(UTC date-time in ISO timestamp format)."
            totalRecordsFound:
              type: integer
              description: "Total amount of records found considering the filters informed."
            totalRecordsReturned:
              type: integer
              description: "Total records that actually returned in the response. Depending on the filtering applied, it is possible that this number is smaller than `totalRecordsFound`. In this case a new request should be made, informing more restrictive filters."
            warningMessage:
              type: string
              description: "This message must return, when the `totalRecordsFound` and `totalRecordsReturned` fields are not equal, informing the systems that there are more records found than those returned, and if possible perform a new search with stricter filters. "
        batches:
          type: array
          description: "Details of all returned payments batches."
          items:
            type: object
            required:
              [
                "batchId",
                "batchStatus",
                "createdAt",
                "orderStatus",
                "totals",
                "ordersPeriod",
                "batchPaymentInfo",
              ]
            description: "Details of all returned payments batches."
            properties:
              batchId:
                type: "string"
                format: "UUID"
                description: "Unique Payment Batch Identification."
              ordersPeriod:
                type: object
                description: "Period in which the orders were considered to be included in this batch."
                properties:
                  startDate:
                    type: "string"
                    format: "date-time"
                    description: "Date and time of the start of the period where orders are being considered within this payment batch. \n\n(UTC date-time in ISO timestamp format)."
                  endDate:
                    type: "string"
                    format: "date-time"
                    description: "Date and time of the end of the period where orders are being considered within this payment batch. \n\n(UTC date-time in ISO timestamp format)."
              batchStatus:
                type: "string"
                description: "Batch Status. This status refers only to the order period, not to the batch payment."
                enum:
                  - "OPEN"
                  - "CLOSED"
              totals:
                type: object
                description: "Contains the total amounts that make up the batch payment."
                properties:
                  orders:
                    description: "This is the total amount for the values related to completed orders."
                    allOf:
                      - $ref: "#/components/schemas/Price"
                  extras:
                    description: "This is the total amount referring to extra values, such as monthly fees, chargebacks and cancellations."
                    allOf:
                      - $ref: "#/components/schemas/Price"
                  batchTotal:
                    description: "This value refers to the sum of the `orders` and `extras`."
                    allOf:
                      - $ref: "#/components/schemas/Price"
              createdAt:
                type: "string"
                format: "date-time"
                description: "Date and time of the payment batch creation. \n\n(UTC date-time in ISO timestamp format)."
              batchPaymentInfo:
                description: "It contains Information related to the payment of this batch."
                allOf:
                  - $ref: "#/components/schemas/BatchPaymentInfo"
              merchantsConsolidated:
                type: array
                description: "Ids of different merchants that are involved in the payment batch."
                items:
                  type: string
                  description: "Merchant Id"

    BatchPaymentInfo:
      type: object
      required:
        [
          "paymentMethod",
          "paymentStatus",
          "expectedPaymentDate",
          "paymentExecutionDate",
        ]
      properties:
        paymentMethod:
          type: string
          description: "The payment method used to make the payment for this batch. If the batch total is zero or negative (meaning that the merchant has a debit with the marketplace), then use `NO_TRANSFER`."
          enum:
            - "PIX"
            - "TED"
            - "DOC"
            - "OTHER"
            - "NO_TRANSFER"
        endToEndPixId:
          type: string
          description: "PIX end to end identification. \n\n**Required** if `paymentMethod` is `PIX`."
        pixKey:
          type: string
          description: "The PIX key to where the transfer was made. \n\n**Required** if `paymentMethod` is `PIX`."
        creditedAccount:
          type: object
          description: "The bank account to where the transfer was made. \n\n**Required** if `paymentMethod` is  `TED` or `DOC`."
          properties:
            bankName:
              type: string
              description: "The name of the Bank."
            bankNumber:
              type: integer
              description: "The number of the Bank."
            accountNumber:
              type: string
              description: "Account number. If it has a digit, include it at the end of the account number."
            branchCode:
              type: string
              description: "Branch Code. If it has a digit, include it at the end of the account number."
            document:
              type: object
              description: "Information about the document of the person responsible for the credited account."
              properties:
                type:
                  type: string
                  description: "The type of the registration document."
                  enum:
                    - "CPF"
                    - "CNPJ"
                    - "OTHER"
                number:
                  type: string
                  description: "Person or Company registration document number (only numbers)."
                  maxLength: 14
                documentHolderName:
                  type: string
                  description: "Person or Company name."
        paymentStatus:
          type: string
          description: |-
            The payment status. 

            - If the batch total is positive, which means the merchant will receive a credit from the marketplace, then the following statuses should be used:
            `SCHEDULED`, `PAID`, `REJECTED`
            > These statuses should also be used if the batch total is zero.

            - If the batch total is negative, which means that the merchant has a debit with the marketplace, then the following statuses should be used:
            `WAITING_MERCHANT_PAYMENT`, `PAYMENT_RECEIVED` `DEBIT_IN_THE_NEXT_BATCH`
          enum:
            - "SCHEDULED"
            - "PAID"
            - "REJECTED"
            - "WAITING_MERCHANT_PAYMENT"
            - "PAYMENT_RECEIVED"
            - "DEBIT_IN_THE_NEXT_BATCH"
        expectedPaymentDate:
          type: string
          format: "date-time"
          description: "Expected payment date and time. \n\n(UTC date-time in ISO timestamp format)."
        paymentExecutionDate:
          type: string
          format: "date-time"
          description: "Date and time when the payment was executed. \n\n(UTC date-time in ISO timestamp format)."

    PaymentBatchDetails:
      type: object
      required: ["merchants"]
      properties:
        merchants:
          type: array
          description: "List of the merchants that are included in the batch. For each merchant there will be a list of orders and extra fees."
          items:
            type: object
            required:
              - "id"
              - "name"
              - "orders"
            properties:
              id:
                type: string
                description: "Merchant Id."
              name:
                type: string
                description: "Merchant name."
              orders:
                type: array
                description: "Details of all the orders that make up this batch."
                items:
                  allOf:
                    - $ref: "#/components/schemas/PaymentBatchOrders"
              extras:
                type: array
                description: "Details of all the extra charges that make up this batch."
                items:
                  allOf:
                    - $ref: "#/components/schemas/PaymentBatchExtras"

    PaymentBatchOrders:
      type: object
      required:
        - "orderInfo"
        - "paymentInfo"
        - "fees"
        - "totalDebit"
        - "totalCredit"
      properties:
        orderInfo:
          type: object
          description: "Basic information and identification of the order."
          properties:
            id:
              type: string
              description: "A unique identifier of the order."
            displayId:
              type: "string"
              description: "Order Id shown in the **Ordering Application** interface for the customer."
            createdAt:
              type: string
              format: "date-time"
              description: "Date and time of order creation. \n\n(UTC date-time in ISO timestamp format)."
            status:
              type: string
              description: "Order status at the time of batch request."
              enum:
                - "CONCLUDED"
                - "CANCELLED"
        paymentInfo:
          type: object
          description: "Information regarding the payment of the order."
          properties:
            itemsTotal:
              description: "Total price of the items in the order, without considering fees."
              allOf:
                - $ref: "#/components/schemas/Price"
            deliveryFee:
              description: "Delivery Fee charged on the order."
              allOf:
                - $ref: "#/components/schemas/Price"
            serviceFee:
              description: "Service Fee charged on the order."
              allOf:
                - $ref: "#/components/schemas/Price"
            tipValue:
              description: "Tip given on order."
              allOf:
                - $ref: "#/components/schemas/Price"
            benefits:
              type: object
              description: "Total benefits that applied to this order. Benefits may have been funded by the marketplace or the merchant."
              properties:
                marketplace:
                  description: "Total amount of benefits funded by the marketplace."
                  allOf:
                    - $ref: "#/components/schemas/Price"
                merchant:
                  description: "Total amount of benefits funded by the merchant."
                  allOf:
                    - $ref: "#/components/schemas/Price"
            orderTotal:
              description: "Total order value."
              allOf:
                - $ref: "#/components/schemas/Price"
            paymentType:
              type: string
              description: "Payment type.

                \n\nIf the payment has been made through the **Ordering Application** itself, and the customer does not need to pay any money upon receipt of the order, then the type to use is `ONLINE`.

                \n\nOtherwise use `OFFLINE`."
              enum:
                - "ONLINE"
                - "OFFLINE"
            receivedBy:
              type: string
              description: |-
                By whom payment for the order was received. 
                > For cases where payment has been made through the **Ordering Application**, but an external voucher company will be used as the payment method, then enter `VOUCHER`.
              enum:
                - "MERCHANT"
                - "MARKETPLACE"
                - "VOUCHER"
                - "OTHERS"
            paymentMethod:
              type: string
              description: "Method used to pay for the order."
              enum:
                - "CREDIT"
                - "DEBIT"
                - "MEAL_VOUCHER"
                - "FOOD_VOUCHER"
                - "DIGITAL_WALLET"
                - "PIX"
                - "CASH"
                - "CREDIT_DEBIT"
                - "COUPON"
                - "REDEEM"
                - "PREPAID_REDEEM"
                - "OTHER"
            methodDetails:
              type: string
              description: "Free field. Use this field to provide more details about the payment method used. (Example: Card brand or Wallet name)"
            voucherNSU:
              type: string
              description: "Field to inform the NSU of the transaction made between the **Ordering Application** and the Voucher company. \n\n**Required** if methodDetails is `MEAL_VOUCHER` or `FOOD_VOUCHER`"
        fees:
          type: object
          description: "Details of the fees charged on the order."
          properties:
            orderCommissionValue:
              description: "Value of the commission charged on the order."
              allOf:
                - $ref: "#/components/schemas/Price"
            orderCommissionPercentual:
              type: number
              description: "Percentual of the commission charged on the order."
            transactionFeeValue:
              description: "Value of the transaction fee (or acquisition fee) charged on the order."
              allOf:
                - $ref: "#/components/schemas/Price"
            transactionFeePercentual:
              type: number
              description: "Percentual of the transaction fee (or acquisition fee) charged on the order."
            deliveryComissionValue:
              description: "Value of the commission charged on the order delivery fee."
              allOf:
                - $ref: "#/components/schemas/Price"
            deliveryComissionPercentual:
              type: number
              description: "Percentual of the commission charged on the order delivery fee."
        totalDebit:
          description: "Total of all the values that will be charged to the merchant. It is the sum of all the negative values of the order. \n\nThis field must be a negative value."
          allOf:
            - $ref: "#/components/schemas/Price"
        totalCredit:
          description: "Total of all values that will be credited to the merchant. It is the sum of all the positive values of the order. \n\nThis field must be a positive value."
          allOf:
            - $ref: "#/components/schemas/Price"

    PaymentBatchExtras:
      type: object
      properties:
        ordersCancellations:
          type: object
          description: "Breakdown of the amounts referring to order cancellations."
          properties:
            orderId:
              type: string
              description: "A unique identifier of the order."
            amount:
              description: "Amount canceled. It does not necessarily have to be the full amount of the order."
              allOf:
                - $ref: "#/components/schemas/Price"
            liability:
              type: string
              description: "Indicates who is responsible for paying for the cancellation."
              enum:
                - "MARKETPLACE"
                - "MERCHANT"
            cancellationDate:
              type: string
              format: "date-time"
              description: "Date and time of order cancellation. This date and time is when the cancellation was registered by the Ordering Application. \n\n(UTC date-time in ISO timestamp format)."
            cancelattionReason:
              type: string
              description: "Free field to indicate the reason for the cancellation."
        ordersChargebacks:
          type: object
          description: "Breakdown of the amounts referring to order chargebacks."
          properties:
            orderId:
              type: string
              description: "A unique identifier of the order."
            amount:
              description: "Amount reversed. It does not necessarily have to be the full amount of the order."
              allOf:
                - $ref: "#/components/schemas/Price"
            chargebackDate:
              type: string
              format: "date-time"
              description: "Date and time when the chargeback ocurred. This date and time is when the chargeback was registered by the Ordering Application. \n\n(UTC date-time in ISO timestamp format)."
            chargebackReason:
              type: string
              description: "Free field to indicate the reason for the chargeback."
        others:
          type: object
          description: "This section should be used to indicate other charges that might be added to the batch total, not necessarily linked to purchase orders."
          properties:
            type:
              type: string
              description: "The type of charge."
              enum:
                - "MONTHLY_FEES"
                - "MARKETING_FEES"
                - "LOANS_FEES"
                - "TAXES"
                - "PAYMENT_IN_ADVANCE_FEES"
                - "PREVIOUS_DEBITS_PAYMENTS"
                - "OTHER"
            description:
              type: string
              description: "Detailed description of the charge."
            amount:
              description: "Charge amount."
              allOf:
                - $ref: "#/components/schemas/Price"
            referenceId:
              type: string
              description: "This field should be used, if necessary, to indicate some reference ID related to the type of charge chosen, in order to facilitate the merchant's identification of the charge. This is a generic field, so any type of identification can be used.  (Example: Indicate which previous batch is being charged)."
            observations:
              type: string
              description: "Free field to indicate any remarks that may apply."
        totalDebit:
          description: "Total of all the values that will be charged to the merchant. It is the sum of all the negative values. \n\nThis field must be a negative value."
          allOf:
            - $ref: "#/components/schemas/Price"
        totalCredit:
          description: "Total of all values that will be credited to the merchant. It is the sum of all the positive values. \n\nThis field must be a positive value."
          allOf:
            - $ref: "#/components/schemas/Price"

    #Contract

    ### Contract Summary

    ContractSummaryResponse:
      type: "object"
      required:
        [
          "orderingApplicationInfo",
          "merchantsInfo",
          "contractInfo",
          "contractedPlan",
          "recurringFees",
          "oneTimeFees",
          "paymentBatchInfo",
        ]
      properties:
        orderingApplicationInfo:
          description: "Ordering Application registration information."
          allOf:
            - $ref: "#/components/schemas/ContractOrderingAppInfo"
        merchantsInfo:
          type: "array"
          description: "Information about the merchants that are party to this contract."
          items:
            allOf:
              - $ref: "#/components/schemas/ContractMerchantsInfo"
        contractInfo:
          description: "Information on contract terms."
          allOf:
            - $ref: "#/components/schemas/ContractInfo"
        contractedPlan:
          type: "string"
          description: |-
            Which Ordering Application Plan has been contracted.

            Plans can be:

            `ORDERS`: It means that the Ordering Application will only exercise the order originator service, leaving the logistics part of the responsibility of the Merchant.

            `ORDERS+LOGISTICS`: It means that the Ordering Application will perform the service of order originator, and also the part of logistic services (Fullservice).
          enum:
            - "ORDERS"
            - "ORDERS+LOGISTICS"
        recurringFees:
          type: "array"
          description: |-
            Details of the contract's recurring fees.  
            You can enter multiple sets of fees for a specific period of months (no overlapping).
            Example:  
            Set 1: From 1 to 6 months  
            Set 2: From 7 to 12 months
          items:
            allOf:
              - $ref: "#/components/schemas/ContractRecurringFees"
        oneTimeFees:
          description: "Details of the contract's one time charge fees."
          allOf:
            - $ref: "#/components/schemas/ContractOneTimeFees"
        paymentBatchInfo:
          description: "Information on how payments will be split and paid by the Ordering Application to the Merchant."
          allOf:
            - $ref: "#/components/schemas/ContractPaymentBatchInfo"
        specialConditions:
          type: "string"
          description: "Free text detailing special conditions that do not fit into the above properties."

    ContractOrderingAppInfo:
      type: "object"
      required: ["document", "name", "corporateName", "address", "contactInfo"]
      properties:
        document:
          type: "string"
          description: "Ordering Application registration document (eg. CNPJ)."
          pattern: "/^\\d{14}$/"
          example: "22815773000169"
        name:
          type: "string"
          description: "Ordering Application public name."
        corporateName:
          type: "string"
          description: "Ordering Application corporate name."
        stateRegistration:
          type: "string"
          description: "Ordering Application state registration number."
        municipalRegistration:
          type: "string"
          description: "Ordering Application municipal registration number."
        address:
          description: "Ordering Application comercial address."
          allOf:
            - $ref: "#/components/schemas/AddressContract"
        contactInfo:
          type: "object"
          description: "Ordering Application contact information."
          properties:
            contactEmail:
              type: "string"
              description: "Ordering Application email."
            contactPhone:
              type: "string"
              description: "Ordering Application phone."
            contactName:
              type: "string"
              description: "Name of contact responsible for the contract."

    ContractMerchantsInfo:
      type: "object"
      required:
        [
          "type",
          "document",
          "name",
          "corporateName",
          "chain",
          "registrationAddress",
          "merchantEmails",
          "merchantPhones",
          "contactsInfo",
        ]
      properties:
        type:
          type: "string"
          description: "Informs whether the Merchant is a head office or branch office."
          enum:
            - "HEAD_OFFICE"
            - "BRANCH"
        chain:
          type: "object"
          description: "Information about company chain."
          required: ["isPartOfChain"]
          properties:
            isPartOfChain:
              type: boolean
              description: "Informs if the merchant is part of a chain."
            chainName:
              type: string
              description: "The chain name. \n\nRequired if `isPartOfChain` is `true`."
        document:
          type: "string"
          description: "Merchant registration document (eg. CNPJ)."
          pattern: "/^\\d{14}$/"
          example: "22815773000169"
        name:
          type: "string"
          description: "Merchant public name."
        corporateName:
          type: "string"
          description: "Merchant corporate name."
        stateRegistration:
          type: "string"
          description: "Merchant state registration number."
        municipalRegistration:
          type: "string"
          description: "Merchant municipal registration number."
        registrationAddress:
          description: "Merchant commercial registration address. This is the legal address of the establishment, used for fiscal purposes."
          allOf:
            - $ref: "#/components/schemas/AddressContract"
        operationalAddress:
          description: "Merchant operation address. This is the merchant operation address, where orders will be placed and picked."
          allOf:
            - $ref: "#/components/schemas/AddressContract"
        merchantEmails:
          type: "array"
          description: "Merchant contact emails."
          items:
            type: "string"
        merchantPhones:
          type: "object"
          description: "Merchant contact phones."
          allOf:
            - $ref: "#/components/schemas/ContactPhones"
        contactsInfo:
          type: "object"
          required: ["contractManager"]
          description: "Contact information for the people responsible for each area of the merchant."
          properties:
            contractManager:
              type: "object"
              required: ["name", "emails", "phones"]
              description: "Contract manager information. Person responsible for the contract as a whole."
              properties:
                name:
                  type: "string"
                  description: "Contract manager name."
                emails:
                  type: "array"
                  description: "Contract manager emails."
                  items:
                    type: "string"
                phones:
                  description: "Contract manager phones."
                  allOf:
                    - $ref: "#/components/schemas/ContactPhones"
                registrationDocument:
                  type: "string"
                  description: "Contract manager registration document (eg. RG)."
                individualDocument:
                  type: "string"
                  description: "Contract manager individual document (eg. CPF)."
            financial:
              type: "object"
              required: ["name", "emails", "phones"]
              description: "Financial contact. Person responsible for issues related to finance and payments."
              properties:
                name:
                  type: "string"
                  description: "Financial contact name."
                emails:
                  type: "array"
                  description: "Financial contact emails."
                  items:
                    type: "string"
                phones:
                  description: "Financial contact phones."
                  allOf:
                    - $ref: "#/components/schemas/ContactPhones"
            operational:
              type: "object"
              required: ["name", "emails", "phones"]
              description: "Operational contact. Person responsible for day-to-day issues."
              properties:
                name:
                  type: "string"
                  description: "Operational contact name."
                emails:
                  type: "array"
                  description: "Operational contact emails."
                  items:
                    type: "string"
                phones:
                  description: "Operational contact phones."
                  allOf:
                    - $ref: "#/components/schemas/ContactPhones"

    ContractInfo:
      type: "object"
      required: ["contractDuration", "contractTerm"]
      properties:
        contractDuration:
          type: "object"
          required: ["contractPeriod", "daysOfNoticeOfTermination"]
          description: "Information about the duration of the contract."
          properties:
            contractPeriod:
              type: "string"
              description: "Informs whether the contract is valid for a fixed or indefinite period."
              enum:
                - "INDEFINITE"
                - "FIXED"
            contractedMonths:
              type: "integer"
              description: "Informs how many months the contract is valid for. \n\nRequired only when `contractPeriod` is `FIXED`"
            autoRenovation:
              type: "boolean"
              description: "Informs you whether the contract automatically renews after the contracted months or whether a new contact with the Ordering Application is required. \n\nRequired only when `contractPeriod` is `FIXED`"
            daysOfNoticeOfTermination:
              type: "string"
              description: "Informs how many days in advance is it necessary to notify the ordering application of a contract termination."
        contractTerm:
          type: "object"
          required: ["startDate"]
          description: "Dates of contract validity."
          properties:
            startDate:
              type: "string"
              format: "date-time"
              description: "Contract start date. \n\n(UTC date-time in ISO timestamp format)."
            endDate:
              type: "string"
              format: "date-time"
              description: "Contract end date. \n\nRequired if `contractPeriod` is `FIXED`. \n\n(UTC date-time in ISO timestamp format)."

    ContractRecurringFees:
      type: "object"
      required:
        [
          "startMonth",
          "endMonth",
          "comissionPercentuals",
          "monthlyFee",
          "acquirerFee",
        ]
      properties:
        startMonth:
          type: integer
          description: "Starting month of the fee set."
        endMonth:
          type: integer
          description: "Ending month of the fee set."
        comissionPercentuals:
          type: "object"
          description: "Commission per order type. At least the fee of one of the types must be filled in."
          properties:
            delivery:
              type: number
              description: "Percentage of commission charged for DELIVERY type orders."
            takeout:
              type: number
              description: "Percentage of commission charged for TAKEOUT type orders."
            indoor:
              type: number
              description: "Percentage of commission charged for INDOOR type orders."
        monthlyFee:
          type: "object"
          required: ["amount"]
          description: "Monthly Fee informarion."
          properties:
            amount:
              description: "Amount charged for the monthly fee."
              allOf:
                - $ref: "#/components/schemas/Price"
            noChargeAt:
              description: "Informs the exemption of the monthly fee payment if the monthly billing is equal or higher than the one informed here."
              allOf:
                - $ref: "#/components/schemas/Price"
        acquirerFee:
          type: array
          description: |-
            Information about acquirer fees. 

            It is necessary to specify the fee per payment method. If all fees are equal, use the `ALL` payment method. 

            If at least one payment method is informed (different from `ALL`) the others that were not informed should be considered as `amount` = 0.00 .
          items:
            type: "object"
            required: ["paymentMethod"]
            properties:
              paymentMethod:
                type: "string"
                description: "Payment method regarding the informed acquisition fee."
                enum:
                  - "ALL"
                  - "PIX"
                  - "CREDIT"
                  - "DEBIT"
                  - "OTHERS"
              amount:
                description: "Amount charged for the acquiring fee for this payment method (Absolute values)."
                allOf:
                  - $ref: "#/components/schemas/Price"
              percentual:
                type: "string"
                description: "Amount charged for the acquiring fee for this payment method (Percentual values)."
              noChargeAt:
                description: "Informs the exemption of the acquiring fee payment if the monthly billing is equal or higher than the one informed here."
                allOf:
                  - $ref: "#/components/schemas/Price"

    ContractOneTimeFees:
      type: "object"
      required: ["activationFee"]
      properties:
        activationFee:
          description: "Amount charged for the activation fee."
          allOf:
            - $ref: "#/components/schemas/Price"

    ContractPaymentBatchInfo:
      type: "object"
      required:
        [
          "batchDuration",
          "daysToTransfer",
          "transferMethod",
          "creditedAccountInfo",
        ]
      properties:
        batchDuration:
          type: "string"
          description: |-
            The time the batch stays open before consolidating orders and sending payments.

            `DAILY`: Daily batches contain information only on orders completed on a given day. They open and close on the same day.

            `PER_PERIOD`: Period batches contain information about completed orders from a certain time period. They close after a period of days.
          enum:
            - "DAILY"
            - "PER_PERIOD"
        periods:
          type: array
          description: "Information about the batch periods. \n\nOnly required when `batchDuration` is `PER_PERIOD`"
          items:
            type: "object"
            required: ["days", "cutoffDate"]
            description: "Information about the batch period. \n\nOnly required when `batchDuration` is `PER_PERIOD`"
            properties:
              days:
                type: integer
                description: "Number of days considered for the payment batch. The orders placed within these days are included into the same payment batch."
              cutoffDate:
                type: "object"
                required: ["type", "day"]
                description: "Cut-off date of the batch. Informs the day when the batch will be closed and no more orders will be included."
                properties:
                  type:
                    type: "string"
                    description: "Informs whether the cutoff day is a week day or a month day"
                    enum:
                      - "DAY_OF_MONTH"
                      - "DAY_OF_WEEK"
                  day:
                    type: "string"
                    description: |-
                      Inform the cutting day.

                      If type is `DAY_OF_MONTH` then fill in a number from 1 to 31.

                      If type is `DAY_OF_WEEK` then fill in one of the options: `SUNDAY`, `MONDAY`, `TUESDAY`, `WEDNESDEY`, `THURSDAY`, `FRIDAY`, `SATURDAY`.
        daysToTransfer:
          type: integer
          description: "Period of days from the order execution date when the batch payment will be made (D + daysToTransfer)."
        transferMethod:
          type: "object"
          required: ["method", "transferFee"]
          description: "Information about transferring the batch payment to the merchant."
          properties:
            method:
              type: "string"
              description: "Method in which the batch payment will be transferred to the merchant."
              enum:
                - "PIX"
                - "TED"
                - "DOC"
            transferFee:
              description: "Fee charged for the transfer."
              allOf:
                - $ref: "#/components/schemas/Price"
        creditedAccountInfo:
          type: object
          description: "Information about the account that will be credited."
          properties:
            pixKey:
              type: string
              description: "The PIX key to where the transfer was made. \n\n**Required** if `transferMethod` is `PIX`."
            creditedAccount:
              type: object
              required:
                [
                  "bankName",
                  "bankNumber",
                  "accountNumber",
                  "branchCode",
                  "document",
                ]
              description: "The bank account to where the transfer was made. \n\n**Required** if `transferMethod` is  `TED` or `DOC`."
              properties:
                bankName:
                  type: string
                  description: "The name of the Bank."
                bankNumber:
                  type: integer
                  description: "The number of the Bank."
                accountNumber:
                  type: string
                  description: "Account number. If it has a digit, include it at the end of the account number."
                branchCode:
                  type: string
                  description: "Branch Code. If it has a digit, include it at the end of the account number."
                document:
                  type: object
                  required: ["type", "number", "documentHolderName"]
                  description: "Information about the document of the person responsible for the credited account."
                  properties:
                    type:
                      type: string
                      description: "The type of the registration document."
                      enum:
                        - "CPF"
                        - "CNPJ"
                        - "OTHER"
                    number:
                      type: string
                      description: "Person or Company registration document number (only numbers)."
                      maxLength: 14
                    documentHolderName:
                      type: string
                      description: "Person or Company name."

    ##Sign-Up Service

    ContractConditionsRequest:
      type: "object"
      required:
        [
          "companyInfo",
          "state",
          "city",
          "operationTime",
          "merchantType",
          "merchantCategories",
          "ordersInformation",
        ]
      properties:
        companyInfo:
          type: "object"
          required: ["type", "document", "name"]
          description: "Merchant registration information."
          properties:
            type:
              type: "string"
              description: "Informs whether the Merchant is a head office or branch office."
              enum:
                - "HEAD_OFFICE"
                - "BRANCH"
            document:
              type: "string"
              description: "Merchant registration document (eg. CNPJ)."
              pattern: "/^\\d{14}$/"
              example: "22815773000169"
            headOfficeDocument:
              type: "string"
              description: "Merchant head office registration document (eg. CNPJ). \n\nOnly required when `type` is `BRANCH`."
              pattern: "/^\\d{14}$/"
              example: "22815773000169"
            name:
              type: "string"
              description: "Merchant public name."
            chain:
              type: "object"
              description: "Information about company chain."
              properties:
                isPartOfChain:
                  type: boolean
                  description: "Informs if the merchant is part of a chain."
                chainName:
                  type: string
                  description: "The chain name."
        state:
          type: "string"
          description: "State where the merchant is located."
        city:
          type: "string"
          description: "City where the merchant is located"
        operationTime:
          type: array
          description: "Times of day when the restaurant is able to take orders."
          items:
            type: "string"
            description: "Time of the day."
            enum:
              - "MORNING"
              - "AFTERNOON"
              - "EVENING"
        merchantsInTheMarketplace:
          type: "object"
          required: [""]
          description: "Information about other merchants of the same owner."
          properties:
            documentOfMerchantsAlreadyActive:
              type: array
              description: "Documents of the merchants that are already active in the Ordering Application."
              items:
                type: string
                description: "Merchant registration document (eg. CNPJ)."
            documentOfFutureMerchants:
              type: array
              description: "Documents of the establishments that may contract the Ordering Application in the future."
              items:
                type: string
                description: "Merchant registration document (eg. CNPJ)."
        merchantType:
          type: "string"
          description: "Merchant Type. \n\nCurrently, only `RESTAURANT` is accepted."
          enum:
            - "RESTAURANT"
          example: "RESTAURANT"
        merchantCategories:
          type: "array"
          description: "Merchant Categories / Cuisines."
          items:
            type: "string"
            enum:
              - "BURGERS"
              - "PIZZA"
              - "FAST_FOOD"
              - "HOT_DOG"
              - "JAPANESE"
              - "DESSERTS"
              - "AMERICAN"
              - "ICE_CREAM"
              - "BBQ"
              - "SANDWICH"
              - "MEXICAN"
              - "BRAZILIAN"
              - "PASTRY"
              - "ARABIAN"
              - "COMFORT_FOOD"
              - "VEGETARIAN"
              - "VEGAN"
              - "BAKERY"
              - "HEALTHY"
              - "ITALIAN"
              - "CHINESE"
              - "JUICE_SMOOTHIES"
              - "SEAFOOD"
              - "CAFE"
              - "SALADS"
              - "COFFEE_TEA"
              - "PASTA"
              - "BREAKFAST_BRUNCH"
              - "LATIN_AMERICAN"
              - "CONVENIENCE"
              - "PUB"
              - "HAWAIIAN"
              - "EUROPEAN"
              - "FAMILY_MEALS"
              - "FRENCH"
              - "INDIAN"
              - "PORTUGUESE"
              - "SPANISH"
              - "GOURMET"
              - "KIDS_FRIENDLY"
              - "SOUTH_AMERICAN"
              - "SPECIALTY_FOODS"
              - "ARGENTINIAN"
              - "PREMIUM"
              - "AFFORDABLE_MEALS"
          example: ["PIZZA", "PASTA", "FAMILY_MEALS", "PREMIUM"]
        ordersInformation:
          type: "object"
          required: ["monthlyOrdersQuantity", "averageTicketPrice"]
          description: "Information about merchant orders."
          properties:
            monthlyOrdersQuantity:
              type: string
              description: "Average number of orders received in the last 90 days."
            averageTicketPrice:
              description: "Average Ticket Price charged for the orders."
              allOf:
                - $ref: "#/components/schemas/Price"

    ContractConditionsResponse:
      type: "object"
      required:
        ["orderingApplicationInfo", "contractInfo", "plans", "paymentBatchInfo"]
      properties:
        orderingApplicationInfo:
          type: "object"
          required: ["type", "document", "name"]
          description: "Ordering Application information."
          properties:
            document:
              type: "string"
              description: "Merchant registration document (eg. CNPJ)."
            name:
              type: "string"
              description: "Merchant public name."
        informationGoodTrhu:
          type: "string"
          description: "Field to inform for how many days the information presented here will be valid. Important: \n\nIf the Software Service makes a new call to the [POST /signup/contractConditions](#operation/postContractConditions) endpoint, then the information will be renewed, always discarding the previous query."
        contractInfo:
          type: "object"
          required: ["contractPeriod", "daysOfNoticeOfTermination"]
          description: "Information about the duration of the contract."
          properties:
            contractPeriod:
              type: array
              description: "Shows the options for the contract duration are available to choose from."
              items:
                type: "string"
                description: "Informs whether the contract is valid for a fixed or indefinite period."
                enum:
                  - "INDEFINITE"
                  - "FIXED"
            contractedMonths:
              type: "integer"
              description: "Informs for how many months the contract is valid for. \n\nRequired only when `contractPeriod` is `FIXED`"
            autoRenovation:
              type: array
              description: "Shows the options for whether the contract automatically renews after the contracted months or whether a new contact with the Ordering Application is required. \n\nRequired only when `contractPeriod` is `FIXED`."
              items:
                type: "boolean"
                description: "Informs you whether the contract automatically renews after the contracted months or whether a new contact with the Ordering Application is required. \n\nRequired only when `contractPeriod` is `FIXED`"

            daysOfNoticeOfTermination:
              type: "string"
              description: "Informs how many days in advance is it necessary to notify the ordering application of a contract termination."
        plans:
          type: array
          description: "Information about the fee plans made available by the marketplace."
          items:
            type: "object"
            required:
              [
                "planId",
                "planType",
                "daysToTransfer",
                "recurringFees",
                "monthlyFee",
              ]
            description: "Plan informations and fees."
            properties:
              planId:
                type: "string"
                description: "Plan Id. This field should be used to tell the Ordering Application which plan has been chosen."
              planType:
                type: "string"
                description: |-
                  Which Ordering Application Plan has been contracted.

                  Plans can be:

                  `ORDERS`: It means that the Ordering Application will only exercise the order originator service, leaving the logistics part of the responsibility of the Merchant.

                  `ORDERS+LOGISTICS`: It means that the Ordering Application will perform the service of order originator, and also the part of logistic services (Fullservice).
                enum:
                  - "ORDERS"
                  - "ORDERS+LOGISTICS"
              daysToTransfer:
                type: integer
                description: "Period of days from the order execution date to when the batch payment will be made (D + daysToTransfer)."
              recurringFees:
                type: "object"
                required:
                  [
                    "startMonth",
                    "endMonth",
                    "comissionPercentuals",
                    "monthlyFee",
                    "acquirerFee",
                  ]
                description: |-
                  Details of the plan's recurring fees.  
                  It can return multiple sets of fees for a specific period of months (no overlapping).
                  Example:  
                  Set 1: From 1 to 6 months  
                  Set 2: From 7 to 12 months
                properties:
                  startMonth:
                    type: integer
                    description: "Starting month of the fee set."
                  endMonth:
                    type: integer
                    description: "Ending month of the fee set."
                  comissionPercentuals:
                    type: "object"
                    description: "Commission per order type. At least the fee of one of the types must be filled in."
                    properties:
                      delivery:
                        type: number
                        description: "Percentage of commission charged for DELIVERY type orders."
                      takeout:
                        type: number
                        description: "Percentage of commission charged for TAKEOUT type orders."
                      indoor:
                        type: number
                        description: "Percentage of commission charged for INDOOR type orders."
                  monthlyFee:
                    type: "object"
                    required: ["amount"]
                    description: "Monthly Fee informarion."
                    properties:
                      amount:
                        description: "Amount charged for the monthly fee."
                        allOf:
                          - $ref: "#/components/schemas/Price"
                      noChargeAt:
                        description: "Informs the exemption of the monthly fee payment if the monthly billing is equal or higher than the one informed here."
                        allOf:
                          - $ref: "#/components/schemas/Price"
                  acquirerFee:
                    type: array
                    description: "acquirerFee"
                    items:
                      type: "object"
                      required: ["paymentMethod"]
                      properties:
                        paymentMethod:
                          type: "string"
                          description: "Payment method regarding the informed acquisition fee."
                          enum:
                            - "ALL"
                            - "PIX"
                            - "CREDIT"
                            - "DEBIT"
                            - "OTHERS"
                        amount:
                          description: "Amount charged for the acquiring fee for this payment method (Absolute values)."
                          allOf:
                            - $ref: "#/components/schemas/Price"
                        percentual:
                          type: "string"
                          description: "Amount charged for the acquiring fee for this payment method (Percentual values)."
                        noChargeAt:
                          description: "Informs the exemption of the acquiring fee payment if the monthly billing is equal or higher than the one informed here."
                          allOf:
                            - $ref: "#/components/schemas/Price"
              oneTimeFees:
                description: "Details of the contract's one time charge fees."
                allOf:
                  - $ref: "#/components/schemas/ContractOneTimeFees"
              specialConditions:
                type: "string"
                description: "Free text detailing special conditions that do not fit into the above properties."
        paymentBatchInfo:
          type: "object"
          required:
            [
              "batchDuration",
              "daysToTransfer",
              "transferMethod",
              "creditedAccountInfo",
            ]
          description: "Information on how payments will be split and paid by the Ordering Application to the Merchant."
          properties:
            paymentBatchId:
              type: "string"
              description: "Payment Batch Id. This field should be used to tell the Ordering Application which Payment Batch options has been chosen."
            batchDuration:
              type: "string"
              description: |-
                The time the batch stays open before consolidating orders and sending payments.

                `DAILY`: Daily batches contain information only on orders completed on a given day. They open and close on the same day.

                `PER_PERIOD`: Period batches contain information about completed orders from a certain time period. They close after a period of days.
              enum:
                - "DAILY"
                - "PER_PERIOD"
            periods:
              type: array
              description: "Information about the batch periods. \n\nOnly required when `batchDuration` is `PER_PERIOD`"
              items:
                type: "object"
                required: ["days", "cutoffDate"]
                description: "Information about the batch period. \n\nOnly required when `batchDuration` is `PER_PERIOD`"
                properties:
                  days:
                    type: integer
                    description: "Number of days considered for the payment batch. The orders placed within these days are included into the same payment batch."
                  cutoffDate:
                    type: "object"
                    required: ["type", "day"]
                    description: "Cut-off date of the batch. Informs the day when the batch will be closed and no more orders will be included."
                    properties:
                      type:
                        type: "string"
                        description: "Informs whether the cutoff day is a week day or a month day"
                        enum:
                          - "DAY_OF_MONTH"
                          - "DAY_OF_WEEK"
                      day:
                        type: "string"
                        description: |-
                          Inform the cutting day.

                          If type is `DAY_OF_MONTH` then fill in a number from 1 to 31.

                          If type is `DAY_OF_WEEK` then fill in one of the options: `SUNDAY`, `MONDAY`, `TUESDAY`, `WEDNESDEY`, `THURSDAY`, `FRIDAY`, `SATURDAY`.
            transferMethod:
              type: "object"
              required: ["method", "transferFee"]
              description: "Information about transferring the batch payment to the merchant."
              properties:
                method:
                  type: "string"
                  description: "Method in which the batch payment will be transferred to the merchant."
                  enum:
                    - "PIX"
                    - "TED"
                    - "DOC"
                transferFee:
                  description: "Fee charged for the transfer."
                  allOf:
                    - $ref: "#/components/schemas/Price"

    ContractChosenConditionsRequest:
      type: "object"
      required: ["chosenTerms", "merchantInfo"]
      properties:
        chosenTerms:
          type: "object"
          required: ["contractPeriod"]
          description: "Chosen contract terms."
          properties:
            contractPeriod:
              type: "string"
              description: "Chosen contract period."
              enum:
                - "INDEFINITE"
                - "FIXED"
            autoRenovation:
              type: "boolean"
              description: "Chosen option whether the contract will be auto-renewed after the end of the contracted months. \n\nRequired only when `contractPeriod` is `FIXED`"
        merchantInfo:
          type: "object"
          required:
            [
              "type",
              "document",
              "name",
              "corporateName",
              "registrationAddress",
              "merchantEmails",
              "merchantPhones",
              "contractManagerContact",
            ]
          description: "Information about the merchant who wants to do the signing up."
          properties:
            type:
              type: "string"
              description: "Informs whether the Merchant is a head office or branch office."
              enum:
                - "HEAD_OFFICE"
                - "BRANCH"
            document:
              type: "string"
              description: "Merchant registration document (eg. CNPJ)."
              pattern: "/^\\d{14}$/"
              example: "22815773000169"
            headOfficeDocument:
              type: "string"
              description: "Merchant head office registration document (eg. CNPJ). \n\nOnly required when `type` is `BRANCH`."
              pattern: "/^\\d{14}$/"
              example: "22815773000169"
            name:
              type: "string"
              description: "Merchant public name."
            corporateName:
              type: "string"
              description: "Merchant corporate name."
            stateRegistration:
              type: "string"
              description: "Merchant state registration number."
            municipalRegistration:
              type: "string"
              description: "Merchant municipal registration number."
            registrationAddress:
              description: "Merchant commercial registration address. This is the legal address of the establishment, used for fiscal purposes."
              allOf:
                - $ref: "#/components/schemas/AddressContract"
            merchantEmails:
              type: "array"
              description: "Merchant contact emails."
              items:
                type: "string"
            merchantPhones:
              type: "object"
              description: "Merchant contact phones."
              allOf:
                - $ref: "#/components/schemas/ContactPhones"
            contractManagerContact:
              type: "object"
              required: ["name", "emails", "phones"]
              description: "Contract manager information. Person responsible for the contract as a whole."
              properties:
                name:
                  type: "string"
                  description: "Contract manager name."
                emails:
                  type: "array"
                  description: "Contract manager emails."
                  items:
                    type: "string"
                phones:
                  description: "Contract manager phones."
                  allOf:
                    - $ref: "#/components/schemas/ContactPhones"
                registrationDocument:
                  type: "string"
                  description: "Contract manager registration document (eg. RG)."
                individualDocument:
                  type: "string"
                  description: "Contract manager individual document (eg. CPF)."

    ContractChosenConditionsResponse:
      type: "object"
      required: ["contractId", "signUpInstrcutions"]
      properties:
        contractId:
          type: "string"
          description: "Id of the contract generated by the Ordering Application. This Id will be the contract's identification for querying its status and chosen conditions."
        signUpInstrcutions:
          type: "string"
          description: "Since the sign-up process will be done externally, this field should contain the instructions for the merchant to continue the sign-up process with the ordering application. "
          pattern: "/^\\d{14}$/"
          example: "22815773000169"

    ContractStatus:
      type: "object"
      required: ["chosenTerms", "merchantInfo"]
      properties:
        contractId:
          type: "string"
          description: "Contract Id provided by Ordering Application."
        orderingAppMerchantId:
          type: "string"
          description: "Merchant Id on the Ordering Application platform."
        contractStatus:
          type: "string"
          description: |-
            The last contract status. Valid status:
              - `Negotiating` = Ordering Application knows about the intention and has already given instructions to the merchant (Restaurant has not yet signed the contract or term);
              - `Awaiting Onboarding` = Merchant has already done the signing process with Ordering Application and the software needs to send the onboarding information for the restaurant to become active on the platform;
              - `Active` = Merchant can now receive orders via Ordering Application;
              - `Rejected` = Contract was rejected for some reason; 
              - `Cancelled` = Contract is cancelled and no longer valid for this merchant".
          enum:
            - "NEGOTIATING"
            - "AWAITING ONBOARDING"
            - "ACTIVE"
            - "REJECTED"
            - "CANCELLED"
        rejectionReason:
          type: "string"
          description: "Free Text. The reason why the signing up process was rejected."
        contractSummary:
          type: "object"
          required:
            [
              "orderingApplicationInfo",
              "merchantsInfo",
              "contractInfo",
              "contractedPlan",
              "recurringFees",
              "oneTimeFees",
              "paymentBatchInfo",
            ]
          properties:
            contractInfo:
              description: "Information on contract terms."
              allOf:
                - $ref: "#/components/schemas/ContractInfo"
            contractedPlan:
              type: "string"
              description: |-
                Which Ordering Application Plan has been contracted.

                Plans can be:

                `ORDERS`: It means that the Ordering Application will only exercise the order originator service, leaving the logistics part of the responsibility of the Merchant.

                `ORDERS+LOGISTICS`: It means that the Ordering Application will perform the service of order originator, and also the part of logistic services (Fullservice).
              enum:
                - "ORDERS"
                - "ORDERS+LOGISTICS"
            recurringFees:
              type: "array"
              description: |-
                Details of the contract's recurring fees.  
                You can enter multiple sets of fees for a specific period of months (no overlapping).
                Example:  
                Set 1: From 1 to 6 months  
                Set 2: From 7 to 12 months
              items:
                allOf:
                  - $ref: "#/components/schemas/ContractRecurringFees"
            oneTimeFees:
              description: "Details of the contract's one time charge fees."
              allOf:
                - $ref: "#/components/schemas/ContractOneTimeFees"
            paymentBatchInfo:
              description: "Information on how payments will be split and paid by the Ordering Application to the Merchant."
              allOf:
                - $ref: "#/components/schemas/ContractPaymentBatchInfo"
            specialConditions:
              type: "string"
              description: "Free text detailing special conditions that do not fit into the above properties."
        upcomingFeeUpdate:
          type: "object"
          required:
            [
              "orderingApplicationInfo",
              "merchantsInfo",
              "contractInfo",
              "contractedPlan",
              "recurringFees",
              "oneTimeFees",
              "paymentBatchInfo",
            ]
          description: "Fees updates information."
          properties:
            date:
              type: "string"
              description: "The next date on which one or more merchant fees will change."
            message:
              type: "string"
              description: "Free text. Message with information and guidance about rate updates to be displayed to Merchant, via its Software Service."
        nextRequestDate:
          type: "string"
          description: "Next date on which the Software Service should make a new request for this endpoint."
        orderingAppAPIInfo:
          type: "object"
          required:
            [
              "orderingApplicationInfo",
              "merchantsInfo",
              "contractInfo",
              "contractedPlan",
              "recurringFees",
              "oneTimeFees",
              "paymentBatchInfo",
            ]
          description: "Ordering Application's API Access Information."
          properties:
            baseURL:
              type: "string"
              description: "Ordering Application's API base URL."
            merchantCredentials:
              type: "object"
              required:
                [
                  "orderingApplicationInfo",
                  "merchantsInfo",
                  "contractInfo",
                  "contractedPlan",
                  "recurringFees",
                  "oneTimeFees",
                  "paymentBatchInfo",
                ]
              description: "Merchant's credentials to access the Ordering Application's API."
              properties:
                client_Id:
                  type: "string"
                  description: "Merchant's client_id."
                client_secret:
                  type: "string"
                  description: "Merchant's client_secret."

    MerchantAccount:
      type: "object"
      required: ["contractId", "signUpInstrcutions"]
      properties:
        contactsInfo:
          type: "object"
          required: ["contractManager"]
          description: "Contact information for the people responsible for each area of the merchant."
          properties:
            contractManager:
              type: "object"
              required: ["name", "emails", "phones"]
              description: "Contract manager information. Person responsible for the contract as a whole."
              properties:
                name:
                  type: "string"
                  description: "Contract manager name."
                emails:
                  type: "array"
                  description: "Contract manager emails."
                  items:
                    type: "string"
                phones:
                  description: "Contract manager phones."
                  allOf:
                    - $ref: "#/components/schemas/ContactPhones"
                registrationDocument:
                  type: "string"
                  description: "Contract manager registration document (eg. RG)."
                individualDocument:
                  type: "string"
                  description: "Contract manager individual document (eg. CPF)."
            financial:
              type: "object"
              required: ["name", "emails", "phones"]
              description: "Financial contact. Person responsible for issues related to finance and payments."
              properties:
                name:
                  type: "string"
                  description: "Financial contact name."
                emails:
                  type: "array"
                  description: "Financial contact emails."
                  items:
                    type: "string"
                phones:
                  description: "Financial contact phones."
                  allOf:
                    - $ref: "#/components/schemas/ContactPhones"
            operational:
              type: "object"
              required: ["name", "emails", "phones"]
              description: "Operational contact. Person responsible for day-to-day issues."
              properties:
                name:
                  type: "string"
                  description: "Operational contact name."
                emails:
                  type: "array"
                  description: "Operational contact emails."
                  items:
                    type: "string"
                phones:
                  description: "Operational contact phones."
                  allOf:
                    - $ref: "#/components/schemas/ContactPhones"
        creditedAccountInfo:
          type: object
          description: "Information about the account that will be credited."
          properties:
            pixKey:
              type: string
              description: "The PIX key to where the transfer was made. \n\n**Required** if `transferMethod` is `PIX`."
            creditedAccount:
              type: object
              required:
                [
                  "bankName",
                  "bankNumber",
                  "accountNumber",
                  "branchCode",
                  "document",
                ]
              description: "The bank account to where the transfer was made. \n\n**Required** if `transferMethod` is  `TED` or `DOC`."
              properties:
                bankName:
                  type: string
                  description: "The name of the Bank."
                bankNumber:
                  type: integer
                  description: "The number of the Bank."
                accountNumber:
                  type: string
                  description: "Account number. If it has a digit, include it at the end of the account number."
                branchCode:
                  type: string
                  description: "Branch Code. If it has a digit, include it at the end of the account number."
                document:
                  type: object
                  required: ["type", "number", "documentHolderName"]
                  description: "Information about the document of the person responsible for the credited account."
                  properties:
                    type:
                      type: string
                      description: "The type of the registration document."
                      enum:
                        - "CPF"
                        - "CNPJ"
                        - "OTHER"
                    number:
                      type: string
                      description: "Person or Company registration document number (only numbers)."
                      maxLength: 14
                    documentHolderName:
                      type: string
                      description: "Person or Company name."
        acceptedCardBrands:
          type: array
          description: ""
          items:
            type: "string"
            description: "Since the sign-up process will be done externally, this field should contain the instructions for the merchant to continue the sign-up process with the ordering application. "
            enum:
              - "VISA"
              - "MASTERCARD"
              - "DINERS"
              - "AMEX"
              - "HIPERCARD"
              - "HIPER"
              - "ELO"
              - "AURA"

        acceptedVouchers:
          type: array
          description: ""
          items:
            type: "string"
            description: "Since the sign-up process will be done externally, this field should contain the instructions for the merchant to continue the sign-up process with the ordering application. "
            enum:
              - "ALELO"
              - "SODEXO"
              - "VR"
              - "TICKET"

        taxInfo:
          type: "object"
          required: ["name", "emails", "phones"]
          description: "Information on specific taxes."
          properties:
            brazil:
              type: "object"
              required: ["name", "emails", "phones"]
              description: "Brazil-specific taxes and tax information."
              properties:
                optSimplesNacional:
                  type: "boolean"
                  description: "Informs whether the merchant is opting for '_Simples Nacional_'"
                possuiSubstituicaoTributariaISS:
                  type: "boolean"
                  description: "Informs whether the merchant has _subsituição tributária de ISS_."
        merchantAPIInfo:
          allOf:
            - $ref: "#/components/schemas/MerchantAPIInfo"

    MerchantAPIInfo:
      type: "object"
      required: ["baseURL"]
      description: "Information about this merchant's [GET /merchant](#operation/getMerchant) API access. This API has the necessary information for the Ordering Application to be able to make the merchant's sales catalog available."
      properties:
        baseURL:
          type: "string"
          description: "The URL for accessing the endpoint."
        apiKey:
          type: "string"
          description: "The API_KEY for accessing the endpoint (see [AUTHENTICATION](#tag/authentication) section form more information)."

  examples:
    tokenExample:
      summary: New Token
      value:
        client_id: "user1234"
        client_secret: "ty23yhmas4ldfias9834023jsdf032j023f02"
        grant_type: "client_credentials"

    orderExample:
      summary: "Sample Order"
      value:
        id: "4818e72f-2304-466f-9fe7-af08f34ac4ed"
        type: "DELIVERY"
        displayId: "12345"
        createdAt: "2021-05-27T19:38:10.332Z"
        orderTiming: "INSTANT"
        preparationStartDateTime: "2021-05-27T19:45:10.332Z"
        merchant:
          id: 7fb59cb8-5808-40c8-b967-1b3f20ee39cd"
          name: "Plaza Pizza"
        items:
          [
            {
              id: 732bd31e-77fc-47ee-88ee-a0437f97b198",
              index: 0,
              name: "Medium - 2 flavors",
              externalCode: "22",
              unit: "UNIT",
              quantity: 1,
              specialInstructions: "Do not put onions.",
              unitPrice: { value: 43.00, currency: "BRL" },
              optionsPrice: { value: 50.00, currency: "BRL" },
              totalPrice: { value: 50.00, currency: "BRL" },
              options:
                [
                  {
                    id: e5232f14-430c-4a94-8ff6-289d5a16a87a",
                    name: "1/2 Pepperoni",
                    externalCode: "23",
                    unit: "UNIT",
                    quantity: 1,
                    unitPrice: { value: 50.00, currency: "BRL" },
                    price: { value: 50.00, currency: "BRL" },
                    specialInstructions: "None",
                  },
                  {
                    id: 7e507cab-7235-4f75-a0c2-e955fb2f2048",
                    name: "1/2 Mozzarella",
                    externalCode: "24",
                    unit: "UNIT",
                    quantity: 1,
                    unitPrice: { value: 30.00, currency: "BRL" },
                    price: { value: 30.00, currency: "BRL" },
                    specialInstructions: "None",
                  },
                ],
            },
          ]
        otherFees:
          [
            {
              name: "Delivery",
              type: "DELIVERY_FEE",
              receivedBy: "MARKETPLACE",
              receiverDocument: "1234",
              price: { value: 5.00, currency: "BRL" },
              observation: "None",
            },
          ]
        discounts:
          [
            {
              amount: { value: 20.00, currency: "BRL" },
              target: "DELIVERY_FEE",
              sponsorshipValues:
                [
                  {
                    name: "MARKETPLACE",
                    amount: { value: 10.00, currency: "BRL" },
                  },
                  {
                    name: "MERCHANT",
                    amount: { value: 10.00, currency: "BRL" },
                  },
                ],
            },
          ]
        total:
          {
            itemsPrice: { value: 50.00, currency: "BRL" },
            otherFees: { value: 5.00, currency: "BRL" },
            discount: { value: 20.00, currency: "BRL" },
            orderAmount: { value: 35.50, currency: "BRL" },
          }
        payments:
          prepaid: 55.00
          pending: 0
          methods:
            [
              {
                value: 55.00,
                currency: "BRL",
                method: "FOOD_VOUCHER",
                methodInfo: "None",
              },
            ]
        customer:
          id: d9730653-a8ba-4e85-8dbb-b5697e6ae8d5"
          phone:
            number: "11999999999"
            extension: "0"
          documentNumber: "12345"
          name: "John"
          ordersCountOnMerchant: 1
        delivery:
          deliveredBy: "MERCHANT"
          deliveryAddress:
            country: "BR"
            streetName: "Gomes de Carvalho Street"
            formattedAddress: "string"
            streetNumber: "100"
            city: "São Paulo"
            postalCode: "20111-000"
            coordinates:
              latitude: -23.54754
              longitude: -46.63611
            neighborhood: "Moema"
            state: "SP"
            complement: "102"
        estimatedDeliveryDateTime: "2021-05-27T20:45:10.332Z"
        deliveryDateTime: "2021-05-27T20:47:10.443Z"
        extraInfo: "None"

    merchantExample:
      summary: "Merchant Example"
      value:
        lastUpdate: "2021-05-27T20:45:10.332Z"
        TTL: 500
        id: "22815773000169-dbc7e35a-c936-4665-9e13-eb55eb8b6824"
        status: "AVAILABLE"
        basicInfo:
          name: "Pizza Plaza"
          document: "22815773000169"
          corporateName: "Food Company"
          description: "Food company specializing in pizzas."
          averageTicket: 90.00
          averagePreparationTime: 20
          minOrderValue:
            value: 20.00
            currency: "BRL"
          merchantType: "RESTAURANT"
          merchantCategories: ["PIZZA", "FAMILY_MEALS", "PREMIUM"]
          address:
            country: "BR"
            state: "SP"
            city: "São Paulo"
            district: "Moema"
            street: "Plaza Avenue"
            number: "100"
            postalCode: "20111-000"
            complement: "2001"
            reference: "Yellow house"
            latitude: -23.54804
            longitude: -46.63630
          contactEmails: ["food@company.com"]
          contactPhones:
            { commercialNumber: "11999999999", whatsappNumber: "11998888888" }
          logoImage:
            URL: "https://food-company.com/logo.png"
            CRC-32: 432098ASDSR
          bannerImage:
            URL: "https://food-company.com/banner.png"
            CRC-32: 09345UIHF98
          createdAt: "2021-05-10T20:45:10.332Z"
        services:
          [
            {
              id: "f078e8e2-3044-4eec-b4a8-8359810de123",
              status: "AVAILABLE",
              serviceType: "DELIVERY",
              menuId: "f627ccdc-6789-456f-a782-148538d5035b",
              serviceArea:
                {
                  "id": "f078e8e2-3044-4eec-b4a8-8359810de124",
                  "polygon":
                    [
                      {
                        "geoCoordinates":
                          [
                            { "latitude": -20.23330, "longitude": -20.83830 },
                            { "latitude": -20.85008, "longitude": -21.00007 },
                            { "latitude": -21.15002, "longitude": -21.95483 },
                          ],
                        "price": { "value": 5, "currency": "BRL" },
                        "estimateDeliveryTime": 25,
                      },
                    ],
                  "geoRadius":
                    {
                      "geoMidpointLatitude": -20.2333,
                      "geoMidpointLongitude": -20.8383,
                      "radius":
                        [
                          {
                            "size": 10,
                            "price": { "value": 5.50, "currency": "BRL" },
                            "estimateDeliveryTime": 10,
                          },
                        ],
                    },
                },
              serviceHours:
                {
                  id: "fb093d8c-2ca5-40fb-afcf-472fbdae81cc",
                  weekHours:
                    [
                      {
                        dayOfWeek:
                          [
                            "MONDAY",
                            "TUESDAY",
                            "WEDNESDAY",
                            "THURSDAY",
                            "FRIDAY",
                          ],
                        timePeriods:
                          {
                            startTime: "10:00:00.000Z",
                            endTime: "18:00:00.000Z",
                          },
                      },
                      {
                        dayOfWeek: ["SATURDAY", "SUNDAY"],
                        timePeriods:
                          {
                            startTime: "14:00:00.000Z",
                            endTime: "18:00:00.000Z",
                          },
                      },
                    ],
                  holidayHours:
                    [
                      {
                        date: "2021-05-27",
                        timePeriods:
                          {
                            startTime: "12:00:00.000Z",
                            endTime: "17:00:00.000Z",
                          },
                      },
                    ],
                },
            },
          ]
        items:
          [
            {
              id: "732bd31e-77fc-47ee-88ee-a0437f97b198",
              name: "Medium - 2 flavors",
              description: "Medium two-flavored pizza.",
              externalCode: "23",
              image:
                {
                  URL: "https://www.food-place.com/images/medium-pizza.png",
                  CRC-32: 09345UIHF98,
                },
              serving: 8,
              unit: "unit",
            },
            {
              id: "b728fd88-4af0-43f7-956f-95c251f01ddd",
              name: "Small - 1 flavor",
              description: "Small one-flavored pizza.",
              externalCode: "23",
              image:
                {
                  URL: "https://www.food-place.com/images/small-pizza.png",
                  CRC-32: 09345UIHF98,
                },
              serving: 4,
              unit: "unit",
            },
            {
              id: "502ecf11-0509-48ed-b63c-6211c48fd9b9",
              name: "1/2 Pepperoni",
              description: "Pepperoni flavored pizza with LOTS of pepperoni.",
              externalCode: "23",
              image:
                {
                  URL: "https://www.food-place.com/images/pepperoni.png",
                  CRC-32: 09345UIHF98,
                },
              nutritionalInfo:
                {
                  description: "Contains preservatives",
                  calories: "2000 Cal",
                  allergen: ["GLUTEN"],
                },
              unit: "unit",
            },
            {
              id: 7e507cab-7235-4f75-a0c2-e955fb2f2048,
              name: "1/2 Mozzarella",
              description: "Delicious mozzarella pizza.",
              externalCode: "24",
              image:
                {
                  URL: "https://www.food-place.com/images/mozzarella.png",
                  CRC-32: 09345UIHF98,
                },
              nutritionalInfo:
                {
                  description: "Contains preservatives",
                  calories: "2500 Cal",
                  allergen: ["GLUTEN", "LACTOSE"],
                },
              unit: "unit",
            },
            {
              id: 2c0f3447-5309-49cc-a167-4eac5c664470,
              name: "Banana",
              description: "Banana Pizza with cream.",
              externalCode: "25",
              image:
                {
                  URL: "https://www.food-place.com/images/banana.png",
                  CRC-32: 09345UIHF98,
                },
              nutritionalInfo:
                {
                  description: "Contains preservatives",
                  calories: "2500 Cal",
                  allergen: ["GLUTEN"],
                },
              unit: "unit",
            },
          ]
        menus:
          [
            {
              id: f627ccdc-6789-456f-a782-148538d5035b",
              name: "Pizzas",
              description: "Pizza menu",
              externalCode: "123",
              disclaimer: "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
              categoryId:
                [
                  "92fad022-2c28-4239-a026-989f5b555cb7",
                  "6bb71850-1d40-49f9-8046-b13e068c0cca",
                ],
            },
          ]
        categories:
          [
            {
              id: "92fad022-2c28-4239-a026-989f5b555cb7",
              index: 0,
              name: "Salted Pizza",
              description: "Salted pizza flavors.",
              image:
                {
                  URL: "https://food-company.com/category1.png",
                  CRC-32: 09345UIHF98,
                },
              externalCode: "13",
              status: "AVAILABLE",
              availabilityId: ["11d063c4-73a7-4f87-a0eb-71636cc02029"],
              itemOfferId: ["f080cfb3-5c4a-4eb7-907d-2de3bbb5dfb9"],
            },
            {
              id: "6bb71850-1d40-49f9-8046-b13e068c0cca",
              index: 1,
              name: "Sweeted Pizza",
              description: "Sweeted pizza flavors.",
              image:
                {
                  URL: "https://food-company.com/category2.png",
                  CRC-32: 09345UIHF98,
                },
              externalCode: "13",
              status: "AVAILABLE",
              availabilityId: ["11d063c4-73a7-4f87-a0eb-71636cc02029"],
              itemOfferId: ["377b99ba-5413-43d1-b875-7cdcaa72860e"],
            },
          ]
        itemOffers:
          [
            {
              id: f080cfb3-5c4a-4eb7-907d-2de3bbb5dfb9,
              itemId: 732bd31e-77fc-47ee-88ee-a0437f97b198,
              index: 0,
              price: { value: 43.00, originalValue: 43.00, currency: "BRL" },
              availabilityId: ["11d063c4-73a7-4f87-a0eb-71636cc02029"],
              optionGroupsId: ["fe67e551-f42f-499a-8afb-0ed893c71fa3"],
            },
            {
              id: 377b99ba-5413-43d1-b875-7cdcaa72860e,
              itemId: 7e507cab-7235-4f75-a0c2-e955fb2f2048,
              index: 1,
              price: { value: 30.00, originalValue: 30.00, currency: "BRL" },
              availabilityId: ["11d063c4-73a7-4f87-a0eb-71636cc02029"],
              optionGroupsId: ["c524c066-96fa-458d-b78c-3712661529b3"],
            },
          ]
        optionGroups:
          [
            {
              id: "fe67e551-f42f-499a-8afb-0ed893c71fa3",
              index: 0,
              name: "Choose your salted pizza flavor",
              description: "Choose your salted pizza flavor.",
              externalCode: "12",
              status: "AVAILABLE",
              minPermitted: 2,
              maxPermitted: 2,
              options:
                [
                  {
                    id: "e5232f14-430c-4a94-8ff6-289d5a16a87a",
                    itemId: "502ecf11-0509-48ed-b63c-6211c48fd9b9",
                    index: 0,
                    price:
                      { value: 50.00, originalValue: 50.00, currency: "BRL" },
                    maxPermitted: 1,
                  },
                  {
                    id: "e5232f14-430c-4a94-8ff6-289d5a16a87b",
                    itemId: "7e507cab-7235-4f75-a0c2-e955fb2f2048",
                    index: 1,
                    price:
                      { value: 43.00, originalValue: 43.00, currency: "BRL" },
                    maxPermitted: 1,
                  },
                ],
            },
            {
              id: "c524c066-96fa-458d-b78c-3712661529b3",
              index: 0,
              name: "Choose your sweeted pizza flavor",
              description: "Choose your sweeted pizza flavor.",
              externalCode: "12",
              status: "AVAILABLE",
              minPermitted: 1,
              maxPermitted: 1,
              options:
                [
                  {
                    id: "2419d582-357f-4149-9089-12321537f147",
                    itemId: "2c0f3447-5309-49cc-a167-4eac5c664470",
                    index: 0,
                    price:
                      { value: 30.00, originalValue: 30.00, currency: "BRL" },
                    maxPermitted: 1,
                  },
                ],
            },
          ]
        availabilities:
          [
            {
              id: "11d063c4-73a7-4f87-a0eb-71636cc02029",
              startDate: "05/01/2021",
              endDate: "05/30/2021",
              hours:
                [
                  {
                    dayOfWeek:
                      ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY"],
                    timePeriods:
                      { startTime: "10:00:00.000Z", endTime: "18:00:00.000Z" },
                  },
                  {
                    dayOfWeek: ["SATURDAY", "SUNDAY"],
                    timePeriods:
                      { startTime: "14:00:00.000Z", endTime: "18:00:00.000Z" },
                  },
                ],
            },
          ]
